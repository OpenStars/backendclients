/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tnotifystorage_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace OpenStars { namespace Common { namespace TNotifyStorageService {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENotFound,
  TErrorCode::EUnknown,
  TErrorCode::EDataExisted
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENotFound",
  "EUnknown",
  "EDataExisted"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TNotifyItem::~TNotifyItem() throw() {
}


void TNotifyItem::__set_key(const int64_t val) {
  this->key = val;
}

void TNotifyItem::__set_subjectId(const int64_t val) {
  this->subjectId = val;
}

void TNotifyItem::__set_actionId(const int64_t val) {
  this->actionId = val;
}

void TNotifyItem::__set_objectId(const int64_t val) {
  this->objectId = val;
}

void TNotifyItem::__set_subjectType(const int64_t val) {
  this->subjectType = val;
}

void TNotifyItem::__set_extendSubjectId(const std::vector<int64_t> & val) {
  this->extendSubjectId = val;
}

void TNotifyItem::__set_message(const std::string& val) {
  this->message = val;
}

void TNotifyItem::__set_extend(const std::string& val) {
  this->extend = val;
__isset.extend = true;
}

void TNotifyItem::__set_seen(const bool val) {
  this->seen = val;
}

void TNotifyItem::__set_timestamps(const int64_t val) {
  this->timestamps = val;
}

void TNotifyItem::__set_sourceId(const int64_t val) {
  this->sourceId = val;
}

void TNotifyItem::__set_parentId(const int64_t val) {
  this->parentId = val;
}
std::ostream& operator<<(std::ostream& out, const TNotifyItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TNotifyItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subjectId);
          this->__isset.subjectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actionId);
          this->__isset.actionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->objectId);
          this->__isset.objectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subjectType);
          this->__isset.subjectType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->extendSubjectId.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->extendSubjectId.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->extendSubjectId[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.extendSubjectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->seen);
          this->__isset.seen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamps);
          this->__isset.timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sourceId);
          this->__isset.sourceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentId);
          this->__isset.parentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TNotifyItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TNotifyItem");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subjectId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->subjectId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actionId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->actionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objectId", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->objectId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("subjectType", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->subjectType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extendSubjectId", ::apache::thrift::protocol::T_LIST, 7);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->extendSubjectId.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->extendSubjectId.begin(); _iter5 != this->extendSubjectId.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->extend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("seen", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->seen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->timestamps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sourceId", ::apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->sourceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("parentId", ::apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->parentId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TNotifyItem &a, TNotifyItem &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.subjectId, b.subjectId);
  swap(a.actionId, b.actionId);
  swap(a.objectId, b.objectId);
  swap(a.subjectType, b.subjectType);
  swap(a.extendSubjectId, b.extendSubjectId);
  swap(a.message, b.message);
  swap(a.extend, b.extend);
  swap(a.seen, b.seen);
  swap(a.timestamps, b.timestamps);
  swap(a.sourceId, b.sourceId);
  swap(a.parentId, b.parentId);
  swap(a.__isset, b.__isset);
}

TNotifyItem::TNotifyItem(const TNotifyItem& other6) {
  key = other6.key;
  subjectId = other6.subjectId;
  actionId = other6.actionId;
  objectId = other6.objectId;
  subjectType = other6.subjectType;
  extendSubjectId = other6.extendSubjectId;
  message = other6.message;
  extend = other6.extend;
  seen = other6.seen;
  timestamps = other6.timestamps;
  sourceId = other6.sourceId;
  parentId = other6.parentId;
  __isset = other6.__isset;
}
TNotifyItem& TNotifyItem::operator=(const TNotifyItem& other7) {
  key = other7.key;
  subjectId = other7.subjectId;
  actionId = other7.actionId;
  objectId = other7.objectId;
  subjectType = other7.subjectType;
  extendSubjectId = other7.extendSubjectId;
  message = other7.message;
  extend = other7.extend;
  seen = other7.seen;
  timestamps = other7.timestamps;
  sourceId = other7.sourceId;
  parentId = other7.parentId;
  __isset = other7.__isset;
  return *this;
}
void TNotifyItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TNotifyItem(";
  out << "key=" << to_string(key);
  out << ", " << "subjectId=" << to_string(subjectId);
  out << ", " << "actionId=" << to_string(actionId);
  out << ", " << "objectId=" << to_string(objectId);
  out << ", " << "subjectType=" << to_string(subjectType);
  out << ", " << "extendSubjectId=" << to_string(extendSubjectId);
  out << ", " << "message=" << to_string(message);
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ", " << "seen=" << to_string(seen);
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ", " << "sourceId=" << to_string(sourceId);
  out << ", " << "parentId=" << to_string(parentId);
  out << ")";
}


TDataResult::~TDataResult() throw() {
}


void TDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TDataResult::__set_data(const TNotifyItem& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->errorCode = (TErrorCode::type)ecast8;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataResult &a, TDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TDataResult::TDataResult(const TDataResult& other9) {
  errorCode = other9.errorCode;
  data = other9.data;
  __isset = other9.__isset;
}
TDataResult& TDataResult::operator=(const TDataResult& other10) {
  errorCode = other10.errorCode;
  data = other10.data;
  __isset = other10.__isset;
  return *this;
}
void TDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TListDataResult::~TListDataResult() throw() {
}


void TListDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TListDataResult::__set_datass(const std::vector<TNotifyItem> & val) {
  this->datass = val;
__isset.datass = true;
}
std::ostream& operator<<(std::ostream& out, const TListDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TListDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->errorCode = (TErrorCode::type)ecast11;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datass.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->datass.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->datass[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.datass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TListDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TListDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.datass) {
    xfer += oprot->writeFieldBegin("datass", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->datass.size()));
      std::vector<TNotifyItem> ::const_iterator _iter17;
      for (_iter17 = this->datass.begin(); _iter17 != this->datass.end(); ++_iter17)
      {
        xfer += (*_iter17).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TListDataResult &a, TListDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.datass, b.datass);
  swap(a.__isset, b.__isset);
}

TListDataResult::TListDataResult(const TListDataResult& other18) {
  errorCode = other18.errorCode;
  datass = other18.datass;
  __isset = other18.__isset;
}
TListDataResult& TListDataResult::operator=(const TListDataResult& other19) {
  errorCode = other19.errorCode;
  datass = other19.datass;
  __isset = other19.__isset;
  return *this;
}
void TListDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TListDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "datass="; (__isset.datass ? (out << to_string(datass)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
