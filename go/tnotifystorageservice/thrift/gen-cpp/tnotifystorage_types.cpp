/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tnotifystorage_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace OpenStars { namespace Common { namespace TNotifyStorageService {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENotFound,
  TErrorCode::EUnknown,
  TErrorCode::EDataExisted
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENotFound",
  "EUnknown",
  "EDataExisted"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


TNotifyItem::~TNotifyItem() throw() {
}


void TNotifyItem::__set_key(const int64_t val) {
  this->key = val;
}

void TNotifyItem::__set_objectId(const int64_t val) {
  this->objectId = val;
}

void TNotifyItem::__set_actionId(const int64_t val) {
  this->actionId = val;
}

void TNotifyItem::__set_targetId(const int64_t val) {
  this->targetId = val;
__isset.targetId = true;
}

void TNotifyItem::__set_extendId(const std::vector<int64_t> & val) {
  this->extendId = val;
__isset.extendId = true;
}

void TNotifyItem::__set_extendmapdata(const std::map<std::string, std::string> & val) {
  this->extendmapdata = val;
__isset.extendmapdata = true;
}

void TNotifyItem::__set_extend(const std::string& val) {
  this->extend = val;
__isset.extend = true;
}

void TNotifyItem::__set_seen(const bool val) {
  this->seen = val;
__isset.seen = true;
}

void TNotifyItem::__set_timestamps(const int64_t val) {
  this->timestamps = val;
}
std::ostream& operator<<(std::ostream& out, const TNotifyItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TNotifyItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->objectId);
          this->__isset.objectId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->actionId);
          this->__isset.actionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->targetId);
          this->__isset.targetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->extendId.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->extendId.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->extendId[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.extendId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->extendmapdata.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _ktype6;
            ::apache::thrift::protocol::TType _vtype7;
            xfer += iprot->readMapBegin(_ktype6, _vtype7, _size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              std::string _key10;
              xfer += iprot->readString(_key10);
              std::string& _val11 = this->extendmapdata[_key10];
              xfer += iprot->readString(_val11);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.extendmapdata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->seen);
          this->__isset.seen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamps);
          this->__isset.timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TNotifyItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TNotifyItem");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objectId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->objectId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("actionId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->actionId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.targetId) {
    xfer += oprot->writeFieldBegin("targetId", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->targetId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extendId) {
    xfer += oprot->writeFieldBegin("extendId", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->extendId.size()));
      std::vector<int64_t> ::const_iterator _iter12;
      for (_iter12 = this->extendId.begin(); _iter12 != this->extendId.end(); ++_iter12)
      {
        xfer += oprot->writeI64((*_iter12));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extendmapdata) {
    xfer += oprot->writeFieldBegin("extendmapdata", ::apache::thrift::protocol::T_MAP, 6);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->extendmapdata.size()));
      std::map<std::string, std::string> ::const_iterator _iter13;
      for (_iter13 = this->extendmapdata.begin(); _iter13 != this->extendmapdata.end(); ++_iter13)
      {
        xfer += oprot->writeString(_iter13->first);
        xfer += oprot->writeString(_iter13->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->extend);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.seen) {
    xfer += oprot->writeFieldBegin("seen", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->seen);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->timestamps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TNotifyItem &a, TNotifyItem &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.objectId, b.objectId);
  swap(a.actionId, b.actionId);
  swap(a.targetId, b.targetId);
  swap(a.extendId, b.extendId);
  swap(a.extendmapdata, b.extendmapdata);
  swap(a.extend, b.extend);
  swap(a.seen, b.seen);
  swap(a.timestamps, b.timestamps);
  swap(a.__isset, b.__isset);
}

TNotifyItem::TNotifyItem(const TNotifyItem& other14) {
  key = other14.key;
  objectId = other14.objectId;
  actionId = other14.actionId;
  targetId = other14.targetId;
  extendId = other14.extendId;
  extendmapdata = other14.extendmapdata;
  extend = other14.extend;
  seen = other14.seen;
  timestamps = other14.timestamps;
  __isset = other14.__isset;
}
TNotifyItem& TNotifyItem::operator=(const TNotifyItem& other15) {
  key = other15.key;
  objectId = other15.objectId;
  actionId = other15.actionId;
  targetId = other15.targetId;
  extendId = other15.extendId;
  extendmapdata = other15.extendmapdata;
  extend = other15.extend;
  seen = other15.seen;
  timestamps = other15.timestamps;
  __isset = other15.__isset;
  return *this;
}
void TNotifyItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TNotifyItem(";
  out << "key=" << to_string(key);
  out << ", " << "objectId=" << to_string(objectId);
  out << ", " << "actionId=" << to_string(actionId);
  out << ", " << "targetId="; (__isset.targetId ? (out << to_string(targetId)) : (out << "<null>"));
  out << ", " << "extendId="; (__isset.extendId ? (out << to_string(extendId)) : (out << "<null>"));
  out << ", " << "extendmapdata="; (__isset.extendmapdata ? (out << to_string(extendmapdata)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ", " << "seen="; (__isset.seen ? (out << to_string(seen)) : (out << "<null>"));
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ")";
}


TDataResult::~TDataResult() throw() {
}


void TDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TDataResult::__set_data(const TNotifyItem& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->errorCode = (TErrorCode::type)ecast16;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataResult &a, TDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TDataResult::TDataResult(const TDataResult& other17) {
  errorCode = other17.errorCode;
  data = other17.data;
  __isset = other17.__isset;
}
TDataResult& TDataResult::operator=(const TDataResult& other18) {
  errorCode = other18.errorCode;
  data = other18.data;
  __isset = other18.__isset;
  return *this;
}
void TDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TListDataResult::~TListDataResult() throw() {
}


void TListDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TListDataResult::__set_datass(const std::vector<TNotifyItem> & val) {
  this->datass = val;
__isset.datass = true;
}
std::ostream& operator<<(std::ostream& out, const TListDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TListDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->errorCode = (TErrorCode::type)ecast19;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datass.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->datass.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->datass[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.datass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TListDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TListDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.datass) {
    xfer += oprot->writeFieldBegin("datass", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->datass.size()));
      std::vector<TNotifyItem> ::const_iterator _iter25;
      for (_iter25 = this->datass.begin(); _iter25 != this->datass.end(); ++_iter25)
      {
        xfer += (*_iter25).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TListDataResult &a, TListDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.datass, b.datass);
  swap(a.__isset, b.__isset);
}

TListDataResult::TListDataResult(const TListDataResult& other26) {
  errorCode = other26.errorCode;
  datass = other26.datass;
  __isset = other26.__isset;
}
TListDataResult& TListDataResult::operator=(const TListDataResult& other27) {
  errorCode = other27.errorCode;
  datass = other27.datass;
  __isset = other27.__isset;
  return *this;
}
void TListDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TListDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "datass="; (__isset.datass ? (out << to_string(datass)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
