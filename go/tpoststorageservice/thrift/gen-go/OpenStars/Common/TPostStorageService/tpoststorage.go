// Autogenerated by Thrift Compiler (0.14.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package TPostStorageService

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENotFound TErrorCode = -1
  TErrorCode_EUnknown TErrorCode = -2
  TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENotFound: return "ENotFound"
  case TErrorCode_EUnknown: return "EUnknown"
  case TErrorCode_EDataExisted: return "EDataExisted"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENotFound": return TErrorCode_ENotFound, nil 
  case "EUnknown": return TErrorCode_EUnknown, nil 
  case "EDataExisted": return TErrorCode_EDataExisted, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TPrivacy int64
const (
  TPrivacy_Public TPrivacy = 0
  TPrivacy_Friends TPrivacy = 1
  TPrivacy_FriendsExcept TPrivacy = 2
  TPrivacy_Onlyme TPrivacy = 3
  TPrivacy_SpecificFriends TPrivacy = 4
)

func (p TPrivacy) String() string {
  switch p {
  case TPrivacy_Public: return "Public"
  case TPrivacy_Friends: return "Friends"
  case TPrivacy_FriendsExcept: return "FriendsExcept"
  case TPrivacy_Onlyme: return "Onlyme"
  case TPrivacy_SpecificFriends: return "SpecificFriends"
  }
  return "<UNSET>"
}

func TPrivacyFromString(s string) (TPrivacy, error) {
  switch s {
  case "Public": return TPrivacy_Public, nil 
  case "Friends": return TPrivacy_Friends, nil 
  case "FriendsExcept": return TPrivacy_FriendsExcept, nil 
  case "Onlyme": return TPrivacy_Onlyme, nil 
  case "SpecificFriends": return TPrivacy_SpecificFriends, nil 
  }
  return TPrivacy(0), fmt.Errorf("not a valid TPrivacy string")
}


func TPrivacyPtr(v TPrivacy) *TPrivacy { return &v }

func (p TPrivacy) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TPrivacy) UnmarshalText(text []byte) error {
q, err := TPrivacyFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TPrivacy) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TPrivacy(v)
return nil
}

func (p * TPrivacy) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TKey int64

func TKeyPtr(v TKey) *TKey { return &v }

type TData *TPostItem

func TDataPtr(v TData) *TData { return &v }

// Attributes:
//  - Text
//  - Href
type ActionLink struct {
  Text *string `thrift:"text,1" db:"text" json:"text,omitempty"`
  Href *string `thrift:"href,2" db:"href" json:"href,omitempty"`
}

func NewActionLink() *ActionLink {
  return &ActionLink{}
}

var ActionLink_Text_DEFAULT string
func (p *ActionLink) GetText() string {
  if !p.IsSetText() {
    return ActionLink_Text_DEFAULT
  }
return *p.Text
}
var ActionLink_Href_DEFAULT string
func (p *ActionLink) GetHref() string {
  if !p.IsSetHref() {
    return ActionLink_Href_DEFAULT
  }
return *p.Href
}
func (p *ActionLink) IsSetText() bool {
  return p.Text != nil
}

func (p *ActionLink) IsSetHref() bool {
  return p.Href != nil
}

func (p *ActionLink) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ActionLink)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Text = &v
}
  return nil
}

func (p *ActionLink)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Href = &v
}
  return nil
}

func (p *ActionLink) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ActionLink"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ActionLink) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetText() {
    if err := oprot.WriteFieldBegin("text", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:text: ", p), err) }
    if err := oprot.WriteString(string(*p.Text)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.text (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:text: ", p), err) }
  }
  return err
}

func (p *ActionLink) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHref() {
    if err := oprot.WriteFieldBegin("href", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:href: ", p), err) }
    if err := oprot.WriteString(string(*p.Href)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.href (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:href: ", p), err) }
  }
  return err
}

func (p *ActionLink) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ActionLink(%+v)", *p)
}

// Attributes:
//  - Name
//  - MediaType
//  - URL
//  - Idmedia
//  - Idpost
//  - Timestamps
//  - Extend
//  - MapExtend
type MediaItem struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  MediaType int64 `thrift:"mediaType,2" db:"mediaType" json:"mediaType"`
  URL string `thrift:"url,3" db:"url" json:"url"`
  Idmedia int64 `thrift:"idmedia,4" db:"idmedia" json:"idmedia"`
  Idpost int64 `thrift:"idpost,5" db:"idpost" json:"idpost"`
  Timestamps int64 `thrift:"timestamps,6" db:"timestamps" json:"timestamps"`
  Extend string `thrift:"extend,7" db:"extend" json:"extend"`
  MapExtend map[string]string `thrift:"mapExtend,8" db:"mapExtend" json:"mapExtend"`
}

func NewMediaItem() *MediaItem {
  return &MediaItem{}
}


func (p *MediaItem) GetName() string {
  return p.Name
}

func (p *MediaItem) GetMediaType() int64 {
  return p.MediaType
}

func (p *MediaItem) GetURL() string {
  return p.URL
}

func (p *MediaItem) GetIdmedia() int64 {
  return p.Idmedia
}

func (p *MediaItem) GetIdpost() int64 {
  return p.Idpost
}

func (p *MediaItem) GetTimestamps() int64 {
  return p.Timestamps
}

func (p *MediaItem) GetExtend() string {
  return p.Extend
}

func (p *MediaItem) GetMapExtend() map[string]string {
  return p.MapExtend
}
func (p *MediaItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MediaItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MediaItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MediaType = v
}
  return nil
}

func (p *MediaItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *MediaItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Idmedia = v
}
  return nil
}

func (p *MediaItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Idpost = v
}
  return nil
}

func (p *MediaItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Timestamps = v
}
  return nil
}

func (p *MediaItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Extend = v
}
  return nil
}

func (p *MediaItem)  ReadField8(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MapExtend =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.MapExtend[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MediaItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MediaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MediaItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *MediaItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaType", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mediaType: ", p), err) }
  if err := oprot.WriteI64(int64(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mediaType: ", p), err) }
  return err
}

func (p *MediaItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:url: ", p), err) }
  return err
}

func (p *MediaItem) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idmedia", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:idmedia: ", p), err) }
  if err := oprot.WriteI64(int64(p.Idmedia)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idmedia (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:idmedia: ", p), err) }
  return err
}

func (p *MediaItem) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idpost", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:idpost: ", p), err) }
  if err := oprot.WriteI64(int64(p.Idpost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idpost (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:idpost: ", p), err) }
  return err
}

func (p *MediaItem) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamps", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamps: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamps (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamps: ", p), err) }
  return err
}

func (p *MediaItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extend", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extend: ", p), err) }
  if err := oprot.WriteString(string(p.Extend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.extend (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extend: ", p), err) }
  return err
}

func (p *MediaItem) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mapExtend", thrift.MAP, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:mapExtend: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapExtend)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MapExtend {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:mapExtend: ", p), err) }
  return err
}

func (p *MediaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MediaItem(%+v)", *p)
}

// Attributes:
//  - Pubkey
//  - DisplayName
//  - Avatar
type OwnerData struct {
  Pubkey string `thrift:"pubkey,1" db:"pubkey" json:"pubkey"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  Avatar string `thrift:"avatar,3" db:"avatar" json:"avatar"`
}

func NewOwnerData() *OwnerData {
  return &OwnerData{}
}


func (p *OwnerData) GetPubkey() string {
  return p.Pubkey
}

func (p *OwnerData) GetDisplayName() string {
  return p.DisplayName
}

func (p *OwnerData) GetAvatar() string {
  return p.Avatar
}
func (p *OwnerData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OwnerData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pubkey = v
}
  return nil
}

func (p *OwnerData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *OwnerData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *OwnerData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("OwnerData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OwnerData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubkey: ", p), err) }
  if err := oprot.WriteString(string(p.Pubkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubkey: ", p), err) }
  return err
}

func (p *OwnerData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *OwnerData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:avatar: ", p), err) }
  return err
}

func (p *OwnerData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("OwnerData(%+v)", *p)
}

// Attributes:
//  - Idpost
//  - UID
//  - Content
//  - ListMediaItems
//  - Privacy
//  - Timestamps
//  - Pubkey
//  - ActionLinks
//  - Extend
//  - TotalReaction
//  - TotalComment
//  - TotalShare
//  - OriginPostID
//  - OwnerInfo
//  - MapExtend
type TPostItem struct {
  Idpost TKey `thrift:"idpost,1" db:"idpost" json:"idpost"`
  UID int64 `thrift:"uid,2" db:"uid" json:"uid"`
  Content string `thrift:"content,3" db:"content" json:"content"`
  ListMediaItems []*MediaItem `thrift:"listMediaItems,4" db:"listMediaItems" json:"listMediaItems,omitempty"`
  // unused fields # 5 to 6
  Privacy int64 `thrift:"privacy,7" db:"privacy" json:"privacy"`
  // unused fields # 8 to 11
  Timestamps int64 `thrift:"timestamps,12" db:"timestamps" json:"timestamps"`
  Pubkey string `thrift:"pubkey,13" db:"pubkey" json:"pubkey"`
  // unused fields # 14 to 16
  ActionLinks []*ActionLink `thrift:"actionLinks,17" db:"actionLinks" json:"actionLinks,omitempty"`
  // unused fields # 18 to 20
  Extend *string `thrift:"extend,21" db:"extend" json:"extend,omitempty"`
  TotalReaction int64 `thrift:"totalReaction,22" db:"totalReaction" json:"totalReaction"`
  TotalComment int64 `thrift:"totalComment,23" db:"totalComment" json:"totalComment"`
  TotalShare int64 `thrift:"totalShare,24" db:"totalShare" json:"totalShare"`
  OriginPostID int64 `thrift:"originPostID,25" db:"originPostID" json:"originPostID"`
  OwnerInfo *OwnerData `thrift:"ownerInfo,26" db:"ownerInfo" json:"ownerInfo"`
  MapExtend map[string]string `thrift:"mapExtend,27" db:"mapExtend" json:"mapExtend"`
}

func NewTPostItem() *TPostItem {
  return &TPostItem{}
}


func (p *TPostItem) GetIdpost() TKey {
  return p.Idpost
}

func (p *TPostItem) GetUID() int64 {
  return p.UID
}

func (p *TPostItem) GetContent() string {
  return p.Content
}
var TPostItem_ListMediaItems_DEFAULT []*MediaItem

func (p *TPostItem) GetListMediaItems() []*MediaItem {
  return p.ListMediaItems
}

func (p *TPostItem) GetPrivacy() int64 {
  return p.Privacy
}

func (p *TPostItem) GetTimestamps() int64 {
  return p.Timestamps
}

func (p *TPostItem) GetPubkey() string {
  return p.Pubkey
}
var TPostItem_ActionLinks_DEFAULT []*ActionLink

func (p *TPostItem) GetActionLinks() []*ActionLink {
  return p.ActionLinks
}
var TPostItem_Extend_DEFAULT string
func (p *TPostItem) GetExtend() string {
  if !p.IsSetExtend() {
    return TPostItem_Extend_DEFAULT
  }
return *p.Extend
}

func (p *TPostItem) GetTotalReaction() int64 {
  return p.TotalReaction
}

func (p *TPostItem) GetTotalComment() int64 {
  return p.TotalComment
}

func (p *TPostItem) GetTotalShare() int64 {
  return p.TotalShare
}

func (p *TPostItem) GetOriginPostID() int64 {
  return p.OriginPostID
}
var TPostItem_OwnerInfo_DEFAULT *OwnerData
func (p *TPostItem) GetOwnerInfo() *OwnerData {
  if !p.IsSetOwnerInfo() {
    return TPostItem_OwnerInfo_DEFAULT
  }
return p.OwnerInfo
}

func (p *TPostItem) GetMapExtend() map[string]string {
  return p.MapExtend
}
func (p *TPostItem) IsSetListMediaItems() bool {
  return p.ListMediaItems != nil
}

func (p *TPostItem) IsSetActionLinks() bool {
  return p.ActionLinks != nil
}

func (p *TPostItem) IsSetExtend() bool {
  return p.Extend != nil
}

func (p *TPostItem) IsSetOwnerInfo() bool {
  return p.OwnerInfo != nil
}

func (p *TPostItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TPostItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Idpost = temp
}
  return nil
}

func (p *TPostItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TPostItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *TPostItem)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MediaItem, 0, size)
  p.ListMediaItems =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &MediaItem{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ListMediaItems = append(p.ListMediaItems, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPostItem)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Privacy = v
}
  return nil
}

func (p *TPostItem)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Timestamps = v
}
  return nil
}

func (p *TPostItem)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Pubkey = v
}
  return nil
}

func (p *TPostItem)  ReadField17(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ActionLink, 0, size)
  p.ActionLinks =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &ActionLink{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.ActionLinks = append(p.ActionLinks, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TPostItem)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Extend = &v
}
  return nil
}

func (p *TPostItem)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.TotalReaction = v
}
  return nil
}

func (p *TPostItem)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.TotalComment = v
}
  return nil
}

func (p *TPostItem)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.TotalShare = v
}
  return nil
}

func (p *TPostItem)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.OriginPostID = v
}
  return nil
}

func (p *TPostItem)  ReadField26(iprot thrift.TProtocol) error {
  p.OwnerInfo = &OwnerData{}
  if err := p.OwnerInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OwnerInfo), err)
  }
  return nil
}

func (p *TPostItem)  ReadField27(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MapExtend =  tMap
  for i := 0; i < size; i ++ {
var _key4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key4 = v
}
var _val5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val5 = v
}
    p.MapExtend[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TPostItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TPostItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TPostItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("idpost", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:idpost: ", p), err) }
  if err := oprot.WriteI64(int64(p.Idpost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idpost (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:idpost: ", p), err) }
  return err
}

func (p *TPostItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uid: ", p), err) }
  return err
}

func (p *TPostItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err) }
  if err := oprot.WriteString(string(p.Content)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err) }
  return err
}

func (p *TPostItem) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetListMediaItems() {
    if err := oprot.WriteFieldBegin("listMediaItems", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:listMediaItems: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListMediaItems)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ListMediaItems {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:listMediaItems: ", p), err) }
  }
  return err
}

func (p *TPostItem) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacy", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:privacy: ", p), err) }
  if err := oprot.WriteI64(int64(p.Privacy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacy (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:privacy: ", p), err) }
  return err
}

func (p *TPostItem) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamps", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:timestamps: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamps (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:timestamps: ", p), err) }
  return err
}

func (p *TPostItem) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:pubkey: ", p), err) }
  if err := oprot.WriteString(string(p.Pubkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubkey (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:pubkey: ", p), err) }
  return err
}

func (p *TPostItem) writeField17(oprot thrift.TProtocol) (err error) {
  if p.IsSetActionLinks() {
    if err := oprot.WriteFieldBegin("actionLinks", thrift.LIST, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:actionLinks: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ActionLinks)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ActionLinks {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:actionLinks: ", p), err) }
  }
  return err
}

func (p *TPostItem) writeField21(oprot thrift.TProtocol) (err error) {
  if p.IsSetExtend() {
    if err := oprot.WriteFieldBegin("extend", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:extend: ", p), err) }
    if err := oprot.WriteString(string(*p.Extend)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extend (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:extend: ", p), err) }
  }
  return err
}

func (p *TPostItem) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalReaction", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:totalReaction: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalReaction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalReaction (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:totalReaction: ", p), err) }
  return err
}

func (p *TPostItem) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalComment", thrift.I64, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:totalComment: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalComment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalComment (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:totalComment: ", p), err) }
  return err
}

func (p *TPostItem) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalShare", thrift.I64, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:totalShare: ", p), err) }
  if err := oprot.WriteI64(int64(p.TotalShare)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalShare (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:totalShare: ", p), err) }
  return err
}

func (p *TPostItem) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("originPostID", thrift.I64, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:originPostID: ", p), err) }
  if err := oprot.WriteI64(int64(p.OriginPostID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originPostID (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:originPostID: ", p), err) }
  return err
}

func (p *TPostItem) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ownerInfo", thrift.STRUCT, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:ownerInfo: ", p), err) }
  if err := p.OwnerInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OwnerInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:ownerInfo: ", p), err) }
  return err
}

func (p *TPostItem) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mapExtend", thrift.MAP, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:mapExtend: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapExtend)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MapExtend {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:mapExtend: ", p), err) }
  return err
}

func (p *TPostItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TPostItem(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Data
type TDataResult_ struct {
  ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Data *TPostItem `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTDataResult_() *TDataResult_ {
  return &TDataResult_{}
}


func (p *TDataResult_) GetErrorCode() TErrorCode {
  return p.ErrorCode
}
var TDataResult__Data_DEFAULT *TPostItem
func (p *TDataResult_) GetData() *TPostItem {
  if !p.IsSetData() {
    return TDataResult__Data_DEFAULT
  }
return p.Data
}
func (p *TDataResult_) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TPostItem{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *TDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *TDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataResult_(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - ListDatas
type TListDataResult_ struct {
  ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  ListDatas []*TPostItem `thrift:"listDatas,2" db:"listDatas" json:"listDatas"`
}

func NewTListDataResult_() *TListDataResult_ {
  return &TListDataResult_{}
}


func (p *TListDataResult_) GetErrorCode() TErrorCode {
  return p.ErrorCode
}

func (p *TListDataResult_) GetListDatas() []*TPostItem {
  return p.ListDatas
}
func (p *TListDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TListDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TListDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TPostItem, 0, size)
  p.ListDatas =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TPostItem{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.ListDatas = append(p.ListDatas, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TListDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *TListDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listDatas", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:listDatas: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListDatas)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ListDatas {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:listDatas: ", p), err) }
  return err
}

func (p *TListDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListDataResult_(%+v)", *p)
}

type TDataServiceR interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
}

type TDataServiceRClient struct {
  c thrift.TClient
}

func NewTDataServiceRClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceRClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceRClient(c thrift.TClient) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: c,
  }
}

func (p *TDataServiceRClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TDataServiceRClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args7 TDataServiceRGetDataArgs
  _args7.Key = key
  var _result8 TDataServiceRGetDataResult
  if err = p.Client_().Call(ctx, "getData", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

type TDataServiceRProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataServiceR
}

func (p *TDataServiceRProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceRProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceRProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceRProcessor(handler TDataServiceR) *TDataServiceRProcessor {

  self9 := &TDataServiceRProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self9.processorMap["getData"] = &tDataServiceRProcessorGetData{handler:handler}
return self9
}

func (p *TDataServiceRProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x10.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x10

}

type tDataServiceRProcessorGetData struct {
  handler TDataServiceR
}

func (p *tDataServiceRProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceRGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceRGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceRGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceRGetDataArgs() *TDataServiceRGetDataArgs {
  return &TDataServiceRGetDataArgs{}
}


func (p *TDataServiceRGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceRGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceRGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceRGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceRGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceRGetDataResult() *TDataServiceRGetDataResult {
  return &TDataServiceRGetDataResult{}
}

var TDataServiceRGetDataResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceRGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceRGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceRGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceRGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceRGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataResult(%+v)", *p)
}


type TDataService interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
  // Parameters:
  //  - Key
  //  - Data
  PutData(ctx context.Context, key TKey, data *TPostItem) (r TErrorCode, err error)
  // Parameters:
  //  - Key
  RemoveData(ctx context.Context, key TKey) (r TErrorCode, err error)
  // Parameters:
  //  - Listkey
  GetListDatas(ctx context.Context, listkey []TKey) (r *TListDataResult_, err error)
}

type TDataServiceClient struct {
  c thrift.TClient
}

func NewTDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceClient(c thrift.TClient) *TDataServiceClient {
  return &TDataServiceClient{
    c: c,
  }
}

func (p *TDataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TDataServiceClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args12 TDataServiceGetDataArgs
  _args12.Key = key
  var _result13 TDataServiceGetDataResult
  if err = p.Client_().Call(ctx, "getData", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Key
//  - Data
func (p *TDataServiceClient) PutData(ctx context.Context, key TKey, data *TPostItem) (r TErrorCode, err error) {
  var _args14 TDataServicePutDataArgs
  _args14.Key = key
  _args14.Data = data
  var _result15 TDataServicePutDataResult
  if err = p.Client_().Call(ctx, "putData", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - Key
func (p *TDataServiceClient) RemoveData(ctx context.Context, key TKey) (r TErrorCode, err error) {
  var _args16 TDataServiceRemoveDataArgs
  _args16.Key = key
  var _result17 TDataServiceRemoveDataResult
  if err = p.Client_().Call(ctx, "removeData", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - Listkey
func (p *TDataServiceClient) GetListDatas(ctx context.Context, listkey []TKey) (r *TListDataResult_, err error) {
  var _args18 TDataServiceGetListDatasArgs
  _args18.Listkey = listkey
  var _result19 TDataServiceGetListDatasResult
  if err = p.Client_().Call(ctx, "getListDatas", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

type TDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataService
}

func (p *TDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceProcessor(handler TDataService) *TDataServiceProcessor {

  self20 := &TDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self20.processorMap["getData"] = &tDataServiceProcessorGetData{handler:handler}
  self20.processorMap["putData"] = &tDataServiceProcessorPutData{handler:handler}
  self20.processorMap["removeData"] = &tDataServiceProcessorRemoveData{handler:handler}
  self20.processorMap["getListDatas"] = &tDataServiceProcessorGetListDatas{handler:handler}
return self20
}

func (p *TDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x21 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x21.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x21

}

type tDataServiceProcessorGetData struct {
  handler TDataService
}

func (p *tDataServiceProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorPutData struct {
  handler TDataService
}

func (p *tDataServiceProcessorPutData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServicePutDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServicePutDataResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.PutData(ctx, args.Key, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putData: " + err2.Error())
    oprot.WriteMessageBegin("putData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("putData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorRemoveData struct {
  handler TDataService
}

func (p *tDataServiceProcessorRemoveData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceRemoveDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceRemoveDataResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.RemoveData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeData: " + err2.Error())
    oprot.WriteMessageBegin("removeData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorGetListDatas struct {
  handler TDataService
}

func (p *tDataServiceProcessorGetListDatas) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceGetListDatasArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListDatas", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceGetListDatasResult{}
var retval *TListDataResult_
  var err2 error
  if retval, err2 = p.handler.GetListDatas(ctx, args.Listkey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListDatas: " + err2.Error())
    oprot.WriteMessageBegin("getListDatas", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getListDatas", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceGetDataArgs() *TDataServiceGetDataArgs {
  return &TDataServiceGetDataArgs{}
}


func (p *TDataServiceGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetDataResult() *TDataServiceGetDataResult {
  return &TDataServiceGetDataResult{}
}

var TDataServiceGetDataResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetDataResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Data
type TDataServicePutDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
  Data *TPostItem `thrift:"data,2" db:"data" json:"data"`
}

func NewTDataServicePutDataArgs() *TDataServicePutDataArgs {
  return &TDataServicePutDataArgs{}
}


func (p *TDataServicePutDataArgs) GetKey() TKey {
  return p.Key
}
var TDataServicePutDataArgs_Data_DEFAULT *TPostItem
func (p *TDataServicePutDataArgs) GetData() *TPostItem {
  if !p.IsSetData() {
    return TDataServicePutDataArgs_Data_DEFAULT
  }
return p.Data
}
func (p *TDataServicePutDataArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataServicePutDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServicePutDataArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TPostItem{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataServicePutDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServicePutDataArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TDataServicePutDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServicePutDataResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServicePutDataResult() *TDataServicePutDataResult {
  return &TDataServicePutDataResult{}
}

var TDataServicePutDataResult_Success_DEFAULT TErrorCode
func (p *TDataServicePutDataResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TDataServicePutDataResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDataServicePutDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServicePutDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutDataResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TDataServicePutDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServicePutDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutDataResult(%+v)", *p)
}

// Attributes:
//  - Key
type TDataServiceRemoveDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceRemoveDataArgs() *TDataServiceRemoveDataArgs {
  return &TDataServiceRemoveDataArgs{}
}


func (p *TDataServiceRemoveDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceRemoveDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRemoveDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceRemoveDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRemoveDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceRemoveDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRemoveDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceRemoveDataResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceRemoveDataResult() *TDataServiceRemoveDataResult {
  return &TDataServiceRemoveDataResult{}
}

var TDataServiceRemoveDataResult_Success_DEFAULT TErrorCode
func (p *TDataServiceRemoveDataResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TDataServiceRemoveDataResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDataServiceRemoveDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceRemoveDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRemoveDataResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TDataServiceRemoveDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRemoveDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceRemoveDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRemoveDataResult(%+v)", *p)
}

// Attributes:
//  - Listkey
type TDataServiceGetListDatasArgs struct {
  Listkey []TKey `thrift:"listkey,1" db:"listkey" json:"listkey"`
}

func NewTDataServiceGetListDatasArgs() *TDataServiceGetListDatasArgs {
  return &TDataServiceGetListDatasArgs{}
}


func (p *TDataServiceGetListDatasArgs) GetListkey() []TKey {
  return p.Listkey
}
func (p *TDataServiceGetListDatasArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetListDatasArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]TKey, 0, size)
  p.Listkey =  tSlice
  for i := 0; i < size; i ++ {
var _elem22 TKey
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := TKey(v)
    _elem22 = temp
}
    p.Listkey = append(p.Listkey, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDataServiceGetListDatasArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListDatas_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetListDatasArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listkey", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:listkey: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.Listkey)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Listkey {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:listkey: ", p), err) }
  return err
}

func (p *TDataServiceGetListDatasArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetListDatasArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetListDatasResult struct {
  Success *TListDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetListDatasResult() *TDataServiceGetListDatasResult {
  return &TDataServiceGetListDatasResult{}
}

var TDataServiceGetListDatasResult_Success_DEFAULT *TListDataResult_
func (p *TDataServiceGetListDatasResult) GetSuccess() *TListDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceGetListDatasResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceGetListDatasResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceGetListDatasResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetListDatasResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceGetListDatasResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListDatas_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetListDatasResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceGetListDatasResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetListDatasResult(%+v)", *p)
}


type TPostStorageService interface {
TDataService
}

type TPostStorageServiceClient struct {
  *TDataServiceClient
}

func NewTPostStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TPostStorageServiceClient {
  return &TPostStorageServiceClient{TDataServiceClient: NewTDataServiceClientFactory(t, f)}}

func NewTPostStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TPostStorageServiceClient {
  return &TPostStorageServiceClient{TDataServiceClient: NewTDataServiceClientProtocol(t, iprot, oprot)}
}

func NewTPostStorageServiceClient(c thrift.TClient) *TPostStorageServiceClient {
  return &TPostStorageServiceClient{
    TDataServiceClient: NewTDataServiceClient(c),
  }
}

type TPostStorageServiceProcessor struct {
  *TDataServiceProcessor
}

func NewTPostStorageServiceProcessor(handler TPostStorageService) *TPostStorageServiceProcessor {
  self38 := &TPostStorageServiceProcessor{NewTDataServiceProcessor(handler)}
  return self38
}


// HELPER FUNCTIONS AND STRUCTURES


