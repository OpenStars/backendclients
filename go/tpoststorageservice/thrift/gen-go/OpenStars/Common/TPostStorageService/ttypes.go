// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package TPostStorageService

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type TErrorCode int64

const (
	TErrorCode_EGood        TErrorCode = 0
	TErrorCode_ENotFound    TErrorCode = -1
	TErrorCode_EUnknown     TErrorCode = -2
	TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
	switch p {
	case TErrorCode_EGood:
		return "TErrorCode_EGood"
	case TErrorCode_ENotFound:
		return "TErrorCode_ENotFound"
	case TErrorCode_EUnknown:
		return "TErrorCode_EUnknown"
	case TErrorCode_EDataExisted:
		return "TErrorCode_EDataExisted"
	}
	return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
	switch s {
	case "TErrorCode_EGood":
		return TErrorCode_EGood, nil
	case "TErrorCode_ENotFound":
		return TErrorCode_ENotFound, nil
	case "TErrorCode_EUnknown":
		return TErrorCode_EUnknown, nil
	case "TErrorCode_EDataExisted":
		return TErrorCode_EDataExisted, nil
	}
	return TErrorCode(math.MinInt32 - 1), fmt.Errorf("not a valid TErrorCode string")
}

type TPrivacy int64

const (
	TPrivacy_Public          TPrivacy = 0
	TPrivacy_Friends         TPrivacy = 1
	TPrivacy_FriendsExcept   TPrivacy = 2
	TPrivacy_Onlyme          TPrivacy = 3
	TPrivacy_SpecificFriends TPrivacy = 4
)

func (p TPrivacy) String() string {
	switch p {
	case TPrivacy_Public:
		return "TPrivacy_Public"
	case TPrivacy_Friends:
		return "TPrivacy_Friends"
	case TPrivacy_FriendsExcept:
		return "TPrivacy_FriendsExcept"
	case TPrivacy_Onlyme:
		return "TPrivacy_Onlyme"
	case TPrivacy_SpecificFriends:
		return "TPrivacy_SpecificFriends"
	}
	return "<UNSET>"
}

func TPrivacyFromString(s string) (TPrivacy, error) {
	switch s {
	case "TPrivacy_Public":
		return TPrivacy_Public, nil
	case "TPrivacy_Friends":
		return TPrivacy_Friends, nil
	case "TPrivacy_FriendsExcept":
		return TPrivacy_FriendsExcept, nil
	case "TPrivacy_Onlyme":
		return TPrivacy_Onlyme, nil
	case "TPrivacy_SpecificFriends":
		return TPrivacy_SpecificFriends, nil
	}
	return TPrivacy(math.MinInt32 - 1), fmt.Errorf("not a valid TPrivacy string")
}

type TKey int64

type TData *TPostItem

type ActionLink struct {
	Text string `thrift:"text,1"`
	Href string `thrift:"href,2"`
}

func NewActionLink() *ActionLink {
	return &ActionLink{}
}

func (p *ActionLink) IsSetText() bool {
	return p.Text != ""
}

func (p *ActionLink) IsSetHref() bool {
	return p.Href != ""
}

func (p *ActionLink) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ActionLink) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Text = v
	}
	return nil
}

func (p *ActionLink) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Href = v
	}
	return nil
}

func (p *ActionLink) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ActionLink"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ActionLink) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err := oprot.WriteFieldBegin("text", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:text: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Text)); err != nil {
			return fmt.Errorf("%T.text (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:text: %s", p, err)
		}
	}
	return err
}

func (p *ActionLink) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHref() {
		if err := oprot.WriteFieldBegin("href", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:href: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Href)); err != nil {
			return fmt.Errorf("%T.href (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:href: %s", p, err)
		}
	}
	return err
}

func (p *ActionLink) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActionLink(%+v)", *p)
}

type MediaItem struct {
	Name       string `thrift:"name,1"`
	MediaType  int64  `thrift:"mediaType,2"`
	Url        string `thrift:"url,3"`
	Idmedia    int64  `thrift:"idmedia,4"`
	Idpost     int64  `thrift:"idpost,5"`
	Timestamps int64  `thrift:"timestamps,6"`
	Extend     string `thrift:"extend,7"`
}

func NewMediaItem() *MediaItem {
	return &MediaItem{}
}

func (p *MediaItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MediaItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *MediaItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MediaType = v
	}
	return nil
}

func (p *MediaItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Url = v
	}
	return nil
}

func (p *MediaItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Idmedia = v
	}
	return nil
}

func (p *MediaItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Idpost = v
	}
	return nil
}

func (p *MediaItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *MediaItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Extend = v
	}
	return nil
}

func (p *MediaItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MediaItem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MediaItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *MediaItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mediaType: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MediaType)); err != nil {
		return fmt.Errorf("%T.mediaType (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mediaType: %s", p, err)
	}
	return err
}

func (p *MediaItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Url)); err != nil {
		return fmt.Errorf("%T.url (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:url: %s", p, err)
	}
	return err
}

func (p *MediaItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idmedia", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:idmedia: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Idmedia)); err != nil {
		return fmt.Errorf("%T.idmedia (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:idmedia: %s", p, err)
	}
	return err
}

func (p *MediaItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idpost", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:idpost: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Idpost)); err != nil {
		return fmt.Errorf("%T.idpost (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:idpost: %s", p, err)
	}
	return err
}

func (p *MediaItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:timestamps: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamps)); err != nil {
		return fmt.Errorf("%T.timestamps (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:timestamps: %s", p, err)
	}
	return err
}

func (p *MediaItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extend", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:extend: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Extend)); err != nil {
		return fmt.Errorf("%T.extend (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:extend: %s", p, err)
	}
	return err
}

func (p *MediaItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MediaItem(%+v)", *p)
}

type TPostItem struct {
	Idpost          TKey         `thrift:"idpost,1"`
	Uid             int64        `thrift:"uid,2"`
	Content         string       `thrift:"content,3"`
	ListMediaItems  []*MediaItem `thrift:"listMediaItems,4"`
	Idbackground    string       `thrift:"idbackground,5"`
	Idfeeling       string       `thrift:"idfeeling,6"`
	Privacy         int64        `thrift:"privacy,7"`
	Friendsexcept   []int64      `thrift:"friendsexcept,8"`
	Specificfriends []int64      `thrift:"specificfriends,9"`
	Tagusers        []int64      `thrift:"tagusers,10"`
	LocationId      string       `thrift:"locationId,11"`
	Timestamps      int64        `thrift:"timestamps,12"`
	Pubkey          string       `thrift:"pubkey,13"`
	// unused field # 14
	Touid       int64         `thrift:"touid,15"`
	Togroupid   int64         `thrift:"togroupid,16"`
	ActionLinks []*ActionLink `thrift:"actionLinks,17"`
	// unused field # 18
	Poolid int64  `thrift:"poolid,19"`
	Pageid int64  `thrift:"pageid,20"`
	Extend string `thrift:"extend,21"`
}

func NewTPostItem() *TPostItem {
	return &TPostItem{}
}

func (p *TPostItem) IsSetListMediaItems() bool {
	return p.ListMediaItems != nil && len(p.ListMediaItems) > 0
}

func (p *TPostItem) IsSetIdbackground() bool {
	return p.Idbackground != ""
}

func (p *TPostItem) IsSetIdfeeling() bool {
	return p.Idfeeling != ""
}

func (p *TPostItem) IsSetFriendsexcept() bool {
	return p.Friendsexcept != nil && len(p.Friendsexcept) > 0
}

func (p *TPostItem) IsSetSpecificfriends() bool {
	return p.Specificfriends != nil && len(p.Specificfriends) > 0
}

func (p *TPostItem) IsSetTagusers() bool {
	return p.Tagusers != nil && len(p.Tagusers) > 0
}

func (p *TPostItem) IsSetLocationId() bool {
	return p.LocationId != ""
}

func (p *TPostItem) IsSetTouid() bool {
	return p.Touid != 0
}

func (p *TPostItem) IsSetTogroupid() bool {
	return p.Togroupid != 0
}

func (p *TPostItem) IsSetActionLinks() bool {
	return p.ActionLinks != nil && len(p.ActionLinks) > 0
}

func (p *TPostItem) IsSetPoolid() bool {
	return p.Poolid != 0
}

func (p *TPostItem) IsSetPageid() bool {
	return p.Pageid != 0
}

func (p *TPostItem) IsSetExtend() bool {
	return p.Extend != ""
}

func (p *TPostItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TPostItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Idpost = TKey(v)
	}
	return nil
}

func (p *TPostItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Uid = v
	}
	return nil
}

func (p *TPostItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Content = v
	}
	return nil
}

func (p *TPostItem) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ListMediaItems = make([]*MediaItem, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := NewMediaItem()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.ListMediaItems = append(p.ListMediaItems, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TPostItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Idbackground = v
	}
	return nil
}

func (p *TPostItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Idfeeling = v
	}
	return nil
}

func (p *TPostItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Privacy = v
	}
	return nil
}

func (p *TPostItem) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Friendsexcept = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem1 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem1 = v
		}
		p.Friendsexcept = append(p.Friendsexcept, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TPostItem) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Specificfriends = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem2 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem2 = v
		}
		p.Specificfriends = append(p.Specificfriends, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TPostItem) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Tagusers = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem3 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem3 = v
		}
		p.Tagusers = append(p.Tagusers, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TPostItem) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.LocationId = v
	}
	return nil
}

func (p *TPostItem) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *TPostItem) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.Pubkey = v
	}
	return nil
}

func (p *TPostItem) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.Touid = v
	}
	return nil
}

func (p *TPostItem) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.Togroupid = v
	}
	return nil
}

func (p *TPostItem) readField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ActionLinks = make([]*ActionLink, 0, size)
	for i := 0; i < size; i++ {
		_elem4 := NewActionLink()
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4)
		}
		p.ActionLinks = append(p.ActionLinks, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TPostItem) readField19(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 19: %s")
	} else {
		p.Poolid = v
	}
	return nil
}

func (p *TPostItem) readField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 20: %s")
	} else {
		p.Pageid = v
	}
	return nil
}

func (p *TPostItem) readField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 21: %s")
	} else {
		p.Extend = v
	}
	return nil
}

func (p *TPostItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TPostItem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TPostItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idpost", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:idpost: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Idpost)); err != nil {
		return fmt.Errorf("%T.idpost (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:idpost: %s", p, err)
	}
	return err
}

func (p *TPostItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:uid: %s", p, err)
	}
	return err
}

func (p *TPostItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:content: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Content)); err != nil {
		return fmt.Errorf("%T.content (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:content: %s", p, err)
	}
	return err
}

func (p *TPostItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.ListMediaItems != nil {
		if p.IsSetListMediaItems() {
			if err := oprot.WriteFieldBegin("listMediaItems", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:listMediaItems: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListMediaItems)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ListMediaItems {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:listMediaItems: %s", p, err)
			}
		}
	}
	return err
}

func (p *TPostItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdbackground() {
		if err := oprot.WriteFieldBegin("idbackground", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:idbackground: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Idbackground)); err != nil {
			return fmt.Errorf("%T.idbackground (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:idbackground: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdfeeling() {
		if err := oprot.WriteFieldBegin("idfeeling", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:idfeeling: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Idfeeling)); err != nil {
			return fmt.Errorf("%T.idfeeling (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:idfeeling: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("privacy", thrift.I64, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:privacy: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Privacy)); err != nil {
		return fmt.Errorf("%T.privacy (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:privacy: %s", p, err)
	}
	return err
}

func (p *TPostItem) writeField8(oprot thrift.TProtocol) (err error) {
	if p.Friendsexcept != nil {
		if p.IsSetFriendsexcept() {
			if err := oprot.WriteFieldBegin("friendsexcept", thrift.LIST, 8); err != nil {
				return fmt.Errorf("%T write field begin error 8:friendsexcept: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.I64, len(p.Friendsexcept)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Friendsexcept {
				if err := oprot.WriteI64(int64(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 8:friendsexcept: %s", p, err)
			}
		}
	}
	return err
}

func (p *TPostItem) writeField9(oprot thrift.TProtocol) (err error) {
	if p.Specificfriends != nil {
		if p.IsSetSpecificfriends() {
			if err := oprot.WriteFieldBegin("specificfriends", thrift.LIST, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:specificfriends: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.I64, len(p.Specificfriends)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Specificfriends {
				if err := oprot.WriteI64(int64(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:specificfriends: %s", p, err)
			}
		}
	}
	return err
}

func (p *TPostItem) writeField10(oprot thrift.TProtocol) (err error) {
	if p.Tagusers != nil {
		if p.IsSetTagusers() {
			if err := oprot.WriteFieldBegin("tagusers", thrift.LIST, 10); err != nil {
				return fmt.Errorf("%T write field begin error 10:tagusers: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.I64, len(p.Tagusers)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Tagusers {
				if err := oprot.WriteI64(int64(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 10:tagusers: %s", p, err)
			}
		}
	}
	return err
}

func (p *TPostItem) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocationId() {
		if err := oprot.WriteFieldBegin("locationId", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:locationId: %s", p, err)
		}
		if err := oprot.WriteString(string(p.LocationId)); err != nil {
			return fmt.Errorf("%T.locationId (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:locationId: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.I64, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:timestamps: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamps)); err != nil {
		return fmt.Errorf("%T.timestamps (12) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:timestamps: %s", p, err)
	}
	return err
}

func (p *TPostItem) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:pubkey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Pubkey)); err != nil {
		return fmt.Errorf("%T.pubkey (13) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:pubkey: %s", p, err)
	}
	return err
}

func (p *TPostItem) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetTouid() {
		if err := oprot.WriteFieldBegin("touid", thrift.I64, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:touid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Touid)); err != nil {
			return fmt.Errorf("%T.touid (15) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:touid: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetTogroupid() {
		if err := oprot.WriteFieldBegin("togroupid", thrift.I64, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:togroupid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Togroupid)); err != nil {
			return fmt.Errorf("%T.togroupid (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:togroupid: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) writeField17(oprot thrift.TProtocol) (err error) {
	if p.ActionLinks != nil {
		if p.IsSetActionLinks() {
			if err := oprot.WriteFieldBegin("actionLinks", thrift.LIST, 17); err != nil {
				return fmt.Errorf("%T write field begin error 17:actionLinks: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ActionLinks)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ActionLinks {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 17:actionLinks: %s", p, err)
			}
		}
	}
	return err
}

func (p *TPostItem) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetPoolid() {
		if err := oprot.WriteFieldBegin("poolid", thrift.I64, 19); err != nil {
			return fmt.Errorf("%T write field begin error 19:poolid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Poolid)); err != nil {
			return fmt.Errorf("%T.poolid (19) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 19:poolid: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageid() {
		if err := oprot.WriteFieldBegin("pageid", thrift.I64, 20); err != nil {
			return fmt.Errorf("%T write field begin error 20:pageid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Pageid)); err != nil {
			return fmt.Errorf("%T.pageid (20) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 20:pageid: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtend() {
		if err := oprot.WriteFieldBegin("extend", thrift.STRING, 21); err != nil {
			return fmt.Errorf("%T write field begin error 21:extend: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Extend)); err != nil {
			return fmt.Errorf("%T.extend (21) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 21:extend: %s", p, err)
		}
	}
	return err
}

func (p *TPostItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TPostItem(%+v)", *p)
}

type TDataResult struct {
	ErrorCode TErrorCode `thrift:"errorCode,1"`
	Data      *TPostItem `thrift:"data,2"`
}

func NewTDataResult() *TDataResult {
	return &TDataResult{
		ErrorCode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *TDataResult) IsSetErrorCode() bool {
	return int64(p.ErrorCode) != math.MinInt32-1
}

func (p *TDataResult) IsSetData() bool {
	return p.Data != nil
}

func (p *TDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TDataResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = TErrorCode(v)
	}
	return nil
}

func (p *TDataResult) readField2(iprot thrift.TProtocol) error {
	p.Data = NewTPostItem()
	if err := p.Data.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Data)
	}
	return nil
}

func (p *TDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDataResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.errorCode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
		}
	}
	return err
}

func (p *TDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if p.IsSetData() {
			if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:data: %s", p, err)
			}
			if err := p.Data.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Data)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:data: %s", p, err)
			}
		}
	}
	return err
}

func (p *TDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataResult(%+v)", *p)
}

type TListDataResult struct {
	ErrorCode TErrorCode   `thrift:"errorCode,1"`
	ListDatas []*TPostItem `thrift:"listDatas,2"`
}

func NewTListDataResult() *TListDataResult {
	return &TListDataResult{
		ErrorCode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *TListDataResult) IsSetErrorCode() bool {
	return int64(p.ErrorCode) != math.MinInt32-1
}

func (p *TListDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TListDataResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = TErrorCode(v)
	}
	return nil
}

func (p *TListDataResult) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ListDatas = make([]*TPostItem, 0, size)
	for i := 0; i < size; i++ {
		_elem5 := NewTPostItem()
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5)
		}
		p.ListDatas = append(p.ListDatas, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TListDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListDataResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TListDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.errorCode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
		}
	}
	return err
}

func (p *TListDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.ListDatas != nil {
		if err := oprot.WriteFieldBegin("listDatas", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:listDatas: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListDatas)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.ListDatas {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:listDatas: %s", p, err)
		}
	}
	return err
}

func (p *TListDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListDataResult(%+v)", *p)
}
