/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tpoststorage_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace OpenStars { namespace Common { namespace TPostStorageService {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENotFound,
  TErrorCode::EUnknown,
  TErrorCode::EDataExisted
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENotFound",
  "EUnknown",
  "EDataExisted"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kTPrivacyValues[] = {
  TPrivacy::Public,
  TPrivacy::Friends,
  TPrivacy::FriendsExcept,
  TPrivacy::Onlyme,
  TPrivacy::SpecificFriends
};
const char* _kTPrivacyNames[] = {
  "Public",
  "Friends",
  "FriendsExcept",
  "Onlyme",
  "SpecificFriends"
};
const std::map<int, const char*> _TPrivacy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTPrivacyValues, _kTPrivacyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TPrivacy::type& val) {
  std::map<int, const char*>::const_iterator it = _TPrivacy_VALUES_TO_NAMES.find(val);
  if (it != _TPrivacy_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const TPrivacy::type& val) {
  std::map<int, const char*>::const_iterator it = _TPrivacy_VALUES_TO_NAMES.find(val);
  if (it != _TPrivacy_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


TPostItem::~TPostItem() noexcept {
}


void TPostItem::__set_idpost(const TKey val) {
  this->idpost = val;
}

void TPostItem::__set_uid(const int64_t val) {
  this->uid = val;
}

void TPostItem::__set_content(const std::string& val) {
  this->content = val;
}

void TPostItem::__set_listMediasId(const std::vector<std::string> & val) {
  this->listMediasId = val;
__isset.listMediasId = true;
}

void TPostItem::__set_idbackground(const std::string& val) {
  this->idbackground = val;
__isset.idbackground = true;
}

void TPostItem::__set_idfeeling(const std::string& val) {
  this->idfeeling = val;
__isset.idfeeling = true;
}

void TPostItem::__set_privacy(const int64_t val) {
  this->privacy = val;
}

void TPostItem::__set_friendsexcept(const std::vector<int64_t> & val) {
  this->friendsexcept = val;
__isset.friendsexcept = true;
}

void TPostItem::__set_specificfriends(const std::vector<int64_t> & val) {
  this->specificfriends = val;
__isset.specificfriends = true;
}

void TPostItem::__set_tagusers(const std::vector<int64_t> & val) {
  this->tagusers = val;
__isset.tagusers = true;
}

void TPostItem::__set_locationId(const std::string& val) {
  this->locationId = val;
__isset.locationId = true;
}

void TPostItem::__set_timestamps(const int64_t val) {
  this->timestamps = val;
}

void TPostItem::__set_pubkey(const std::string& val) {
  this->pubkey = val;
}
std::ostream& operator<<(std::ostream& out, const TPostItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TPostItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->idpost);
          this->__isset.idpost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listMediasId.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->listMediasId.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->listMediasId[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listMediasId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->idbackground);
          this->__isset.idbackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->idfeeling);
          this->__isset.idfeeling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->privacy);
          this->__isset.privacy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendsexcept.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->friendsexcept.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI64(this->friendsexcept[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendsexcept = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->specificfriends.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->specificfriends.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readI64(this->specificfriends[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.specificfriends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagusers.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->tagusers.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += iprot->readI64(this->tagusers[_i19]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagusers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationId);
          this->__isset.locationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamps);
          this->__isset.timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pubkey);
          this->__isset.pubkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPostItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPostItem");

  xfer += oprot->writeFieldBegin("idpost", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->idpost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.listMediasId) {
    xfer += oprot->writeFieldBegin("listMediasId", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->listMediasId.size()));
      std::vector<std::string> ::const_iterator _iter20;
      for (_iter20 = this->listMediasId.begin(); _iter20 != this->listMediasId.end(); ++_iter20)
      {
        xfer += oprot->writeString((*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idbackground) {
    xfer += oprot->writeFieldBegin("idbackground", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->idbackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idfeeling) {
    xfer += oprot->writeFieldBegin("idfeeling", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->idfeeling);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("privacy", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->privacy);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.friendsexcept) {
    xfer += oprot->writeFieldBegin("friendsexcept", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->friendsexcept.size()));
      std::vector<int64_t> ::const_iterator _iter21;
      for (_iter21 = this->friendsexcept.begin(); _iter21 != this->friendsexcept.end(); ++_iter21)
      {
        xfer += oprot->writeI64((*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.specificfriends) {
    xfer += oprot->writeFieldBegin("specificfriends", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->specificfriends.size()));
      std::vector<int64_t> ::const_iterator _iter22;
      for (_iter22 = this->specificfriends.begin(); _iter22 != this->specificfriends.end(); ++_iter22)
      {
        xfer += oprot->writeI64((*_iter22));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagusers) {
    xfer += oprot->writeFieldBegin("tagusers", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->tagusers.size()));
      std::vector<int64_t> ::const_iterator _iter23;
      for (_iter23 = this->tagusers.begin(); _iter23 != this->tagusers.end(); ++_iter23)
      {
        xfer += oprot->writeI64((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.locationId) {
    xfer += oprot->writeFieldBegin("locationId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->locationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->timestamps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pubkey", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->pubkey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPostItem &a, TPostItem &b) {
  using ::std::swap;
  swap(a.idpost, b.idpost);
  swap(a.uid, b.uid);
  swap(a.content, b.content);
  swap(a.listMediasId, b.listMediasId);
  swap(a.idbackground, b.idbackground);
  swap(a.idfeeling, b.idfeeling);
  swap(a.privacy, b.privacy);
  swap(a.friendsexcept, b.friendsexcept);
  swap(a.specificfriends, b.specificfriends);
  swap(a.tagusers, b.tagusers);
  swap(a.locationId, b.locationId);
  swap(a.timestamps, b.timestamps);
  swap(a.pubkey, b.pubkey);
  swap(a.__isset, b.__isset);
}

TPostItem::TPostItem(const TPostItem& other24) {
  idpost = other24.idpost;
  uid = other24.uid;
  content = other24.content;
  listMediasId = other24.listMediasId;
  idbackground = other24.idbackground;
  idfeeling = other24.idfeeling;
  privacy = other24.privacy;
  friendsexcept = other24.friendsexcept;
  specificfriends = other24.specificfriends;
  tagusers = other24.tagusers;
  locationId = other24.locationId;
  timestamps = other24.timestamps;
  pubkey = other24.pubkey;
  __isset = other24.__isset;
}
TPostItem& TPostItem::operator=(const TPostItem& other25) {
  idpost = other25.idpost;
  uid = other25.uid;
  content = other25.content;
  listMediasId = other25.listMediasId;
  idbackground = other25.idbackground;
  idfeeling = other25.idfeeling;
  privacy = other25.privacy;
  friendsexcept = other25.friendsexcept;
  specificfriends = other25.specificfriends;
  tagusers = other25.tagusers;
  locationId = other25.locationId;
  timestamps = other25.timestamps;
  pubkey = other25.pubkey;
  __isset = other25.__isset;
  return *this;
}
void TPostItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPostItem(";
  out << "idpost=" << to_string(idpost);
  out << ", " << "uid=" << to_string(uid);
  out << ", " << "content=" << to_string(content);
  out << ", " << "listMediasId="; (__isset.listMediasId ? (out << to_string(listMediasId)) : (out << "<null>"));
  out << ", " << "idbackground="; (__isset.idbackground ? (out << to_string(idbackground)) : (out << "<null>"));
  out << ", " << "idfeeling="; (__isset.idfeeling ? (out << to_string(idfeeling)) : (out << "<null>"));
  out << ", " << "privacy=" << to_string(privacy);
  out << ", " << "friendsexcept="; (__isset.friendsexcept ? (out << to_string(friendsexcept)) : (out << "<null>"));
  out << ", " << "specificfriends="; (__isset.specificfriends ? (out << to_string(specificfriends)) : (out << "<null>"));
  out << ", " << "tagusers="; (__isset.tagusers ? (out << to_string(tagusers)) : (out << "<null>"));
  out << ", " << "locationId="; (__isset.locationId ? (out << to_string(locationId)) : (out << "<null>"));
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ", " << "pubkey=" << to_string(pubkey);
  out << ")";
}


TDataResult::~TDataResult() noexcept {
}


void TDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TDataResult::__set_data(const TPostItem& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast26;
          xfer += iprot->readI32(ecast26);
          this->errorCode = (TErrorCode::type)ecast26;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataResult &a, TDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TDataResult::TDataResult(const TDataResult& other27) {
  errorCode = other27.errorCode;
  data = other27.data;
  __isset = other27.__isset;
}
TDataResult& TDataResult::operator=(const TDataResult& other28) {
  errorCode = other28.errorCode;
  data = other28.data;
  __isset = other28.__isset;
  return *this;
}
void TDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TListDataResult::~TListDataResult() noexcept {
}


void TListDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TListDataResult::__set_listDatas(const std::vector<TPostItem> & val) {
  this->listDatas = val;
}
std::ostream& operator<<(std::ostream& out, const TListDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TListDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast29;
          xfer += iprot->readI32(ecast29);
          this->errorCode = (TErrorCode::type)ecast29;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listDatas.clear();
            uint32_t _size30;
            ::apache::thrift::protocol::TType _etype33;
            xfer += iprot->readListBegin(_etype33, _size30);
            this->listDatas.resize(_size30);
            uint32_t _i34;
            for (_i34 = 0; _i34 < _size30; ++_i34)
            {
              xfer += this->listDatas[_i34].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listDatas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TListDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TListDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("listDatas", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->listDatas.size()));
    std::vector<TPostItem> ::const_iterator _iter35;
    for (_iter35 = this->listDatas.begin(); _iter35 != this->listDatas.end(); ++_iter35)
    {
      xfer += (*_iter35).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TListDataResult &a, TListDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.listDatas, b.listDatas);
  swap(a.__isset, b.__isset);
}

TListDataResult::TListDataResult(const TListDataResult& other36) {
  errorCode = other36.errorCode;
  listDatas = other36.listDatas;
  __isset = other36.__isset;
}
TListDataResult& TListDataResult::operator=(const TListDataResult& other37) {
  errorCode = other37.errorCode;
  listDatas = other37.listDatas;
  __isset = other37.__isset;
  return *this;
}
void TListDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TListDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "listDatas=" << to_string(listDatas);
  out << ")";
}

}}} // namespace
