/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tpoststorage_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace OpenStars { namespace Common { namespace TPostStorageService {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENotFound,
  TErrorCode::EUnknown,
  TErrorCode::EDataExisted
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENotFound",
  "EUnknown",
  "EDataExisted"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kTPrivacyValues[] = {
  TPrivacy::Public,
  TPrivacy::Friends,
  TPrivacy::FriendsExcept,
  TPrivacy::Onlyme,
  TPrivacy::SpecificFriends
};
const char* _kTPrivacyNames[] = {
  "Public",
  "Friends",
  "FriendsExcept",
  "Onlyme",
  "SpecificFriends"
};
const std::map<int, const char*> _TPrivacy_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTPrivacyValues, _kTPrivacyNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TPrivacy::type& val) {
  std::map<int, const char*>::const_iterator it = _TPrivacy_VALUES_TO_NAMES.find(val);
  if (it != _TPrivacy_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


ActionLink::~ActionLink() throw() {
}


void ActionLink::__set_text(const std::string& val) {
  this->text = val;
__isset.text = true;
}

void ActionLink::__set_href(const std::string& val) {
  this->href = val;
__isset.href = true;
}
std::ostream& operator<<(std::ostream& out, const ActionLink& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ActionLink::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->href);
          this->__isset.href = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ActionLink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ActionLink");

  if (this->__isset.text) {
    xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->text);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.href) {
    xfer += oprot->writeFieldBegin("href", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->href);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActionLink &a, ActionLink &b) {
  using ::std::swap;
  swap(a.text, b.text);
  swap(a.href, b.href);
  swap(a.__isset, b.__isset);
}

ActionLink::ActionLink(const ActionLink& other0) {
  text = other0.text;
  href = other0.href;
  __isset = other0.__isset;
}
ActionLink& ActionLink::operator=(const ActionLink& other1) {
  text = other1.text;
  href = other1.href;
  __isset = other1.__isset;
  return *this;
}
void ActionLink::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ActionLink(";
  out << "text="; (__isset.text ? (out << to_string(text)) : (out << "<null>"));
  out << ", " << "href="; (__isset.href ? (out << to_string(href)) : (out << "<null>"));
  out << ")";
}


MediaItem::~MediaItem() throw() {
}


void MediaItem::__set_name(const std::string& val) {
  this->name = val;
}

void MediaItem::__set_mediaType(const int64_t val) {
  this->mediaType = val;
}

void MediaItem::__set_url(const std::string& val) {
  this->url = val;
}

void MediaItem::__set_idmedia(const int64_t val) {
  this->idmedia = val;
}

void MediaItem::__set_idpost(const int64_t val) {
  this->idpost = val;
}

void MediaItem::__set_timestamps(const int64_t val) {
  this->timestamps = val;
}

void MediaItem::__set_extend(const std::string& val) {
  this->extend = val;
}
std::ostream& operator<<(std::ostream& out, const MediaItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MediaItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mediaType);
          this->__isset.mediaType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->idmedia);
          this->__isset.idmedia = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->idpost);
          this->__isset.idpost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamps);
          this->__isset.timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MediaItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MediaItem");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mediaType", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->mediaType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idmedia", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->idmedia);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idpost", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->idpost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->timestamps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->extend);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MediaItem &a, MediaItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.mediaType, b.mediaType);
  swap(a.url, b.url);
  swap(a.idmedia, b.idmedia);
  swap(a.idpost, b.idpost);
  swap(a.timestamps, b.timestamps);
  swap(a.extend, b.extend);
  swap(a.__isset, b.__isset);
}

MediaItem::MediaItem(const MediaItem& other2) {
  name = other2.name;
  mediaType = other2.mediaType;
  url = other2.url;
  idmedia = other2.idmedia;
  idpost = other2.idpost;
  timestamps = other2.timestamps;
  extend = other2.extend;
  __isset = other2.__isset;
}
MediaItem& MediaItem::operator=(const MediaItem& other3) {
  name = other3.name;
  mediaType = other3.mediaType;
  url = other3.url;
  idmedia = other3.idmedia;
  idpost = other3.idpost;
  timestamps = other3.timestamps;
  extend = other3.extend;
  __isset = other3.__isset;
  return *this;
}
void MediaItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MediaItem(";
  out << "name=" << to_string(name);
  out << ", " << "mediaType=" << to_string(mediaType);
  out << ", " << "url=" << to_string(url);
  out << ", " << "idmedia=" << to_string(idmedia);
  out << ", " << "idpost=" << to_string(idpost);
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ", " << "extend=" << to_string(extend);
  out << ")";
}


TPostItem::~TPostItem() throw() {
}


void TPostItem::__set_idpost(const TKey val) {
  this->idpost = val;
}

void TPostItem::__set_uid(const int64_t val) {
  this->uid = val;
}

void TPostItem::__set_content(const std::string& val) {
  this->content = val;
}

void TPostItem::__set_listMediaItems(const std::vector<MediaItem> & val) {
  this->listMediaItems = val;
__isset.listMediaItems = true;
}

void TPostItem::__set_idbackground(const std::string& val) {
  this->idbackground = val;
__isset.idbackground = true;
}

void TPostItem::__set_idfeeling(const std::string& val) {
  this->idfeeling = val;
__isset.idfeeling = true;
}

void TPostItem::__set_privacy(const int64_t val) {
  this->privacy = val;
}

void TPostItem::__set_friendsexcept(const std::vector<int64_t> & val) {
  this->friendsexcept = val;
__isset.friendsexcept = true;
}

void TPostItem::__set_specificfriends(const std::vector<int64_t> & val) {
  this->specificfriends = val;
__isset.specificfriends = true;
}

void TPostItem::__set_tagusers(const std::vector<int64_t> & val) {
  this->tagusers = val;
__isset.tagusers = true;
}

void TPostItem::__set_locationId(const std::string& val) {
  this->locationId = val;
__isset.locationId = true;
}

void TPostItem::__set_timestamps(const int64_t val) {
  this->timestamps = val;
}

void TPostItem::__set_pubkey(const std::string& val) {
  this->pubkey = val;
}

void TPostItem::__set_touid(const int64_t val) {
  this->touid = val;
__isset.touid = true;
}

void TPostItem::__set_togroupid(const int64_t val) {
  this->togroupid = val;
__isset.togroupid = true;
}

void TPostItem::__set_actionLinks(const std::vector<ActionLink> & val) {
  this->actionLinks = val;
__isset.actionLinks = true;
}

void TPostItem::__set_poolid(const int64_t val) {
  this->poolid = val;
__isset.poolid = true;
}

void TPostItem::__set_pageid(const int64_t val) {
  this->pageid = val;
__isset.pageid = true;
}

void TPostItem::__set_extend(const std::string& val) {
  this->extend = val;
__isset.extend = true;
}

void TPostItem::__set_totalReaction(const int64_t val) {
  this->totalReaction = val;
}

void TPostItem::__set_totalComment(const int64_t val) {
  this->totalComment = val;
}

void TPostItem::__set_totalShare(const int64_t val) {
  this->totalShare = val;
}

void TPostItem::__set_originPostID(const int64_t val) {
  this->originPostID = val;
}
std::ostream& operator<<(std::ostream& out, const TPostItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TPostItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->idpost);
          this->__isset.idpost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listMediaItems.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->listMediaItems.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->listMediaItems[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listMediaItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->idbackground);
          this->__isset.idbackground = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->idfeeling);
          this->__isset.idfeeling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->privacy);
          this->__isset.privacy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->friendsexcept.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->friendsexcept.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += iprot->readI64(this->friendsexcept[_i13]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.friendsexcept = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->specificfriends.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->specificfriends.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readI64(this->specificfriends[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.specificfriends = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagusers.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->tagusers.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += iprot->readI64(this->tagusers[_i23]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagusers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationId);
          this->__isset.locationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamps);
          this->__isset.timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pubkey);
          this->__isset.pubkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->touid);
          this->__isset.touid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->togroupid);
          this->__isset.togroupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actionLinks.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->actionLinks.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->actionLinks[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actionLinks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->poolid);
          this->__isset.poolid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->pageid);
          this->__isset.pageid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extend);
          this->__isset.extend = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalReaction);
          this->__isset.totalReaction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalComment);
          this->__isset.totalComment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalShare);
          this->__isset.totalShare = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->originPostID);
          this->__isset.originPostID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPostItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPostItem");

  xfer += oprot->writeFieldBegin("idpost", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->idpost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.listMediaItems) {
    xfer += oprot->writeFieldBegin("listMediaItems", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->listMediaItems.size()));
      std::vector<MediaItem> ::const_iterator _iter29;
      for (_iter29 = this->listMediaItems.begin(); _iter29 != this->listMediaItems.end(); ++_iter29)
      {
        xfer += (*_iter29).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idbackground) {
    xfer += oprot->writeFieldBegin("idbackground", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->idbackground);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idfeeling) {
    xfer += oprot->writeFieldBegin("idfeeling", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->idfeeling);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("privacy", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->privacy);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.friendsexcept) {
    xfer += oprot->writeFieldBegin("friendsexcept", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->friendsexcept.size()));
      std::vector<int64_t> ::const_iterator _iter30;
      for (_iter30 = this->friendsexcept.begin(); _iter30 != this->friendsexcept.end(); ++_iter30)
      {
        xfer += oprot->writeI64((*_iter30));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.specificfriends) {
    xfer += oprot->writeFieldBegin("specificfriends", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->specificfriends.size()));
      std::vector<int64_t> ::const_iterator _iter31;
      for (_iter31 = this->specificfriends.begin(); _iter31 != this->specificfriends.end(); ++_iter31)
      {
        xfer += oprot->writeI64((*_iter31));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tagusers) {
    xfer += oprot->writeFieldBegin("tagusers", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->tagusers.size()));
      std::vector<int64_t> ::const_iterator _iter32;
      for (_iter32 = this->tagusers.begin(); _iter32 != this->tagusers.end(); ++_iter32)
      {
        xfer += oprot->writeI64((*_iter32));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.locationId) {
    xfer += oprot->writeFieldBegin("locationId", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->locationId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->timestamps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pubkey", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->pubkey);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.touid) {
    xfer += oprot->writeFieldBegin("touid", ::apache::thrift::protocol::T_I64, 15);
    xfer += oprot->writeI64(this->touid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.togroupid) {
    xfer += oprot->writeFieldBegin("togroupid", ::apache::thrift::protocol::T_I64, 16);
    xfer += oprot->writeI64(this->togroupid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actionLinks) {
    xfer += oprot->writeFieldBegin("actionLinks", ::apache::thrift::protocol::T_LIST, 17);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actionLinks.size()));
      std::vector<ActionLink> ::const_iterator _iter33;
      for (_iter33 = this->actionLinks.begin(); _iter33 != this->actionLinks.end(); ++_iter33)
      {
        xfer += (*_iter33).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.poolid) {
    xfer += oprot->writeFieldBegin("poolid", ::apache::thrift::protocol::T_I64, 19);
    xfer += oprot->writeI64(this->poolid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pageid) {
    xfer += oprot->writeFieldBegin("pageid", ::apache::thrift::protocol::T_I64, 20);
    xfer += oprot->writeI64(this->pageid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.extend) {
    xfer += oprot->writeFieldBegin("extend", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->extend);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("totalReaction", ::apache::thrift::protocol::T_I64, 22);
  xfer += oprot->writeI64(this->totalReaction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalComment", ::apache::thrift::protocol::T_I64, 23);
  xfer += oprot->writeI64(this->totalComment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("totalShare", ::apache::thrift::protocol::T_I64, 24);
  xfer += oprot->writeI64(this->totalShare);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("originPostID", ::apache::thrift::protocol::T_I64, 25);
  xfer += oprot->writeI64(this->originPostID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPostItem &a, TPostItem &b) {
  using ::std::swap;
  swap(a.idpost, b.idpost);
  swap(a.uid, b.uid);
  swap(a.content, b.content);
  swap(a.listMediaItems, b.listMediaItems);
  swap(a.idbackground, b.idbackground);
  swap(a.idfeeling, b.idfeeling);
  swap(a.privacy, b.privacy);
  swap(a.friendsexcept, b.friendsexcept);
  swap(a.specificfriends, b.specificfriends);
  swap(a.tagusers, b.tagusers);
  swap(a.locationId, b.locationId);
  swap(a.timestamps, b.timestamps);
  swap(a.pubkey, b.pubkey);
  swap(a.touid, b.touid);
  swap(a.togroupid, b.togroupid);
  swap(a.actionLinks, b.actionLinks);
  swap(a.poolid, b.poolid);
  swap(a.pageid, b.pageid);
  swap(a.extend, b.extend);
  swap(a.totalReaction, b.totalReaction);
  swap(a.totalComment, b.totalComment);
  swap(a.totalShare, b.totalShare);
  swap(a.originPostID, b.originPostID);
  swap(a.__isset, b.__isset);
}

TPostItem::TPostItem(const TPostItem& other34) {
  idpost = other34.idpost;
  uid = other34.uid;
  content = other34.content;
  listMediaItems = other34.listMediaItems;
  idbackground = other34.idbackground;
  idfeeling = other34.idfeeling;
  privacy = other34.privacy;
  friendsexcept = other34.friendsexcept;
  specificfriends = other34.specificfriends;
  tagusers = other34.tagusers;
  locationId = other34.locationId;
  timestamps = other34.timestamps;
  pubkey = other34.pubkey;
  touid = other34.touid;
  togroupid = other34.togroupid;
  actionLinks = other34.actionLinks;
  poolid = other34.poolid;
  pageid = other34.pageid;
  extend = other34.extend;
  totalReaction = other34.totalReaction;
  totalComment = other34.totalComment;
  totalShare = other34.totalShare;
  originPostID = other34.originPostID;
  __isset = other34.__isset;
}
TPostItem& TPostItem::operator=(const TPostItem& other35) {
  idpost = other35.idpost;
  uid = other35.uid;
  content = other35.content;
  listMediaItems = other35.listMediaItems;
  idbackground = other35.idbackground;
  idfeeling = other35.idfeeling;
  privacy = other35.privacy;
  friendsexcept = other35.friendsexcept;
  specificfriends = other35.specificfriends;
  tagusers = other35.tagusers;
  locationId = other35.locationId;
  timestamps = other35.timestamps;
  pubkey = other35.pubkey;
  touid = other35.touid;
  togroupid = other35.togroupid;
  actionLinks = other35.actionLinks;
  poolid = other35.poolid;
  pageid = other35.pageid;
  extend = other35.extend;
  totalReaction = other35.totalReaction;
  totalComment = other35.totalComment;
  totalShare = other35.totalShare;
  originPostID = other35.originPostID;
  __isset = other35.__isset;
  return *this;
}
void TPostItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPostItem(";
  out << "idpost=" << to_string(idpost);
  out << ", " << "uid=" << to_string(uid);
  out << ", " << "content=" << to_string(content);
  out << ", " << "listMediaItems="; (__isset.listMediaItems ? (out << to_string(listMediaItems)) : (out << "<null>"));
  out << ", " << "idbackground="; (__isset.idbackground ? (out << to_string(idbackground)) : (out << "<null>"));
  out << ", " << "idfeeling="; (__isset.idfeeling ? (out << to_string(idfeeling)) : (out << "<null>"));
  out << ", " << "privacy=" << to_string(privacy);
  out << ", " << "friendsexcept="; (__isset.friendsexcept ? (out << to_string(friendsexcept)) : (out << "<null>"));
  out << ", " << "specificfriends="; (__isset.specificfriends ? (out << to_string(specificfriends)) : (out << "<null>"));
  out << ", " << "tagusers="; (__isset.tagusers ? (out << to_string(tagusers)) : (out << "<null>"));
  out << ", " << "locationId="; (__isset.locationId ? (out << to_string(locationId)) : (out << "<null>"));
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ", " << "pubkey=" << to_string(pubkey);
  out << ", " << "touid="; (__isset.touid ? (out << to_string(touid)) : (out << "<null>"));
  out << ", " << "togroupid="; (__isset.togroupid ? (out << to_string(togroupid)) : (out << "<null>"));
  out << ", " << "actionLinks="; (__isset.actionLinks ? (out << to_string(actionLinks)) : (out << "<null>"));
  out << ", " << "poolid="; (__isset.poolid ? (out << to_string(poolid)) : (out << "<null>"));
  out << ", " << "pageid="; (__isset.pageid ? (out << to_string(pageid)) : (out << "<null>"));
  out << ", " << "extend="; (__isset.extend ? (out << to_string(extend)) : (out << "<null>"));
  out << ", " << "totalReaction=" << to_string(totalReaction);
  out << ", " << "totalComment=" << to_string(totalComment);
  out << ", " << "totalShare=" << to_string(totalShare);
  out << ", " << "originPostID=" << to_string(originPostID);
  out << ")";
}


TDataResult::~TDataResult() throw() {
}


void TDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TDataResult::__set_data(const TPostItem& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->errorCode = (TErrorCode::type)ecast36;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataResult &a, TDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TDataResult::TDataResult(const TDataResult& other37) {
  errorCode = other37.errorCode;
  data = other37.data;
  __isset = other37.__isset;
}
TDataResult& TDataResult::operator=(const TDataResult& other38) {
  errorCode = other38.errorCode;
  data = other38.data;
  __isset = other38.__isset;
  return *this;
}
void TDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TListDataResult::~TListDataResult() throw() {
}


void TListDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TListDataResult::__set_listDatas(const std::vector<TPostItem> & val) {
  this->listDatas = val;
}
std::ostream& operator<<(std::ostream& out, const TListDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TListDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast39;
          xfer += iprot->readI32(ecast39);
          this->errorCode = (TErrorCode::type)ecast39;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listDatas.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            xfer += iprot->readListBegin(_etype43, _size40);
            this->listDatas.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->listDatas[_i44].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listDatas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TListDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TListDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("listDatas", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->listDatas.size()));
    std::vector<TPostItem> ::const_iterator _iter45;
    for (_iter45 = this->listDatas.begin(); _iter45 != this->listDatas.end(); ++_iter45)
    {
      xfer += (*_iter45).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TListDataResult &a, TListDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.listDatas, b.listDatas);
  swap(a.__isset, b.__isset);
}

TListDataResult::TListDataResult(const TListDataResult& other46) {
  errorCode = other46.errorCode;
  listDatas = other46.listDatas;
  __isset = other46.__isset;
}
TListDataResult& TListDataResult::operator=(const TListDataResult& other47) {
  errorCode = other47.errorCode;
  listDatas = other47.listDatas;
  __isset = other47.__isset;
  return *this;
}
void TListDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TListDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "listDatas=" << to_string(listDatas);
  out << ")";
}

}}} // namespace
