/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "tcommentstorage_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace OpenStars { namespace Common { namespace TCommentStorageService {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENotFound,
  TErrorCode::EUnknown,
  TErrorCode::EDataExisted
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENotFound",
  "EUnknown",
  "EDataExisted"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


ActionLink::~ActionLink() throw() {
}


void ActionLink::__set_text(const std::string& val) {
  this->text = val;
__isset.text = true;
}

void ActionLink::__set_href(const std::string& val) {
  this->href = val;
__isset.href = true;
}
std::ostream& operator<<(std::ostream& out, const ActionLink& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ActionLink::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          this->__isset.text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->href);
          this->__isset.href = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ActionLink::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ActionLink");

  if (this->__isset.text) {
    xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->text);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.href) {
    xfer += oprot->writeFieldBegin("href", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->href);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ActionLink &a, ActionLink &b) {
  using ::std::swap;
  swap(a.text, b.text);
  swap(a.href, b.href);
  swap(a.__isset, b.__isset);
}

ActionLink::ActionLink(const ActionLink& other0) {
  text = other0.text;
  href = other0.href;
  __isset = other0.__isset;
}
ActionLink& ActionLink::operator=(const ActionLink& other1) {
  text = other1.text;
  href = other1.href;
  __isset = other1.__isset;
  return *this;
}
void ActionLink::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ActionLink(";
  out << "text="; (__isset.text ? (out << to_string(text)) : (out << "<null>"));
  out << ", " << "href="; (__isset.href ? (out << to_string(href)) : (out << "<null>"));
  out << ")";
}


MediaItem::~MediaItem() throw() {
}


void MediaItem::__set_name(const std::string& val) {
  this->name = val;
}

void MediaItem::__set_mediaType(const int64_t val) {
  this->mediaType = val;
}

void MediaItem::__set_url(const std::string& val) {
  this->url = val;
}
std::ostream& operator<<(std::ostream& out, const MediaItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MediaItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mediaType);
          this->__isset.mediaType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MediaItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MediaItem");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mediaType", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->mediaType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MediaItem &a, MediaItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.mediaType, b.mediaType);
  swap(a.url, b.url);
  swap(a.__isset, b.__isset);
}

MediaItem::MediaItem(const MediaItem& other2) {
  name = other2.name;
  mediaType = other2.mediaType;
  url = other2.url;
  __isset = other2.__isset;
}
MediaItem& MediaItem::operator=(const MediaItem& other3) {
  name = other3.name;
  mediaType = other3.mediaType;
  url = other3.url;
  __isset = other3.__isset;
  return *this;
}
void MediaItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MediaItem(";
  out << "name=" << to_string(name);
  out << ", " << "mediaType=" << to_string(mediaType);
  out << ", " << "url=" << to_string(url);
  out << ")";
}


TCommentItem::~TCommentItem() throw() {
}


void TCommentItem::__set_idcomment(const TKey val) {
  this->idcomment = val;
}

void TCommentItem::__set_uid(const int64_t val) {
  this->uid = val;
}

void TCommentItem::__set_pubkey(const std::string& val) {
  this->pubkey = val;
}

void TCommentItem::__set_idpost(const int64_t val) {
  this->idpost = val;
}

void TCommentItem::__set_content(const std::string& val) {
  this->content = val;
}

void TCommentItem::__set_actionlinks(const std::vector<ActionLink> & val) {
  this->actionlinks = val;
__isset.actionlinks = true;
}

void TCommentItem::__set_mediaitem(const MediaItem& val) {
  this->mediaitem = val;
__isset.mediaitem = true;
}

void TCommentItem::__set_pubkeyTags(const std::vector<std::string> & val) {
  this->pubkeyTags = val;
__isset.pubkeyTags = true;
}

void TCommentItem::__set_uidTags(const std::vector<std::string> & val) {
  this->uidTags = val;
__isset.uidTags = true;
}

void TCommentItem::__set_timestamps(const int64_t val) {
  this->timestamps = val;
}

void TCommentItem::__set_parentcommentid(const int64_t val) {
  this->parentcommentid = val;
__isset.parentcommentid = true;
}
std::ostream& operator<<(std::ostream& out, const TCommentItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCommentItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->idcomment);
          this->__isset.idcomment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          this->__isset.uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pubkey);
          this->__isset.pubkey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->idpost);
          this->__isset.idpost = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actionlinks.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->actionlinks.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->actionlinks[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actionlinks = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mediaitem.read(iprot);
          this->__isset.mediaitem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->pubkeyTags.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->pubkeyTags.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += iprot->readString(this->pubkeyTags[_i13]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.pubkeyTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->uidTags.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->uidTags.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readString(this->uidTags[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.uidTags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamps);
          this->__isset.timestamps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->parentcommentid);
          this->__isset.parentcommentid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TCommentItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCommentItem");

  xfer += oprot->writeFieldBegin("idcomment", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->idcomment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pubkey", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pubkey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idpost", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->idpost);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.actionlinks) {
    xfer += oprot->writeFieldBegin("actionlinks", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->actionlinks.size()));
      std::vector<ActionLink> ::const_iterator _iter19;
      for (_iter19 = this->actionlinks.begin(); _iter19 != this->actionlinks.end(); ++_iter19)
      {
        xfer += (*_iter19).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mediaitem) {
    xfer += oprot->writeFieldBegin("mediaitem", ::apache::thrift::protocol::T_STRUCT, 7);
    xfer += this->mediaitem.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pubkeyTags) {
    xfer += oprot->writeFieldBegin("pubkeyTags", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->pubkeyTags.size()));
      std::vector<std::string> ::const_iterator _iter20;
      for (_iter20 = this->pubkeyTags.begin(); _iter20 != this->pubkeyTags.end(); ++_iter20)
      {
        xfer += oprot->writeString((*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uidTags) {
    xfer += oprot->writeFieldBegin("uidTags", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->uidTags.size()));
      std::vector<std::string> ::const_iterator _iter21;
      for (_iter21 = this->uidTags.begin(); _iter21 != this->uidTags.end(); ++_iter21)
      {
        xfer += oprot->writeString((*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timestamps", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->timestamps);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.parentcommentid) {
    xfer += oprot->writeFieldBegin("parentcommentid", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->parentcommentid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCommentItem &a, TCommentItem &b) {
  using ::std::swap;
  swap(a.idcomment, b.idcomment);
  swap(a.uid, b.uid);
  swap(a.pubkey, b.pubkey);
  swap(a.idpost, b.idpost);
  swap(a.content, b.content);
  swap(a.actionlinks, b.actionlinks);
  swap(a.mediaitem, b.mediaitem);
  swap(a.pubkeyTags, b.pubkeyTags);
  swap(a.uidTags, b.uidTags);
  swap(a.timestamps, b.timestamps);
  swap(a.parentcommentid, b.parentcommentid);
  swap(a.__isset, b.__isset);
}

TCommentItem::TCommentItem(const TCommentItem& other22) {
  idcomment = other22.idcomment;
  uid = other22.uid;
  pubkey = other22.pubkey;
  idpost = other22.idpost;
  content = other22.content;
  actionlinks = other22.actionlinks;
  mediaitem = other22.mediaitem;
  pubkeyTags = other22.pubkeyTags;
  uidTags = other22.uidTags;
  timestamps = other22.timestamps;
  parentcommentid = other22.parentcommentid;
  __isset = other22.__isset;
}
TCommentItem& TCommentItem::operator=(const TCommentItem& other23) {
  idcomment = other23.idcomment;
  uid = other23.uid;
  pubkey = other23.pubkey;
  idpost = other23.idpost;
  content = other23.content;
  actionlinks = other23.actionlinks;
  mediaitem = other23.mediaitem;
  pubkeyTags = other23.pubkeyTags;
  uidTags = other23.uidTags;
  timestamps = other23.timestamps;
  parentcommentid = other23.parentcommentid;
  __isset = other23.__isset;
  return *this;
}
void TCommentItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCommentItem(";
  out << "idcomment=" << to_string(idcomment);
  out << ", " << "uid=" << to_string(uid);
  out << ", " << "pubkey=" << to_string(pubkey);
  out << ", " << "idpost=" << to_string(idpost);
  out << ", " << "content=" << to_string(content);
  out << ", " << "actionlinks="; (__isset.actionlinks ? (out << to_string(actionlinks)) : (out << "<null>"));
  out << ", " << "mediaitem="; (__isset.mediaitem ? (out << to_string(mediaitem)) : (out << "<null>"));
  out << ", " << "pubkeyTags="; (__isset.pubkeyTags ? (out << to_string(pubkeyTags)) : (out << "<null>"));
  out << ", " << "uidTags="; (__isset.uidTags ? (out << to_string(uidTags)) : (out << "<null>"));
  out << ", " << "timestamps=" << to_string(timestamps);
  out << ", " << "parentcommentid="; (__isset.parentcommentid ? (out << to_string(parentcommentid)) : (out << "<null>"));
  out << ")";
}


TDataResult::~TDataResult() throw() {
}


void TDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TDataResult::__set_data(const TCommentItem& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->errorCode = (TErrorCode::type)ecast24;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataResult &a, TDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TDataResult::TDataResult(const TDataResult& other25) {
  errorCode = other25.errorCode;
  data = other25.data;
  __isset = other25.__isset;
}
TDataResult& TDataResult::operator=(const TDataResult& other26) {
  errorCode = other26.errorCode;
  data = other26.data;
  __isset = other26.__isset;
  return *this;
}
void TDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TListDataResult::~TListDataResult() throw() {
}


void TListDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TListDataResult::__set_listDatas(const std::vector<TCommentItem> & val) {
  this->listDatas = val;
}
std::ostream& operator<<(std::ostream& out, const TListDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TListDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          this->errorCode = (TErrorCode::type)ecast27;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listDatas.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->listDatas.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->listDatas[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listDatas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TListDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TListDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("listDatas", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->listDatas.size()));
    std::vector<TCommentItem> ::const_iterator _iter33;
    for (_iter33 = this->listDatas.begin(); _iter33 != this->listDatas.end(); ++_iter33)
    {
      xfer += (*_iter33).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TListDataResult &a, TListDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.listDatas, b.listDatas);
  swap(a.__isset, b.__isset);
}

TListDataResult::TListDataResult(const TListDataResult& other34) {
  errorCode = other34.errorCode;
  listDatas = other34.listDatas;
  __isset = other34.__isset;
}
TListDataResult& TListDataResult::operator=(const TListDataResult& other35) {
  errorCode = other35.errorCode;
  listDatas = other35.listDatas;
  __isset = other35.__isset;
  return *this;
}
void TListDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TListDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "listDatas=" << to_string(listDatas);
  out << ")";
}

}}} // namespace
