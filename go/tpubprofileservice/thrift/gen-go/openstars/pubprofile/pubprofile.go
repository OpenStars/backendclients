// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package pubprofile

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Pubkey
//  - DisplayName
//  - Dob
//  - Gender
//  - IntroText
//  - Avatar
//  - ImgBackground
//  - Phone
//  - Education
//  - Work
//  - Relationship
//  - Accommodation
//  - LinkFB
//  - LinkGGPlus
//  - LinkInstagram
//  - Extend
//  - Image
//  - LastModified
type ProfileData struct {
  Pubkey string `thrift:"pubkey,1" db:"pubkey" json:"pubkey"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  Dob int64 `thrift:"dob,3" db:"dob" json:"dob"`
  Gender int64 `thrift:"gender,4" db:"gender" json:"gender"`
  IntroText string `thrift:"introText,5" db:"introText" json:"introText"`
  Avatar string `thrift:"avatar,6" db:"avatar" json:"avatar"`
  ImgBackground string `thrift:"imgBackground,7" db:"imgBackground" json:"imgBackground"`
  Phone string `thrift:"phone,8" db:"phone" json:"phone"`
  Education string `thrift:"education,9" db:"education" json:"education"`
  Work string `thrift:"work,10" db:"work" json:"work"`
  Relationship int64 `thrift:"relationship,11" db:"relationship" json:"relationship"`
  Accommodation string `thrift:"accommodation,12" db:"accommodation" json:"accommodation"`
  LinkFB string `thrift:"linkFB,13" db:"linkFB" json:"linkFB"`
  LinkGGPlus string `thrift:"linkGGPlus,14" db:"linkGGPlus" json:"linkGGPlus"`
  LinkInstagram string `thrift:"linkInstagram,15" db:"linkInstagram" json:"linkInstagram"`
  Extend map[string]string `thrift:"extend,16" db:"extend" json:"extend"`
  Image []string `thrift:"image,17" db:"image" json:"image"`
  LastModified int64 `thrift:"lastModified,18" db:"lastModified" json:"lastModified"`
}

func NewProfileData() *ProfileData {
  return &ProfileData{}
}


func (p *ProfileData) GetPubkey() string {
  return p.Pubkey
}

func (p *ProfileData) GetDisplayName() string {
  return p.DisplayName
}

func (p *ProfileData) GetDob() int64 {
  return p.Dob
}

func (p *ProfileData) GetGender() int64 {
  return p.Gender
}

func (p *ProfileData) GetIntroText() string {
  return p.IntroText
}

func (p *ProfileData) GetAvatar() string {
  return p.Avatar
}

func (p *ProfileData) GetImgBackground() string {
  return p.ImgBackground
}

func (p *ProfileData) GetPhone() string {
  return p.Phone
}

func (p *ProfileData) GetEducation() string {
  return p.Education
}

func (p *ProfileData) GetWork() string {
  return p.Work
}

func (p *ProfileData) GetRelationship() int64 {
  return p.Relationship
}

func (p *ProfileData) GetAccommodation() string {
  return p.Accommodation
}

func (p *ProfileData) GetLinkFB() string {
  return p.LinkFB
}

func (p *ProfileData) GetLinkGGPlus() string {
  return p.LinkGGPlus
}

func (p *ProfileData) GetLinkInstagram() string {
  return p.LinkInstagram
}

func (p *ProfileData) GetExtend() map[string]string {
  return p.Extend
}

func (p *ProfileData) GetImage() []string {
  return p.Image
}

func (p *ProfileData) GetLastModified() int64 {
  return p.LastModified
}
func (p *ProfileData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProfileData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pubkey = v
}
  return nil
}

func (p *ProfileData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *ProfileData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Dob = v
}
  return nil
}

func (p *ProfileData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Gender = v
}
  return nil
}

func (p *ProfileData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IntroText = v
}
  return nil
}

func (p *ProfileData)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Avatar = v
}
  return nil
}

func (p *ProfileData)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ImgBackground = v
}
  return nil
}

func (p *ProfileData)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *ProfileData)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Education = v
}
  return nil
}

func (p *ProfileData)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Work = v
}
  return nil
}

func (p *ProfileData)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Relationship = v
}
  return nil
}

func (p *ProfileData)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Accommodation = v
}
  return nil
}

func (p *ProfileData)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.LinkFB = v
}
  return nil
}

func (p *ProfileData)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.LinkGGPlus = v
}
  return nil
}

func (p *ProfileData)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.LinkInstagram = v
}
  return nil
}

func (p *ProfileData)  ReadField16(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Extend =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Extend[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfileData)  ReadField17(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Image =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Image = append(p.Image, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProfileData)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.LastModified = v
}
  return nil
}

func (p *ProfileData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProfileData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfileData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubkey: ", p), err) }
  if err := oprot.WriteString(string(p.Pubkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubkey: ", p), err) }
  return err
}

func (p *ProfileData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *ProfileData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dob", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dob: ", p), err) }
  if err := oprot.WriteI64(int64(p.Dob)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dob (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dob: ", p), err) }
  return err
}

func (p *ProfileData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gender", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gender: ", p), err) }
  if err := oprot.WriteI64(int64(p.Gender)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gender (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gender: ", p), err) }
  return err
}

func (p *ProfileData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("introText", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:introText: ", p), err) }
  if err := oprot.WriteString(string(p.IntroText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.introText (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:introText: ", p), err) }
  return err
}

func (p *ProfileData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatar", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:avatar: ", p), err) }
  if err := oprot.WriteString(string(p.Avatar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avatar (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:avatar: ", p), err) }
  return err
}

func (p *ProfileData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imgBackground", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:imgBackground: ", p), err) }
  if err := oprot.WriteString(string(p.ImgBackground)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imgBackground (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:imgBackground: ", p), err) }
  return err
}

func (p *ProfileData) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:phone: ", p), err) }
  return err
}

func (p *ProfileData) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("education", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:education: ", p), err) }
  if err := oprot.WriteString(string(p.Education)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.education (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:education: ", p), err) }
  return err
}

func (p *ProfileData) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("work", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:work: ", p), err) }
  if err := oprot.WriteString(string(p.Work)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.work (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:work: ", p), err) }
  return err
}

func (p *ProfileData) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relationship", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:relationship: ", p), err) }
  if err := oprot.WriteI64(int64(p.Relationship)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relationship (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:relationship: ", p), err) }
  return err
}

func (p *ProfileData) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accommodation", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:accommodation: ", p), err) }
  if err := oprot.WriteString(string(p.Accommodation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accommodation (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:accommodation: ", p), err) }
  return err
}

func (p *ProfileData) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkFB", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:linkFB: ", p), err) }
  if err := oprot.WriteString(string(p.LinkFB)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkFB (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:linkFB: ", p), err) }
  return err
}

func (p *ProfileData) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkGGPlus", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:linkGGPlus: ", p), err) }
  if err := oprot.WriteString(string(p.LinkGGPlus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkGGPlus (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:linkGGPlus: ", p), err) }
  return err
}

func (p *ProfileData) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("linkInstagram", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:linkInstagram: ", p), err) }
  if err := oprot.WriteString(string(p.LinkInstagram)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.linkInstagram (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:linkInstagram: ", p), err) }
  return err
}

func (p *ProfileData) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extend", thrift.MAP, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:extend: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Extend)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Extend {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:extend: ", p), err) }
  return err
}

func (p *ProfileData) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.LIST, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:image: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Image)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Image {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:image: ", p), err) }
  return err
}

func (p *ProfileData) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastModified", thrift.I64, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:lastModified: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastModified)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastModified (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:lastModified: ", p), err) }
  return err
}

func (p *ProfileData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProfileData(%+v)", *p)
}

type PubProfileService interface {
  // Parameters:
  //  - Pubkey
  GetProfileByPubkey(ctx context.Context, pubkey string) (r *ProfileData, err error)
  // Parameters:
  //  - UID
  GetProfileByUID(ctx context.Context, uid int64) (r *ProfileData, err error)
}

type PubProfileServiceClient struct {
  c thrift.TClient
}

func NewPubProfileServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PubProfileServiceClient {
  return &PubProfileServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPubProfileServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PubProfileServiceClient {
  return &PubProfileServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPubProfileServiceClient(c thrift.TClient) *PubProfileServiceClient {
  return &PubProfileServiceClient{
    c: c,
  }
}

func (p *PubProfileServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Pubkey
func (p *PubProfileServiceClient) GetProfileByPubkey(ctx context.Context, pubkey string) (r *ProfileData, err error) {
  var _args3 PubProfileServiceGetProfileByPubkeyArgs
  _args3.Pubkey = pubkey
  var _result4 PubProfileServiceGetProfileByPubkeyResult
  if err = p.Client_().Call(ctx, "GetProfileByPubkey", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - UID
func (p *PubProfileServiceClient) GetProfileByUID(ctx context.Context, uid int64) (r *ProfileData, err error) {
  var _args5 PubProfileServiceGetProfileByUIDArgs
  _args5.UID = uid
  var _result6 PubProfileServiceGetProfileByUIDResult
  if err = p.Client_().Call(ctx, "GetProfileByUID", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

type PubProfileServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PubProfileService
}

func (p *PubProfileServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PubProfileServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PubProfileServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPubProfileServiceProcessor(handler PubProfileService) *PubProfileServiceProcessor {

  self7 := &PubProfileServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self7.processorMap["GetProfileByPubkey"] = &pubProfileServiceProcessorGetProfileByPubkey{handler:handler}
  self7.processorMap["GetProfileByUID"] = &pubProfileServiceProcessorGetProfileByUID{handler:handler}
return self7
}

func (p *PubProfileServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x8.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x8

}

type pubProfileServiceProcessorGetProfileByPubkey struct {
  handler PubProfileService
}

func (p *pubProfileServiceProcessorGetProfileByPubkey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PubProfileServiceGetProfileByPubkeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetProfileByPubkey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PubProfileServiceGetProfileByPubkeyResult{}
var retval *ProfileData
  var err2 error
  if retval, err2 = p.handler.GetProfileByPubkey(ctx, args.Pubkey); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfileByPubkey: " + err2.Error())
    oprot.WriteMessageBegin("GetProfileByPubkey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetProfileByPubkey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type pubProfileServiceProcessorGetProfileByUID struct {
  handler PubProfileService
}

func (p *pubProfileServiceProcessorGetProfileByUID) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PubProfileServiceGetProfileByUIDArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("GetProfileByUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PubProfileServiceGetProfileByUIDResult{}
var retval *ProfileData
  var err2 error
  if retval, err2 = p.handler.GetProfileByUID(ctx, args.UID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfileByUID: " + err2.Error())
    oprot.WriteMessageBegin("GetProfileByUID", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("GetProfileByUID", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Pubkey
type PubProfileServiceGetProfileByPubkeyArgs struct {
  Pubkey string `thrift:"pubkey,1" db:"pubkey" json:"pubkey"`
}

func NewPubProfileServiceGetProfileByPubkeyArgs() *PubProfileServiceGetProfileByPubkeyArgs {
  return &PubProfileServiceGetProfileByPubkeyArgs{}
}


func (p *PubProfileServiceGetProfileByPubkeyArgs) GetPubkey() string {
  return p.Pubkey
}
func (p *PubProfileServiceGetProfileByPubkeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PubProfileServiceGetProfileByPubkeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Pubkey = v
}
  return nil
}

func (p *PubProfileServiceGetProfileByPubkeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProfileByPubkey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PubProfileServiceGetProfileByPubkeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pubkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pubkey: ", p), err) }
  if err := oprot.WriteString(string(p.Pubkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pubkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pubkey: ", p), err) }
  return err
}

func (p *PubProfileServiceGetProfileByPubkeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PubProfileServiceGetProfileByPubkeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PubProfileServiceGetProfileByPubkeyResult struct {
  Success *ProfileData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPubProfileServiceGetProfileByPubkeyResult() *PubProfileServiceGetProfileByPubkeyResult {
  return &PubProfileServiceGetProfileByPubkeyResult{}
}

var PubProfileServiceGetProfileByPubkeyResult_Success_DEFAULT *ProfileData
func (p *PubProfileServiceGetProfileByPubkeyResult) GetSuccess() *ProfileData {
  if !p.IsSetSuccess() {
    return PubProfileServiceGetProfileByPubkeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *PubProfileServiceGetProfileByPubkeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PubProfileServiceGetProfileByPubkeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PubProfileServiceGetProfileByPubkeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ProfileData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PubProfileServiceGetProfileByPubkeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProfileByPubkey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PubProfileServiceGetProfileByPubkeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PubProfileServiceGetProfileByPubkeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PubProfileServiceGetProfileByPubkeyResult(%+v)", *p)
}

// Attributes:
//  - UID
type PubProfileServiceGetProfileByUIDArgs struct {
  UID int64 `thrift:"uid,1" db:"uid" json:"uid"`
}

func NewPubProfileServiceGetProfileByUIDArgs() *PubProfileServiceGetProfileByUIDArgs {
  return &PubProfileServiceGetProfileByUIDArgs{}
}


func (p *PubProfileServiceGetProfileByUIDArgs) GetUID() int64 {
  return p.UID
}
func (p *PubProfileServiceGetProfileByUIDArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PubProfileServiceGetProfileByUIDArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *PubProfileServiceGetProfileByUIDArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProfileByUID_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PubProfileServiceGetProfileByUIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uid", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uid: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uid: ", p), err) }
  return err
}

func (p *PubProfileServiceGetProfileByUIDArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PubProfileServiceGetProfileByUIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PubProfileServiceGetProfileByUIDResult struct {
  Success *ProfileData `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPubProfileServiceGetProfileByUIDResult() *PubProfileServiceGetProfileByUIDResult {
  return &PubProfileServiceGetProfileByUIDResult{}
}

var PubProfileServiceGetProfileByUIDResult_Success_DEFAULT *ProfileData
func (p *PubProfileServiceGetProfileByUIDResult) GetSuccess() *ProfileData {
  if !p.IsSetSuccess() {
    return PubProfileServiceGetProfileByUIDResult_Success_DEFAULT
  }
return p.Success
}
func (p *PubProfileServiceGetProfileByUIDResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PubProfileServiceGetProfileByUIDResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PubProfileServiceGetProfileByUIDResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ProfileData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PubProfileServiceGetProfileByUIDResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetProfileByUID_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PubProfileServiceGetProfileByUIDResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PubProfileServiceGetProfileByUIDResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PubProfileServiceGetProfileByUIDResult(%+v)", *p)
}


