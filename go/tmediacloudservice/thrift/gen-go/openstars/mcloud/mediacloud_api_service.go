// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package mcloud

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TMediaService interface {
  Ping(ctx context.Context) (err error)
  // Parameters:
  //  - AppId
  //  - AppKey
  //  - Option
  Process(ctx context.Context, appId string, appKey string, option *TMCProcessOption) (r *TMCProcessResult_, err error)
  // Parameters:
  //  - AppId
  //  - AppKey
  //  - MediaId
  GetMediaInfo(ctx context.Context, appId string, appKey string, mediaId string) (r *TMCMediaInfoResult_, err error)
}

type TMediaServiceClient struct {
  c thrift.TClient
}

func NewTMediaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TMediaServiceClient {
  return &TMediaServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTMediaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TMediaServiceClient {
  return &TMediaServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTMediaServiceClient(c thrift.TClient) *TMediaServiceClient {
  return &TMediaServiceClient{
    c: c,
  }
}

func (p *TMediaServiceClient) Client_() thrift.TClient {
  return p.c
}
func (p *TMediaServiceClient) Ping(ctx context.Context) (err error) {
  var _args0 TMediaServicePingArgs
  var _result1 TMediaServicePingResult
  if err = p.Client_().Call(ctx, "ping", &_args0, &_result1); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - AppId
//  - AppKey
//  - Option
func (p *TMediaServiceClient) Process(ctx context.Context, appId string, appKey string, option *TMCProcessOption) (r *TMCProcessResult_, err error) {
  var _args2 TMediaServiceProcessArgs
  _args2.AppId = appId
  _args2.AppKey = appKey
  _args2.Option = option
  var _result3 TMediaServiceProcessResult
  if err = p.Client_().Call(ctx, "process", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - AppId
//  - AppKey
//  - MediaId
func (p *TMediaServiceClient) GetMediaInfo(ctx context.Context, appId string, appKey string, mediaId string) (r *TMCMediaInfoResult_, err error) {
  var _args4 TMediaServiceGetMediaInfoArgs
  _args4.AppId = appId
  _args4.AppKey = appKey
  _args4.MediaId = mediaId
  var _result5 TMediaServiceGetMediaInfoResult
  if err = p.Client_().Call(ctx, "getMediaInfo", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

type TMediaServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TMediaService
}

func (p *TMediaServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TMediaServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TMediaServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTMediaServiceProcessor(handler TMediaService) *TMediaServiceProcessor {

  self6 := &TMediaServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["ping"] = &tMediaServiceProcessorPing{handler:handler}
  self6.processorMap["process"] = &tMediaServiceProcessorProcess{handler:handler}
  self6.processorMap["getMediaInfo"] = &tMediaServiceProcessorGetMediaInfo{handler:handler}
return self6
}

func (p *TMediaServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x7

}

type tMediaServiceProcessorPing struct {
  handler TMediaService
}

func (p *tMediaServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TMediaServicePingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TMediaServicePingResult{}
  var err2 error
  if err2 = p.handler.Ping(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tMediaServiceProcessorProcess struct {
  handler TMediaService
}

func (p *tMediaServiceProcessorProcess) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TMediaServiceProcessArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("process", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TMediaServiceProcessResult{}
var retval *TMCProcessResult_
  var err2 error
  if retval, err2 = p.handler.Process(ctx, args.AppId, args.AppKey, args.Option); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing process: " + err2.Error())
    oprot.WriteMessageBegin("process", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("process", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tMediaServiceProcessorGetMediaInfo struct {
  handler TMediaService
}

func (p *tMediaServiceProcessorGetMediaInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TMediaServiceGetMediaInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMediaInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TMediaServiceGetMediaInfoResult{}
var retval *TMCMediaInfoResult_
  var err2 error
  if retval, err2 = p.handler.GetMediaInfo(ctx, args.AppId, args.AppKey, args.MediaId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMediaInfo: " + err2.Error())
    oprot.WriteMessageBegin("getMediaInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMediaInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type TMediaServicePingArgs struct {
}

func NewTMediaServicePingArgs() *TMediaServicePingArgs {
  return &TMediaServicePingArgs{}
}

func (p *TMediaServicePingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMediaServicePingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMediaServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMediaServicePingArgs(%+v)", *p)
}

type TMediaServicePingResult struct {
}

func NewTMediaServicePingResult() *TMediaServicePingResult {
  return &TMediaServicePingResult{}
}

func (p *TMediaServicePingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMediaServicePingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMediaServicePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMediaServicePingResult(%+v)", *p)
}

// Attributes:
//  - AppId
//  - AppKey
//  - Option
type TMediaServiceProcessArgs struct {
  AppId string `thrift:"appId,1" db:"appId" json:"appId"`
  AppKey string `thrift:"appKey,2" db:"appKey" json:"appKey"`
  Option *TMCProcessOption `thrift:"option,3" db:"option" json:"option"`
}

func NewTMediaServiceProcessArgs() *TMediaServiceProcessArgs {
  return &TMediaServiceProcessArgs{}
}


func (p *TMediaServiceProcessArgs) GetAppId() string {
  return p.AppId
}

func (p *TMediaServiceProcessArgs) GetAppKey() string {
  return p.AppKey
}
var TMediaServiceProcessArgs_Option_DEFAULT *TMCProcessOption
func (p *TMediaServiceProcessArgs) GetOption() *TMCProcessOption {
  if !p.IsSetOption() {
    return TMediaServiceProcessArgs_Option_DEFAULT
  }
return p.Option
}
func (p *TMediaServiceProcessArgs) IsSetOption() bool {
  return p.Option != nil
}

func (p *TMediaServiceProcessArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMediaServiceProcessArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TMediaServiceProcessArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TMediaServiceProcessArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Option = &TMCProcessOption{}
  if err := p.Option.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option), err)
  }
  return nil
}

func (p *TMediaServiceProcessArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("process_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMediaServiceProcessArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err) }
  return err
}

func (p *TMediaServiceProcessArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appKey: ", p), err) }
  if err := oprot.WriteString(string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appKey: ", p), err) }
  return err
}

func (p *TMediaServiceProcessArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("option", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:option: ", p), err) }
  if err := p.Option.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:option: ", p), err) }
  return err
}

func (p *TMediaServiceProcessArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMediaServiceProcessArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMediaServiceProcessResult struct {
  Success *TMCProcessResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMediaServiceProcessResult() *TMediaServiceProcessResult {
  return &TMediaServiceProcessResult{}
}

var TMediaServiceProcessResult_Success_DEFAULT *TMCProcessResult_
func (p *TMediaServiceProcessResult) GetSuccess() *TMCProcessResult_ {
  if !p.IsSetSuccess() {
    return TMediaServiceProcessResult_Success_DEFAULT
  }
return p.Success
}
func (p *TMediaServiceProcessResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TMediaServiceProcessResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMediaServiceProcessResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMCProcessResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TMediaServiceProcessResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("process_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMediaServiceProcessResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TMediaServiceProcessResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMediaServiceProcessResult(%+v)", *p)
}

// Attributes:
//  - AppId
//  - AppKey
//  - MediaId
type TMediaServiceGetMediaInfoArgs struct {
  AppId string `thrift:"appId,1" db:"appId" json:"appId"`
  AppKey string `thrift:"appKey,2" db:"appKey" json:"appKey"`
  MediaId string `thrift:"mediaId,3" db:"mediaId" json:"mediaId"`
}

func NewTMediaServiceGetMediaInfoArgs() *TMediaServiceGetMediaInfoArgs {
  return &TMediaServiceGetMediaInfoArgs{}
}


func (p *TMediaServiceGetMediaInfoArgs) GetAppId() string {
  return p.AppId
}

func (p *TMediaServiceGetMediaInfoArgs) GetAppKey() string {
  return p.AppKey
}

func (p *TMediaServiceGetMediaInfoArgs) GetMediaId() string {
  return p.MediaId
}
func (p *TMediaServiceGetMediaInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMediaServiceGetMediaInfoArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TMediaServiceGetMediaInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TMediaServiceGetMediaInfoArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MediaId = v
}
  return nil
}

func (p *TMediaServiceGetMediaInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMediaInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMediaServiceGetMediaInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err) }
  if err := oprot.WriteString(string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err) }
  return err
}

func (p *TMediaServiceGetMediaInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appKey: ", p), err) }
  if err := oprot.WriteString(string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appKey: ", p), err) }
  return err
}

func (p *TMediaServiceGetMediaInfoArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mediaId: ", p), err) }
  if err := oprot.WriteString(string(p.MediaId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mediaId: ", p), err) }
  return err
}

func (p *TMediaServiceGetMediaInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMediaServiceGetMediaInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TMediaServiceGetMediaInfoResult struct {
  Success *TMCMediaInfoResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTMediaServiceGetMediaInfoResult() *TMediaServiceGetMediaInfoResult {
  return &TMediaServiceGetMediaInfoResult{}
}

var TMediaServiceGetMediaInfoResult_Success_DEFAULT *TMCMediaInfoResult_
func (p *TMediaServiceGetMediaInfoResult) GetSuccess() *TMCMediaInfoResult_ {
  if !p.IsSetSuccess() {
    return TMediaServiceGetMediaInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *TMediaServiceGetMediaInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TMediaServiceGetMediaInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMediaServiceGetMediaInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMCMediaInfoResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TMediaServiceGetMediaInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMediaInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMediaServiceGetMediaInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TMediaServiceGetMediaInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMediaServiceGetMediaInfoResult(%+v)", *p)
}


