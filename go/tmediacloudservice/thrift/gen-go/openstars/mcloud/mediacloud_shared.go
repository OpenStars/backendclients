// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package mcloud

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"reflect"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TMCVideoFormat int64

const (
	TMCVideoFormat_MP4_H264        TMCVideoFormat = 2
	TMCVideoFormat_WEBM_VP8        TMCVideoFormat = 5
	TMCVideoFormat_HLS             TMCVideoFormat = 8
	TMCVideoFormat_WEBM_VP9        TMCVideoFormat = 9
	TMCVideoFormat_MP4_H265        TMCVideoFormat = 10
	TMCVideoFormat_DASH_VP9        TMCVideoFormat = 11
	TMCVideoFormat_HLS_V2          TMCVideoFormat = 13
	TMCVideoFormat_HLS_WRAP_MP4    TMCVideoFormat = 14
	TMCVideoFormat_DASH_H265       TMCVideoFormat = 15
	TMCVideoFormat_HLS_H265        TMCVideoFormat = 16
	TMCVideoFormat_HLS_WRAP_MP4_SC TMCVideoFormat = 17
)

func (p TMCVideoFormat) String() string {
	switch p {
	case TMCVideoFormat_MP4_H264:
		return "MP4_H264"
	case TMCVideoFormat_WEBM_VP8:
		return "WEBM_VP8"
	case TMCVideoFormat_HLS:
		return "HLS"
	case TMCVideoFormat_WEBM_VP9:
		return "WEBM_VP9"
	case TMCVideoFormat_MP4_H265:
		return "MP4_H265"
	case TMCVideoFormat_DASH_VP9:
		return "DASH_VP9"
	case TMCVideoFormat_HLS_V2:
		return "HLS_V2"
	case TMCVideoFormat_HLS_WRAP_MP4:
		return "HLS_WRAP_MP4"
	case TMCVideoFormat_DASH_H265:
		return "DASH_H265"
	case TMCVideoFormat_HLS_H265:
		return "HLS_H265"
	case TMCVideoFormat_HLS_WRAP_MP4_SC:
		return "HLS_WRAP_MP4_SC"
	}
	return "<UNSET>"
}

func TMCVideoFormatFromString(s string) (TMCVideoFormat, error) {
	switch s {
	case "MP4_H264":
		return TMCVideoFormat_MP4_H264, nil
	case "WEBM_VP8":
		return TMCVideoFormat_WEBM_VP8, nil
	case "HLS":
		return TMCVideoFormat_HLS, nil
	case "WEBM_VP9":
		return TMCVideoFormat_WEBM_VP9, nil
	case "MP4_H265":
		return TMCVideoFormat_MP4_H265, nil
	case "DASH_VP9":
		return TMCVideoFormat_DASH_VP9, nil
	case "HLS_V2":
		return TMCVideoFormat_HLS_V2, nil
	case "HLS_WRAP_MP4":
		return TMCVideoFormat_HLS_WRAP_MP4, nil
	case "DASH_H265":
		return TMCVideoFormat_DASH_H265, nil
	case "HLS_H265":
		return TMCVideoFormat_HLS_H265, nil
	case "HLS_WRAP_MP4_SC":
		return TMCVideoFormat_HLS_WRAP_MP4_SC, nil
	}
	return TMCVideoFormat(0), fmt.Errorf("not a valid TMCVideoFormat string")
}

func TMCVideoFormatPtr(v TMCVideoFormat) *TMCVideoFormat { return &v }

func (p TMCVideoFormat) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMCVideoFormat) UnmarshalText(text []byte) error {
	q, err := TMCVideoFormatFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TMCVideoFormat) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TMCVideoFormat(v)
	return nil
}

func (p *TMCVideoFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMCVideoQuality int64

const (
	TMCVideoQuality_QUALITY_UNKNOWN TMCVideoQuality = 0
	TMCVideoQuality_QUALITY_240P    TMCVideoQuality = 1
	TMCVideoQuality_QUALITY_360P    TMCVideoQuality = 2
	TMCVideoQuality_QUALITY_480P    TMCVideoQuality = 3
	TMCVideoQuality_QUALITY_720P    TMCVideoQuality = 4
	TMCVideoQuality_QUALITY_1080P   TMCVideoQuality = 5
	TMCVideoQuality_QUALITY_1440P   TMCVideoQuality = 6
	TMCVideoQuality_QUALITY_2160P   TMCVideoQuality = 7
	TMCVideoQuality_QUALITY_144P    TMCVideoQuality = 8
)

func (p TMCVideoQuality) String() string {
	switch p {
	case TMCVideoQuality_QUALITY_UNKNOWN:
		return "QUALITY_UNKNOWN"
	case TMCVideoQuality_QUALITY_240P:
		return "QUALITY_240P"
	case TMCVideoQuality_QUALITY_360P:
		return "QUALITY_360P"
	case TMCVideoQuality_QUALITY_480P:
		return "QUALITY_480P"
	case TMCVideoQuality_QUALITY_720P:
		return "QUALITY_720P"
	case TMCVideoQuality_QUALITY_1080P:
		return "QUALITY_1080P"
	case TMCVideoQuality_QUALITY_1440P:
		return "QUALITY_1440P"
	case TMCVideoQuality_QUALITY_2160P:
		return "QUALITY_2160P"
	case TMCVideoQuality_QUALITY_144P:
		return "QUALITY_144P"
	}
	return "<UNSET>"
}

func TMCVideoQualityFromString(s string) (TMCVideoQuality, error) {
	switch s {
	case "QUALITY_UNKNOWN":
		return TMCVideoQuality_QUALITY_UNKNOWN, nil
	case "QUALITY_240P":
		return TMCVideoQuality_QUALITY_240P, nil
	case "QUALITY_360P":
		return TMCVideoQuality_QUALITY_360P, nil
	case "QUALITY_480P":
		return TMCVideoQuality_QUALITY_480P, nil
	case "QUALITY_720P":
		return TMCVideoQuality_QUALITY_720P, nil
	case "QUALITY_1080P":
		return TMCVideoQuality_QUALITY_1080P, nil
	case "QUALITY_1440P":
		return TMCVideoQuality_QUALITY_1440P, nil
	case "QUALITY_2160P":
		return TMCVideoQuality_QUALITY_2160P, nil
	case "QUALITY_144P":
		return TMCVideoQuality_QUALITY_144P, nil
	}
	return TMCVideoQuality(0), fmt.Errorf("not a valid TMCVideoQuality string")
}

func TMCVideoQualityPtr(v TMCVideoQuality) *TMCVideoQuality { return &v }

func (p TMCVideoQuality) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMCVideoQuality) UnmarshalText(text []byte) error {
	q, err := TMCVideoQualityFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TMCVideoQuality) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TMCVideoQuality(v)
	return nil
}

func (p *TMCVideoQuality) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMCImageQuality int64

const (
	TMCImageQuality_QUALITY_UNKNOWN TMCImageQuality = 0
	TMCImageQuality_QUALITY_240P    TMCImageQuality = 1
	TMCImageQuality_QUALITY_360P    TMCImageQuality = 2
	TMCImageQuality_QUALITY_480P    TMCImageQuality = 3
	TMCImageQuality_QUALITY_720P    TMCImageQuality = 4
	TMCImageQuality_QUALITY_144P    TMCImageQuality = 8
)

func (p TMCImageQuality) String() string {
	switch p {
	case TMCImageQuality_QUALITY_UNKNOWN:
		return "QUALITY_UNKNOWN"
	case TMCImageQuality_QUALITY_240P:
		return "QUALITY_240P"
	case TMCImageQuality_QUALITY_360P:
		return "QUALITY_360P"
	case TMCImageQuality_QUALITY_480P:
		return "QUALITY_480P"
	case TMCImageQuality_QUALITY_720P:
		return "QUALITY_720P"
	case TMCImageQuality_QUALITY_144P:
		return "QUALITY_144P"
	}
	return "<UNSET>"
}

func TMCImageQualityFromString(s string) (TMCImageQuality, error) {
	switch s {
	case "QUALITY_UNKNOWN":
		return TMCImageQuality_QUALITY_UNKNOWN, nil
	case "QUALITY_240P":
		return TMCImageQuality_QUALITY_240P, nil
	case "QUALITY_360P":
		return TMCImageQuality_QUALITY_360P, nil
	case "QUALITY_480P":
		return TMCImageQuality_QUALITY_480P, nil
	case "QUALITY_720P":
		return TMCImageQuality_QUALITY_720P, nil
	case "QUALITY_144P":
		return TMCImageQuality_QUALITY_144P, nil
	}
	return TMCImageQuality(0), fmt.Errorf("not a valid TMCImageQuality string")
}

func TMCImageQualityPtr(v TMCImageQuality) *TMCImageQuality { return &v }

func (p TMCImageQuality) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMCImageQuality) UnmarshalText(text []byte) error {
	q, err := TMCImageQualityFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TMCImageQuality) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TMCImageQuality(v)
	return nil
}

func (p *TMCImageQuality) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMCGifQuality int64

const (
	TMCGifQuality_QUALITY_UNKNOWN TMCGifQuality = 0
	TMCGifQuality_QUALITY_240P    TMCGifQuality = 1
	TMCGifQuality_QUALITY_360P    TMCGifQuality = 2
	TMCGifQuality_QUALITY_480P    TMCGifQuality = 3
	TMCGifQuality_QUALITY_720P    TMCGifQuality = 4
	TMCGifQuality_QUALITY_144P    TMCGifQuality = 8
)

func (p TMCGifQuality) String() string {
	switch p {
	case TMCGifQuality_QUALITY_UNKNOWN:
		return "QUALITY_UNKNOWN"
	case TMCGifQuality_QUALITY_240P:
		return "QUALITY_240P"
	case TMCGifQuality_QUALITY_360P:
		return "QUALITY_360P"
	case TMCGifQuality_QUALITY_480P:
		return "QUALITY_480P"
	case TMCGifQuality_QUALITY_720P:
		return "QUALITY_720P"
	case TMCGifQuality_QUALITY_144P:
		return "QUALITY_144P"
	}
	return "<UNSET>"
}

func TMCGifQualityFromString(s string) (TMCGifQuality, error) {
	switch s {
	case "QUALITY_UNKNOWN":
		return TMCGifQuality_QUALITY_UNKNOWN, nil
	case "QUALITY_240P":
		return TMCGifQuality_QUALITY_240P, nil
	case "QUALITY_360P":
		return TMCGifQuality_QUALITY_360P, nil
	case "QUALITY_480P":
		return TMCGifQuality_QUALITY_480P, nil
	case "QUALITY_720P":
		return TMCGifQuality_QUALITY_720P, nil
	case "QUALITY_144P":
		return TMCGifQuality_QUALITY_144P, nil
	}
	return TMCGifQuality(0), fmt.Errorf("not a valid TMCGifQuality string")
}

func TMCGifQualityPtr(v TMCGifQuality) *TMCGifQuality { return &v }

func (p TMCGifQuality) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMCGifQuality) UnmarshalText(text []byte) error {
	q, err := TMCGifQualityFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TMCGifQuality) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TMCGifQuality(v)
	return nil
}

func (p *TMCGifQuality) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMCAudioQuality int64

const (
	TMCAudioQuality_QUALITY_UNKNOWN  TMCAudioQuality = 0
	TMCAudioQuality_QUALITY_32K      TMCAudioQuality = 1
	TMCAudioQuality_QUALITY_64K      TMCAudioQuality = 2
	TMCAudioQuality_QUALITY_96K      TMCAudioQuality = 3
	TMCAudioQuality_QUALITY_128K     TMCAudioQuality = 4
	TMCAudioQuality_QUALITY_256K     TMCAudioQuality = 5
	TMCAudioQuality_QUALITY_320K     TMCAudioQuality = 6
	TMCAudioQuality_QUALITY_500K     TMCAudioQuality = 7
	TMCAudioQuality_QUALITY_LOSSLESS TMCAudioQuality = 8
)

func (p TMCAudioQuality) String() string {
	switch p {
	case TMCAudioQuality_QUALITY_UNKNOWN:
		return "QUALITY_UNKNOWN"
	case TMCAudioQuality_QUALITY_32K:
		return "QUALITY_32K"
	case TMCAudioQuality_QUALITY_64K:
		return "QUALITY_64K"
	case TMCAudioQuality_QUALITY_96K:
		return "QUALITY_96K"
	case TMCAudioQuality_QUALITY_128K:
		return "QUALITY_128K"
	case TMCAudioQuality_QUALITY_256K:
		return "QUALITY_256K"
	case TMCAudioQuality_QUALITY_320K:
		return "QUALITY_320K"
	case TMCAudioQuality_QUALITY_500K:
		return "QUALITY_500K"
	case TMCAudioQuality_QUALITY_LOSSLESS:
		return "QUALITY_LOSSLESS"
	}
	return "<UNSET>"
}

func TMCAudioQualityFromString(s string) (TMCAudioQuality, error) {
	switch s {
	case "QUALITY_UNKNOWN":
		return TMCAudioQuality_QUALITY_UNKNOWN, nil
	case "QUALITY_32K":
		return TMCAudioQuality_QUALITY_32K, nil
	case "QUALITY_64K":
		return TMCAudioQuality_QUALITY_64K, nil
	case "QUALITY_96K":
		return TMCAudioQuality_QUALITY_96K, nil
	case "QUALITY_128K":
		return TMCAudioQuality_QUALITY_128K, nil
	case "QUALITY_256K":
		return TMCAudioQuality_QUALITY_256K, nil
	case "QUALITY_320K":
		return TMCAudioQuality_QUALITY_320K, nil
	case "QUALITY_500K":
		return TMCAudioQuality_QUALITY_500K, nil
	case "QUALITY_LOSSLESS":
		return TMCAudioQuality_QUALITY_LOSSLESS, nil
	}
	return TMCAudioQuality(0), fmt.Errorf("not a valid TMCAudioQuality string")
}

func TMCAudioQualityPtr(v TMCAudioQuality) *TMCAudioQuality { return &v }

func (p TMCAudioQuality) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMCAudioQuality) UnmarshalText(text []byte) error {
	q, err := TMCAudioQualityFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TMCAudioQuality) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TMCAudioQuality(v)
	return nil
}

func (p *TMCAudioQuality) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMCMediaStatus int64

const (
	TMCMediaStatus_QUEUING                TMCMediaStatus = 0
	TMCMediaStatus_PROCESSING             TMCMediaStatus = 1
	TMCMediaStatus_DONE                   TMCMediaStatus = 2
	TMCMediaStatus_DONE_WITH_ERROR        TMCMediaStatus = 3
	TMCMediaStatus_DOWNLOADING            TMCMediaStatus = 4
	TMCMediaStatus_INPUT_FILE_INVALID     TMCMediaStatus = 100
	TMCMediaStatus_ID_ZEN_ERROR           TMCMediaStatus = 101
	TMCMediaStatus_PROCESS_ERROR          TMCMediaStatus = 102
	TMCMediaStatus_DATABASE_ERROR         TMCMediaStatus = 103
	TMCMediaStatus_UNSUPPORTED_FORMAT     TMCMediaStatus = 104
	TMCMediaStatus_UNSUPPORTED_QUALITY    TMCMediaStatus = 105
	TMCMediaStatus_QLT_HIGHER_THAN_ORIGIN TMCMediaStatus = 106
	TMCMediaStatus_DOWNLOAD_INTERNAL_FAIL TMCMediaStatus = 107
	TMCMediaStatus_DOWNLOAD_EXTERNAL_FAIL TMCMediaStatus = 108
	TMCMediaStatus_NETWORK_ERROR          TMCMediaStatus = 109
	TMCMediaStatus_DELETED                TMCMediaStatus = 110
	TMCMediaStatus_INPUT_QLT_LOW          TMCMediaStatus = 111
)

func (p TMCMediaStatus) String() string {
	switch p {
	case TMCMediaStatus_QUEUING:
		return "QUEUING"
	case TMCMediaStatus_PROCESSING:
		return "PROCESSING"
	case TMCMediaStatus_DONE:
		return "DONE"
	case TMCMediaStatus_DONE_WITH_ERROR:
		return "DONE_WITH_ERROR"
	case TMCMediaStatus_DOWNLOADING:
		return "DOWNLOADING"
	case TMCMediaStatus_INPUT_FILE_INVALID:
		return "INPUT_FILE_INVALID"
	case TMCMediaStatus_ID_ZEN_ERROR:
		return "ID_ZEN_ERROR"
	case TMCMediaStatus_PROCESS_ERROR:
		return "PROCESS_ERROR"
	case TMCMediaStatus_DATABASE_ERROR:
		return "DATABASE_ERROR"
	case TMCMediaStatus_UNSUPPORTED_FORMAT:
		return "UNSUPPORTED_FORMAT"
	case TMCMediaStatus_UNSUPPORTED_QUALITY:
		return "UNSUPPORTED_QUALITY"
	case TMCMediaStatus_QLT_HIGHER_THAN_ORIGIN:
		return "QLT_HIGHER_THAN_ORIGIN"
	case TMCMediaStatus_DOWNLOAD_INTERNAL_FAIL:
		return "DOWNLOAD_INTERNAL_FAIL"
	case TMCMediaStatus_DOWNLOAD_EXTERNAL_FAIL:
		return "DOWNLOAD_EXTERNAL_FAIL"
	case TMCMediaStatus_NETWORK_ERROR:
		return "NETWORK_ERROR"
	case TMCMediaStatus_DELETED:
		return "DELETED"
	case TMCMediaStatus_INPUT_QLT_LOW:
		return "INPUT_QLT_LOW"
	}
	return "<UNSET>"
}

func TMCMediaStatusFromString(s string) (TMCMediaStatus, error) {
	switch s {
	case "QUEUING":
		return TMCMediaStatus_QUEUING, nil
	case "PROCESSING":
		return TMCMediaStatus_PROCESSING, nil
	case "DONE":
		return TMCMediaStatus_DONE, nil
	case "DONE_WITH_ERROR":
		return TMCMediaStatus_DONE_WITH_ERROR, nil
	case "DOWNLOADING":
		return TMCMediaStatus_DOWNLOADING, nil
	case "INPUT_FILE_INVALID":
		return TMCMediaStatus_INPUT_FILE_INVALID, nil
	case "ID_ZEN_ERROR":
		return TMCMediaStatus_ID_ZEN_ERROR, nil
	case "PROCESS_ERROR":
		return TMCMediaStatus_PROCESS_ERROR, nil
	case "DATABASE_ERROR":
		return TMCMediaStatus_DATABASE_ERROR, nil
	case "UNSUPPORTED_FORMAT":
		return TMCMediaStatus_UNSUPPORTED_FORMAT, nil
	case "UNSUPPORTED_QUALITY":
		return TMCMediaStatus_UNSUPPORTED_QUALITY, nil
	case "QLT_HIGHER_THAN_ORIGIN":
		return TMCMediaStatus_QLT_HIGHER_THAN_ORIGIN, nil
	case "DOWNLOAD_INTERNAL_FAIL":
		return TMCMediaStatus_DOWNLOAD_INTERNAL_FAIL, nil
	case "DOWNLOAD_EXTERNAL_FAIL":
		return TMCMediaStatus_DOWNLOAD_EXTERNAL_FAIL, nil
	case "NETWORK_ERROR":
		return TMCMediaStatus_NETWORK_ERROR, nil
	case "DELETED":
		return TMCMediaStatus_DELETED, nil
	case "INPUT_QLT_LOW":
		return TMCMediaStatus_INPUT_QLT_LOW, nil
	}
	return TMCMediaStatus(0), fmt.Errorf("not a valid TMCMediaStatus string")
}

func TMCMediaStatusPtr(v TMCMediaStatus) *TMCMediaStatus { return &v }

func (p TMCMediaStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMCMediaStatus) UnmarshalText(text []byte) error {
	q, err := TMCMediaStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TMCMediaStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TMCMediaStatus(v)
	return nil
}

func (p *TMCMediaStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMCSourceType int64

const (
	TMCSourceType_FTP   TMCSourceType = 0
	TMCSourceType_HTTP  TMCSourceType = 1
	TMCSourceType_LOCAL TMCSourceType = 2
)

func (p TMCSourceType) String() string {
	switch p {
	case TMCSourceType_FTP:
		return "FTP"
	case TMCSourceType_HTTP:
		return "HTTP"
	case TMCSourceType_LOCAL:
		return "LOCAL"
	}
	return "<UNSET>"
}

func TMCSourceTypeFromString(s string) (TMCSourceType, error) {
	switch s {
	case "FTP":
		return TMCSourceType_FTP, nil
	case "HTTP":
		return TMCSourceType_HTTP, nil
	case "LOCAL":
		return TMCSourceType_LOCAL, nil
	}
	return TMCSourceType(0), fmt.Errorf("not a valid TMCSourceType string")
}

func TMCSourceTypePtr(v TMCSourceType) *TMCSourceType { return &v }

func (p TMCSourceType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TMCSourceType) UnmarshalText(text []byte) error {
	q, err := TMCSourceTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *TMCSourceType) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = TMCSourceType(v)
	return nil
}

func (p *TMCSourceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TMCQualityInfoMap map[int32]*TMCFileStatusUrl

func TMCQualityInfoMapPtr(v TMCQualityInfoMap) *TMCQualityInfoMap { return &v }

// Attributes:
//  - SourceType
//  - Path
//  - IsExternalSource
//  - Size
//  - Duration
//  - IsAnimationVideo
type TMCSourceInfo struct {
	SourceType       *int32  `thrift:"sourceType,1" db:"sourceType" json:"sourceType,omitempty"`
	Path             *string `thrift:"path,2" db:"path" json:"path,omitempty"`
	IsExternalSource *bool   `thrift:"isExternalSource,3" db:"isExternalSource" json:"isExternalSource,omitempty"`
	Size             *int64  `thrift:"size,4" db:"size" json:"size,omitempty"`
	Duration         *int32  `thrift:"duration,5" db:"duration" json:"duration,omitempty"`
	IsAnimationVideo *bool   `thrift:"isAnimationVideo,6" db:"isAnimationVideo" json:"isAnimationVideo,omitempty"`
}

func NewTMCSourceInfo() *TMCSourceInfo {
	return &TMCSourceInfo{}
}

var TMCSourceInfo_SourceType_DEFAULT int32

func (p *TMCSourceInfo) GetSourceType() int32 {
	if !p.IsSetSourceType() {
		return TMCSourceInfo_SourceType_DEFAULT
	}
	return *p.SourceType
}

var TMCSourceInfo_Path_DEFAULT string

func (p *TMCSourceInfo) GetPath() string {
	if !p.IsSetPath() {
		return TMCSourceInfo_Path_DEFAULT
	}
	return *p.Path
}

var TMCSourceInfo_IsExternalSource_DEFAULT bool

func (p *TMCSourceInfo) GetIsExternalSource() bool {
	if !p.IsSetIsExternalSource() {
		return TMCSourceInfo_IsExternalSource_DEFAULT
	}
	return *p.IsExternalSource
}

var TMCSourceInfo_Size_DEFAULT int64

func (p *TMCSourceInfo) GetSize() int64 {
	if !p.IsSetSize() {
		return TMCSourceInfo_Size_DEFAULT
	}
	return *p.Size
}

var TMCSourceInfo_Duration_DEFAULT int32

func (p *TMCSourceInfo) GetDuration() int32 {
	if !p.IsSetDuration() {
		return TMCSourceInfo_Duration_DEFAULT
	}
	return *p.Duration
}

var TMCSourceInfo_IsAnimationVideo_DEFAULT bool

func (p *TMCSourceInfo) GetIsAnimationVideo() bool {
	if !p.IsSetIsAnimationVideo() {
		return TMCSourceInfo_IsAnimationVideo_DEFAULT
	}
	return *p.IsAnimationVideo
}
func (p *TMCSourceInfo) IsSetSourceType() bool {
	return p.SourceType != nil
}

func (p *TMCSourceInfo) IsSetPath() bool {
	return p.Path != nil
}

func (p *TMCSourceInfo) IsSetIsExternalSource() bool {
	return p.IsExternalSource != nil
}

func (p *TMCSourceInfo) IsSetSize() bool {
	return p.Size != nil
}

func (p *TMCSourceInfo) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *TMCSourceInfo) IsSetIsAnimationVideo() bool {
	return p.IsAnimationVideo != nil
}

func (p *TMCSourceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCSourceInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SourceType = &v
	}
	return nil
}

func (p *TMCSourceInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Path = &v
	}
	return nil
}

func (p *TMCSourceInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IsExternalSource = &v
	}
	return nil
}

func (p *TMCSourceInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Size = &v
	}
	return nil
}

func (p *TMCSourceInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *TMCSourceInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.IsAnimationVideo = &v
	}
	return nil
}

func (p *TMCSourceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCSourceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCSourceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceType() {
		if err := oprot.WriteFieldBegin("sourceType", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SourceType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.sourceType (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceType: ", p), err)
		}
	}
	return err
}

func (p *TMCSourceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPath() {
		if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Path)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err)
		}
	}
	return err
}

func (p *TMCSourceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsExternalSource() {
		if err := oprot.WriteFieldBegin("isExternalSource", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:isExternalSource: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsExternalSource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isExternalSource (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:isExternalSource: ", p), err)
		}
	}
	return err
}

func (p *TMCSourceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:size: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Size)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.size (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:size: ", p), err)
		}
	}
	return err
}

func (p *TMCSourceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:duration: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:duration: ", p), err)
		}
	}
	return err
}

func (p *TMCSourceInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAnimationVideo() {
		if err := oprot.WriteFieldBegin("isAnimationVideo", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isAnimationVideo: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsAnimationVideo)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isAnimationVideo (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isAnimationVideo: ", p), err)
		}
	}
	return err
}

func (p *TMCSourceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCSourceInfo(%+v)", *p)
}

// Attributes:
//  - SourceInfo
//  - MarginLeft
//  - MarginTop
type TMCWaterMarkInfo struct {
	SourceInfo *TMCSourceInfo `thrift:"sourceInfo,1" db:"sourceInfo" json:"sourceInfo,omitempty"`
	MarginLeft *int32         `thrift:"marginLeft,2" db:"marginLeft" json:"marginLeft,omitempty"`
	MarginTop  *int32         `thrift:"marginTop,3" db:"marginTop" json:"marginTop,omitempty"`
}

func NewTMCWaterMarkInfo() *TMCWaterMarkInfo {
	return &TMCWaterMarkInfo{}
}

var TMCWaterMarkInfo_SourceInfo_DEFAULT *TMCSourceInfo

func (p *TMCWaterMarkInfo) GetSourceInfo() *TMCSourceInfo {
	if !p.IsSetSourceInfo() {
		return TMCWaterMarkInfo_SourceInfo_DEFAULT
	}
	return p.SourceInfo
}

var TMCWaterMarkInfo_MarginLeft_DEFAULT int32

func (p *TMCWaterMarkInfo) GetMarginLeft() int32 {
	if !p.IsSetMarginLeft() {
		return TMCWaterMarkInfo_MarginLeft_DEFAULT
	}
	return *p.MarginLeft
}

var TMCWaterMarkInfo_MarginTop_DEFAULT int32

func (p *TMCWaterMarkInfo) GetMarginTop() int32 {
	if !p.IsSetMarginTop() {
		return TMCWaterMarkInfo_MarginTop_DEFAULT
	}
	return *p.MarginTop
}
func (p *TMCWaterMarkInfo) IsSetSourceInfo() bool {
	return p.SourceInfo != nil
}

func (p *TMCWaterMarkInfo) IsSetMarginLeft() bool {
	return p.MarginLeft != nil
}

func (p *TMCWaterMarkInfo) IsSetMarginTop() bool {
	return p.MarginTop != nil
}

func (p *TMCWaterMarkInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCWaterMarkInfo) ReadField1(iprot thrift.TProtocol) error {
	p.SourceInfo = &TMCSourceInfo{}
	if err := p.SourceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceInfo), err)
	}
	return nil
}

func (p *TMCWaterMarkInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MarginLeft = &v
	}
	return nil
}

func (p *TMCWaterMarkInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MarginTop = &v
	}
	return nil
}

func (p *TMCWaterMarkInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCWaterMarkInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCWaterMarkInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceInfo() {
		if err := oprot.WriteFieldBegin("sourceInfo", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sourceInfo: ", p), err)
		}
		if err := p.SourceInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sourceInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCWaterMarkInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMarginLeft() {
		if err := oprot.WriteFieldBegin("marginLeft", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:marginLeft: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MarginLeft)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.marginLeft (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:marginLeft: ", p), err)
		}
	}
	return err
}

func (p *TMCWaterMarkInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMarginTop() {
		if err := oprot.WriteFieldBegin("marginTop", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:marginTop: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MarginTop)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.marginTop (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:marginTop: ", p), err)
		}
	}
	return err
}

func (p *TMCWaterMarkInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCWaterMarkInfo(%+v)", *p)
}

// Attributes:
//  - Formats
type TMCOutputInfo struct {
	Formats map[int32][]int32 `thrift:"formats,1" db:"formats" json:"formats,omitempty"`
}

func NewTMCOutputInfo() *TMCOutputInfo {
	return &TMCOutputInfo{}
}

var TMCOutputInfo_Formats_DEFAULT map[int32][]int32

func (p *TMCOutputInfo) GetFormats() map[int32][]int32 {
	return p.Formats
}
func (p *TMCOutputInfo) IsSetFormats() bool {
	return p.Formats != nil
}

func (p *TMCOutputInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCOutputInfo) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32][]int32, size)
	p.Formats = tMap
	for i := 0; i < size; i++ {
		var _key0 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key0 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make([]int32, 0, size)
		_val1 := tSet
		for i := 0; i < size; i++ {
			var _elem2 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem2 = v
			}
			_val1 = append(_val1, _elem2)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.Formats[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCOutputInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCOutputInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCOutputInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormats() {
		if err := oprot.WriteFieldBegin("formats", thrift.MAP, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:formats: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.SET, len(p.Formats)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Formats {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if reflect.DeepEqual(v[i], v[j]) {
						return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
					}
				}
			}
			for _, v := range v {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:formats: ", p), err)
		}
	}
	return err
}

func (p *TMCOutputInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCOutputInfo(%+v)", *p)
}

// Attributes:
//  - Status
//  - RemainTime
//  - TotalTimeProc
//  - Period
//  - ImageRes
//  - BoardSize
//  - ImageIds
type TMCStoryBoardId struct {
	Status        *int32 `thrift:"status,1" db:"status" json:"status,omitempty"`
	RemainTime    *int32 `thrift:"remainTime,2" db:"remainTime" json:"remainTime,omitempty"`
	TotalTimeProc *int32 `thrift:"totalTimeProc,3" db:"totalTimeProc" json:"totalTimeProc,omitempty"`
	// unused fields # 4 to 9
	Period    *int16  `thrift:"period,10" db:"period" json:"period,omitempty"`
	ImageRes  *int16  `thrift:"imageRes,11" db:"imageRes" json:"imageRes,omitempty"`
	BoardSize *int8   `thrift:"boardSize,12" db:"boardSize" json:"boardSize,omitempty"`
	ImageIds  []int64 `thrift:"imageIds,13" db:"imageIds" json:"imageIds,omitempty"`
}

func NewTMCStoryBoardId() *TMCStoryBoardId {
	return &TMCStoryBoardId{}
}

var TMCStoryBoardId_Status_DEFAULT int32

func (p *TMCStoryBoardId) GetStatus() int32 {
	if !p.IsSetStatus() {
		return TMCStoryBoardId_Status_DEFAULT
	}
	return *p.Status
}

var TMCStoryBoardId_RemainTime_DEFAULT int32

func (p *TMCStoryBoardId) GetRemainTime() int32 {
	if !p.IsSetRemainTime() {
		return TMCStoryBoardId_RemainTime_DEFAULT
	}
	return *p.RemainTime
}

var TMCStoryBoardId_TotalTimeProc_DEFAULT int32

func (p *TMCStoryBoardId) GetTotalTimeProc() int32 {
	if !p.IsSetTotalTimeProc() {
		return TMCStoryBoardId_TotalTimeProc_DEFAULT
	}
	return *p.TotalTimeProc
}

var TMCStoryBoardId_Period_DEFAULT int16

func (p *TMCStoryBoardId) GetPeriod() int16 {
	if !p.IsSetPeriod() {
		return TMCStoryBoardId_Period_DEFAULT
	}
	return *p.Period
}

var TMCStoryBoardId_ImageRes_DEFAULT int16

func (p *TMCStoryBoardId) GetImageRes() int16 {
	if !p.IsSetImageRes() {
		return TMCStoryBoardId_ImageRes_DEFAULT
	}
	return *p.ImageRes
}

var TMCStoryBoardId_BoardSize_DEFAULT int8

func (p *TMCStoryBoardId) GetBoardSize() int8 {
	if !p.IsSetBoardSize() {
		return TMCStoryBoardId_BoardSize_DEFAULT
	}
	return *p.BoardSize
}

var TMCStoryBoardId_ImageIds_DEFAULT []int64

func (p *TMCStoryBoardId) GetImageIds() []int64 {
	return p.ImageIds
}
func (p *TMCStoryBoardId) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMCStoryBoardId) IsSetRemainTime() bool {
	return p.RemainTime != nil
}

func (p *TMCStoryBoardId) IsSetTotalTimeProc() bool {
	return p.TotalTimeProc != nil
}

func (p *TMCStoryBoardId) IsSetPeriod() bool {
	return p.Period != nil
}

func (p *TMCStoryBoardId) IsSetImageRes() bool {
	return p.ImageRes != nil
}

func (p *TMCStoryBoardId) IsSetBoardSize() bool {
	return p.BoardSize != nil
}

func (p *TMCStoryBoardId) IsSetImageIds() bool {
	return p.ImageIds != nil
}

func (p *TMCStoryBoardId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCStoryBoardId) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TMCStoryBoardId) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RemainTime = &v
	}
	return nil
}

func (p *TMCStoryBoardId) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalTimeProc = &v
	}
	return nil
}

func (p *TMCStoryBoardId) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Period = &v
	}
	return nil
}

func (p *TMCStoryBoardId) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ImageRes = &v
	}
	return nil
}

func (p *TMCStoryBoardId) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.BoardSize = &temp
	}
	return nil
}

func (p *TMCStoryBoardId) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.ImageIds = tSlice
	for i := 0; i < size; i++ {
		var _elem3 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem3 = v
		}
		p.ImageIds = append(p.ImageIds, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCStoryBoardId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCStoryBoardId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCStoryBoardId) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardId) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainTime() {
		if err := oprot.WriteFieldBegin("remainTime", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remainTime: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RemainTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainTime (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remainTime: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardId) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTimeProc() {
		if err := oprot.WriteFieldBegin("totalTimeProc", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalTimeProc: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalTimeProc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalTimeProc (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalTimeProc: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardId) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPeriod() {
		if err := oprot.WriteFieldBegin("period", thrift.I16, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:period: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Period)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.period (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:period: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardId) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageRes() {
		if err := oprot.WriteFieldBegin("imageRes", thrift.I16, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:imageRes: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.ImageRes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.imageRes (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:imageRes: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardId) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoardSize() {
		if err := oprot.WriteFieldBegin("boardSize", thrift.BYTE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:boardSize: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.BoardSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.boardSize (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:boardSize: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardId) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageIds() {
		if err := oprot.WriteFieldBegin("imageIds", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:imageIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ImageIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ImageIds {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:imageIds: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCStoryBoardId(%+v)", *p)
}

// Attributes:
//  - Status
//  - RemainTime
//  - TotalTimeProc
//  - Period
//  - ImageRes
//  - BoardSize
//  - ImageUrls
type TMCStoryBoardUrl struct {
	Status        *int32 `thrift:"status,1" db:"status" json:"status,omitempty"`
	RemainTime    *int32 `thrift:"remainTime,2" db:"remainTime" json:"remainTime,omitempty"`
	TotalTimeProc *int32 `thrift:"totalTimeProc,3" db:"totalTimeProc" json:"totalTimeProc,omitempty"`
	// unused fields # 4 to 9
	Period    *int16   `thrift:"period,10" db:"period" json:"period,omitempty"`
	ImageRes  *int16   `thrift:"imageRes,11" db:"imageRes" json:"imageRes,omitempty"`
	BoardSize *int8    `thrift:"boardSize,12" db:"boardSize" json:"boardSize,omitempty"`
	ImageUrls []string `thrift:"imageUrls,13" db:"imageUrls" json:"imageUrls,omitempty"`
}

func NewTMCStoryBoardUrl() *TMCStoryBoardUrl {
	return &TMCStoryBoardUrl{}
}

var TMCStoryBoardUrl_Status_DEFAULT int32

func (p *TMCStoryBoardUrl) GetStatus() int32 {
	if !p.IsSetStatus() {
		return TMCStoryBoardUrl_Status_DEFAULT
	}
	return *p.Status
}

var TMCStoryBoardUrl_RemainTime_DEFAULT int32

func (p *TMCStoryBoardUrl) GetRemainTime() int32 {
	if !p.IsSetRemainTime() {
		return TMCStoryBoardUrl_RemainTime_DEFAULT
	}
	return *p.RemainTime
}

var TMCStoryBoardUrl_TotalTimeProc_DEFAULT int32

func (p *TMCStoryBoardUrl) GetTotalTimeProc() int32 {
	if !p.IsSetTotalTimeProc() {
		return TMCStoryBoardUrl_TotalTimeProc_DEFAULT
	}
	return *p.TotalTimeProc
}

var TMCStoryBoardUrl_Period_DEFAULT int16

func (p *TMCStoryBoardUrl) GetPeriod() int16 {
	if !p.IsSetPeriod() {
		return TMCStoryBoardUrl_Period_DEFAULT
	}
	return *p.Period
}

var TMCStoryBoardUrl_ImageRes_DEFAULT int16

func (p *TMCStoryBoardUrl) GetImageRes() int16 {
	if !p.IsSetImageRes() {
		return TMCStoryBoardUrl_ImageRes_DEFAULT
	}
	return *p.ImageRes
}

var TMCStoryBoardUrl_BoardSize_DEFAULT int8

func (p *TMCStoryBoardUrl) GetBoardSize() int8 {
	if !p.IsSetBoardSize() {
		return TMCStoryBoardUrl_BoardSize_DEFAULT
	}
	return *p.BoardSize
}

var TMCStoryBoardUrl_ImageUrls_DEFAULT []string

func (p *TMCStoryBoardUrl) GetImageUrls() []string {
	return p.ImageUrls
}
func (p *TMCStoryBoardUrl) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMCStoryBoardUrl) IsSetRemainTime() bool {
	return p.RemainTime != nil
}

func (p *TMCStoryBoardUrl) IsSetTotalTimeProc() bool {
	return p.TotalTimeProc != nil
}

func (p *TMCStoryBoardUrl) IsSetPeriod() bool {
	return p.Period != nil
}

func (p *TMCStoryBoardUrl) IsSetImageRes() bool {
	return p.ImageRes != nil
}

func (p *TMCStoryBoardUrl) IsSetBoardSize() bool {
	return p.BoardSize != nil
}

func (p *TMCStoryBoardUrl) IsSetImageUrls() bool {
	return p.ImageUrls != nil
}

func (p *TMCStoryBoardUrl) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.BYTE {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCStoryBoardUrl) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TMCStoryBoardUrl) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RemainTime = &v
	}
	return nil
}

func (p *TMCStoryBoardUrl) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TotalTimeProc = &v
	}
	return nil
}

func (p *TMCStoryBoardUrl) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Period = &v
	}
	return nil
}

func (p *TMCStoryBoardUrl) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.ImageRes = &v
	}
	return nil
}

func (p *TMCStoryBoardUrl) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		temp := int8(v)
		p.BoardSize = &temp
	}
	return nil
}

func (p *TMCStoryBoardUrl) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ImageUrls = tSlice
	for i := 0; i < size; i++ {
		var _elem4 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.ImageUrls = append(p.ImageUrls, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCStoryBoardUrl) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCStoryBoardUrl"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCStoryBoardUrl) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardUrl) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainTime() {
		if err := oprot.WriteFieldBegin("remainTime", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:remainTime: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RemainTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainTime (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:remainTime: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardUrl) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTimeProc() {
		if err := oprot.WriteFieldBegin("totalTimeProc", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalTimeProc: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalTimeProc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalTimeProc (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalTimeProc: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardUrl) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPeriod() {
		if err := oprot.WriteFieldBegin("period", thrift.I16, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:period: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.Period)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.period (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:period: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardUrl) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageRes() {
		if err := oprot.WriteFieldBegin("imageRes", thrift.I16, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:imageRes: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.ImageRes)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.imageRes (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:imageRes: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardUrl) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBoardSize() {
		if err := oprot.WriteFieldBegin("boardSize", thrift.BYTE, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:boardSize: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.BoardSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.boardSize (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:boardSize: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardUrl) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageUrls() {
		if err := oprot.WriteFieldBegin("imageUrls", thrift.LIST, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:imageUrls: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ImageUrls)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ImageUrls {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:imageUrls: ", p), err)
		}
	}
	return err
}

func (p *TMCStoryBoardUrl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCStoryBoardUrl(%+v)", *p)
}

// Attributes:
//  - AutoGen
//  - Quality
//  - Sources
type TMCPosterSource struct {
	AutoGen *bool            `thrift:"autoGen,1" db:"autoGen" json:"autoGen,omitempty"`
	Quality []int32          `thrift:"quality,2" db:"quality" json:"quality,omitempty"`
	Sources []*TMCSourceInfo `thrift:"sources,3" db:"sources" json:"sources,omitempty"`
}

func NewTMCPosterSource() *TMCPosterSource {
	return &TMCPosterSource{}
}

var TMCPosterSource_AutoGen_DEFAULT bool

func (p *TMCPosterSource) GetAutoGen() bool {
	if !p.IsSetAutoGen() {
		return TMCPosterSource_AutoGen_DEFAULT
	}
	return *p.AutoGen
}

var TMCPosterSource_Quality_DEFAULT []int32

func (p *TMCPosterSource) GetQuality() []int32 {
	return p.Quality
}

var TMCPosterSource_Sources_DEFAULT []*TMCSourceInfo

func (p *TMCPosterSource) GetSources() []*TMCSourceInfo {
	return p.Sources
}
func (p *TMCPosterSource) IsSetAutoGen() bool {
	return p.AutoGen != nil
}

func (p *TMCPosterSource) IsSetQuality() bool {
	return p.Quality != nil
}

func (p *TMCPosterSource) IsSetSources() bool {
	return p.Sources != nil
}

func (p *TMCPosterSource) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCPosterSource) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AutoGen = &v
	}
	return nil
}

func (p *TMCPosterSource) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]int32, 0, size)
	p.Quality = tSet
	for i := 0; i < size; i++ {
		var _elem5 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem5 = v
		}
		p.Quality = append(p.Quality, _elem5)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TMCPosterSource) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMCSourceInfo, 0, size)
	p.Sources = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &TMCSourceInfo{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Sources = append(p.Sources, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCPosterSource) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCPosterSource"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCPosterSource) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAutoGen() {
		if err := oprot.WriteFieldBegin("autoGen", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:autoGen: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AutoGen)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.autoGen (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:autoGen: ", p), err)
		}
	}
	return err
}

func (p *TMCPosterSource) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuality() {
		if err := oprot.WriteFieldBegin("quality", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:quality: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.Quality)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for i := 0; i < len(p.Quality); i++ {
			for j := i + 1; j < len(p.Quality); j++ {
				if reflect.DeepEqual(p.Quality[i], p.Quality[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Quality[i]))
				}
			}
		}
		for _, v := range p.Quality {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:quality: ", p), err)
		}
	}
	return err
}

func (p *TMCPosterSource) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSources() {
		if err := oprot.WriteFieldBegin("sources", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sources: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sources)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Sources {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sources: ", p), err)
		}
	}
	return err
}

func (p *TMCPosterSource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCPosterSource(%+v)", *p)
}

// Attributes:
//  - AutoGen
//  - Quality
//  - FromImage
//  - Sources
type TMCGifSource struct {
	AutoGen   *bool            `thrift:"autoGen,1" db:"autoGen" json:"autoGen,omitempty"`
	Quality   []int32          `thrift:"quality,2" db:"quality" json:"quality,omitempty"`
	FromImage *bool            `thrift:"fromImage,3" db:"fromImage" json:"fromImage,omitempty"`
	Sources   []*TMCSourceInfo `thrift:"sources,4" db:"sources" json:"sources,omitempty"`
}

func NewTMCGifSource() *TMCGifSource {
	return &TMCGifSource{}
}

var TMCGifSource_AutoGen_DEFAULT bool

func (p *TMCGifSource) GetAutoGen() bool {
	if !p.IsSetAutoGen() {
		return TMCGifSource_AutoGen_DEFAULT
	}
	return *p.AutoGen
}

var TMCGifSource_Quality_DEFAULT []int32

func (p *TMCGifSource) GetQuality() []int32 {
	return p.Quality
}

var TMCGifSource_FromImage_DEFAULT bool

func (p *TMCGifSource) GetFromImage() bool {
	if !p.IsSetFromImage() {
		return TMCGifSource_FromImage_DEFAULT
	}
	return *p.FromImage
}

var TMCGifSource_Sources_DEFAULT []*TMCSourceInfo

func (p *TMCGifSource) GetSources() []*TMCSourceInfo {
	return p.Sources
}
func (p *TMCGifSource) IsSetAutoGen() bool {
	return p.AutoGen != nil
}

func (p *TMCGifSource) IsSetQuality() bool {
	return p.Quality != nil
}

func (p *TMCGifSource) IsSetFromImage() bool {
	return p.FromImage != nil
}

func (p *TMCGifSource) IsSetSources() bool {
	return p.Sources != nil
}

func (p *TMCGifSource) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.SET {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCGifSource) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AutoGen = &v
	}
	return nil
}

func (p *TMCGifSource) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make([]int32, 0, size)
	p.Quality = tSet
	for i := 0; i < size; i++ {
		var _elem7 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.Quality = append(p.Quality, _elem7)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *TMCGifSource) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FromImage = &v
	}
	return nil
}

func (p *TMCGifSource) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMCSourceInfo, 0, size)
	p.Sources = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &TMCSourceInfo{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Sources = append(p.Sources, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCGifSource) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCGifSource"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCGifSource) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAutoGen() {
		if err := oprot.WriteFieldBegin("autoGen", thrift.BOOL, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:autoGen: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AutoGen)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.autoGen (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:autoGen: ", p), err)
		}
	}
	return err
}

func (p *TMCGifSource) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuality() {
		if err := oprot.WriteFieldBegin("quality", thrift.SET, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:quality: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.I32, len(p.Quality)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for i := 0; i < len(p.Quality); i++ {
			for j := i + 1; j < len(p.Quality); j++ {
				if reflect.DeepEqual(p.Quality[i], p.Quality[j]) {
					return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Quality[i]))
				}
			}
		}
		for _, v := range p.Quality {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:quality: ", p), err)
		}
	}
	return err
}

func (p *TMCGifSource) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromImage() {
		if err := oprot.WriteFieldBegin("fromImage", thrift.BOOL, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fromImage: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.FromImage)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fromImage (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fromImage: ", p), err)
		}
	}
	return err
}

func (p *TMCGifSource) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSources() {
		if err := oprot.WriteFieldBegin("sources", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sources: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sources)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Sources {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sources: ", p), err)
		}
	}
	return err
}

func (p *TMCGifSource) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCGifSource(%+v)", *p)
}

// Attributes:
//  - MediaName
//  - AppId
//  - MediaSource
//  - AddWatermark
//  - Watermark
//  - GenStoryboard
//  - GenPoster
//  - PosterSource
//  - GenGif
//  - PosterGifSource
//  - Output
type TMCProcessOption struct {
	MediaName   *string        `thrift:"mediaName,1" db:"mediaName" json:"mediaName,omitempty"`
	AppId       *string        `thrift:"appId,2" db:"appId" json:"appId,omitempty"`
	MediaSource *TMCSourceInfo `thrift:"mediaSource,3" db:"mediaSource" json:"mediaSource,omitempty"`
	// unused fields # 4 to 9
	AddWatermark *bool             `thrift:"addWatermark,10" db:"addWatermark" json:"addWatermark,omitempty"`
	Watermark    *TMCWaterMarkInfo `thrift:"watermark,11" db:"watermark" json:"watermark,omitempty"`
	// unused fields # 12 to 19
	GenStoryboard *bool `thrift:"genStoryboard,20" db:"genStoryboard" json:"genStoryboard,omitempty"`
	// unused fields # 21 to 29
	GenPoster    *bool            `thrift:"genPoster,30" db:"genPoster" json:"genPoster,omitempty"`
	PosterSource *TMCPosterSource `thrift:"posterSource,31" db:"posterSource" json:"posterSource,omitempty"`
	// unused fields # 32 to 39
	GenGif          *bool         `thrift:"genGif,40" db:"genGif" json:"genGif,omitempty"`
	PosterGifSource *TMCGifSource `thrift:"posterGifSource,41" db:"posterGifSource" json:"posterGifSource,omitempty"`
	// unused fields # 42 to 49
	Output *TMCOutputInfo `thrift:"output,50" db:"output" json:"output,omitempty"`
}

func NewTMCProcessOption() *TMCProcessOption {
	return &TMCProcessOption{}
}

var TMCProcessOption_MediaName_DEFAULT string

func (p *TMCProcessOption) GetMediaName() string {
	if !p.IsSetMediaName() {
		return TMCProcessOption_MediaName_DEFAULT
	}
	return *p.MediaName
}

var TMCProcessOption_AppId_DEFAULT string

func (p *TMCProcessOption) GetAppId() string {
	if !p.IsSetAppId() {
		return TMCProcessOption_AppId_DEFAULT
	}
	return *p.AppId
}

var TMCProcessOption_MediaSource_DEFAULT *TMCSourceInfo

func (p *TMCProcessOption) GetMediaSource() *TMCSourceInfo {
	if !p.IsSetMediaSource() {
		return TMCProcessOption_MediaSource_DEFAULT
	}
	return p.MediaSource
}

var TMCProcessOption_AddWatermark_DEFAULT bool

func (p *TMCProcessOption) GetAddWatermark() bool {
	if !p.IsSetAddWatermark() {
		return TMCProcessOption_AddWatermark_DEFAULT
	}
	return *p.AddWatermark
}

var TMCProcessOption_Watermark_DEFAULT *TMCWaterMarkInfo

func (p *TMCProcessOption) GetWatermark() *TMCWaterMarkInfo {
	if !p.IsSetWatermark() {
		return TMCProcessOption_Watermark_DEFAULT
	}
	return p.Watermark
}

var TMCProcessOption_GenStoryboard_DEFAULT bool

func (p *TMCProcessOption) GetGenStoryboard() bool {
	if !p.IsSetGenStoryboard() {
		return TMCProcessOption_GenStoryboard_DEFAULT
	}
	return *p.GenStoryboard
}

var TMCProcessOption_GenPoster_DEFAULT bool

func (p *TMCProcessOption) GetGenPoster() bool {
	if !p.IsSetGenPoster() {
		return TMCProcessOption_GenPoster_DEFAULT
	}
	return *p.GenPoster
}

var TMCProcessOption_PosterSource_DEFAULT *TMCPosterSource

func (p *TMCProcessOption) GetPosterSource() *TMCPosterSource {
	if !p.IsSetPosterSource() {
		return TMCProcessOption_PosterSource_DEFAULT
	}
	return p.PosterSource
}

var TMCProcessOption_GenGif_DEFAULT bool

func (p *TMCProcessOption) GetGenGif() bool {
	if !p.IsSetGenGif() {
		return TMCProcessOption_GenGif_DEFAULT
	}
	return *p.GenGif
}

var TMCProcessOption_PosterGifSource_DEFAULT *TMCGifSource

func (p *TMCProcessOption) GetPosterGifSource() *TMCGifSource {
	if !p.IsSetPosterGifSource() {
		return TMCProcessOption_PosterGifSource_DEFAULT
	}
	return p.PosterGifSource
}

var TMCProcessOption_Output_DEFAULT *TMCOutputInfo

func (p *TMCProcessOption) GetOutput() *TMCOutputInfo {
	if !p.IsSetOutput() {
		return TMCProcessOption_Output_DEFAULT
	}
	return p.Output
}
func (p *TMCProcessOption) IsSetMediaName() bool {
	return p.MediaName != nil
}

func (p *TMCProcessOption) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *TMCProcessOption) IsSetMediaSource() bool {
	return p.MediaSource != nil
}

func (p *TMCProcessOption) IsSetAddWatermark() bool {
	return p.AddWatermark != nil
}

func (p *TMCProcessOption) IsSetWatermark() bool {
	return p.Watermark != nil
}

func (p *TMCProcessOption) IsSetGenStoryboard() bool {
	return p.GenStoryboard != nil
}

func (p *TMCProcessOption) IsSetGenPoster() bool {
	return p.GenPoster != nil
}

func (p *TMCProcessOption) IsSetPosterSource() bool {
	return p.PosterSource != nil
}

func (p *TMCProcessOption) IsSetGenGif() bool {
	return p.GenGif != nil
}

func (p *TMCProcessOption) IsSetPosterGifSource() bool {
	return p.PosterGifSource != nil
}

func (p *TMCProcessOption) IsSetOutput() bool {
	return p.Output != nil
}

func (p *TMCProcessOption) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 41:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField41(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField50(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCProcessOption) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MediaName = &v
	}
	return nil
}

func (p *TMCProcessOption) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppId = &v
	}
	return nil
}

func (p *TMCProcessOption) ReadField3(iprot thrift.TProtocol) error {
	p.MediaSource = &TMCSourceInfo{}
	if err := p.MediaSource.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MediaSource), err)
	}
	return nil
}

func (p *TMCProcessOption) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.AddWatermark = &v
	}
	return nil
}

func (p *TMCProcessOption) ReadField11(iprot thrift.TProtocol) error {
	p.Watermark = &TMCWaterMarkInfo{}
	if err := p.Watermark.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Watermark), err)
	}
	return nil
}

func (p *TMCProcessOption) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.GenStoryboard = &v
	}
	return nil
}

func (p *TMCProcessOption) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.GenPoster = &v
	}
	return nil
}

func (p *TMCProcessOption) ReadField31(iprot thrift.TProtocol) error {
	p.PosterSource = &TMCPosterSource{}
	if err := p.PosterSource.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PosterSource), err)
	}
	return nil
}

func (p *TMCProcessOption) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.GenGif = &v
	}
	return nil
}

func (p *TMCProcessOption) ReadField41(iprot thrift.TProtocol) error {
	p.PosterGifSource = &TMCGifSource{}
	if err := p.PosterGifSource.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PosterGifSource), err)
	}
	return nil
}

func (p *TMCProcessOption) ReadField50(iprot thrift.TProtocol) error {
	p.Output = &TMCOutputInfo{}
	if err := p.Output.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Output), err)
	}
	return nil
}

func (p *TMCProcessOption) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCProcessOption"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField41(oprot); err != nil {
			return err
		}
		if err := p.writeField50(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCProcessOption) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaName() {
		if err := oprot.WriteFieldBegin("mediaName", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaName (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaName: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err := oprot.WriteFieldBegin("appId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaSource() {
		if err := oprot.WriteFieldBegin("mediaSource", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mediaSource: ", p), err)
		}
		if err := p.MediaSource.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MediaSource), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mediaSource: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddWatermark() {
		if err := oprot.WriteFieldBegin("addWatermark", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:addWatermark: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.AddWatermark)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.addWatermark (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:addWatermark: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetWatermark() {
		if err := oprot.WriteFieldBegin("watermark", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:watermark: ", p), err)
		}
		if err := p.Watermark.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Watermark), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:watermark: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenStoryboard() {
		if err := oprot.WriteFieldBegin("genStoryboard", thrift.BOOL, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:genStoryboard: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.GenStoryboard)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.genStoryboard (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:genStoryboard: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenPoster() {
		if err := oprot.WriteFieldBegin("genPoster", thrift.BOOL, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:genPoster: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.GenPoster)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.genPoster (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:genPoster: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterSource() {
		if err := oprot.WriteFieldBegin("posterSource", thrift.STRUCT, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:posterSource: ", p), err)
		}
		if err := p.PosterSource.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PosterSource), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:posterSource: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenGif() {
		if err := oprot.WriteFieldBegin("genGif", thrift.BOOL, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:genGif: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.GenGif)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.genGif (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:genGif: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterGifSource() {
		if err := oprot.WriteFieldBegin("posterGifSource", thrift.STRUCT, 41); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:posterGifSource: ", p), err)
		}
		if err := p.PosterGifSource.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PosterGifSource), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 41:posterGifSource: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutput() {
		if err := oprot.WriteFieldBegin("output", thrift.STRUCT, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:output: ", p), err)
		}
		if err := p.Output.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Output), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:output: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCProcessOption(%+v)", *p)
}

// Attributes:
//  - Error
//  - MediaId
type TMCProcessResult_ struct {
	Error   int32   `thrift:"error,1,required" db:"error" json:"error"`
	MediaId *string `thrift:"mediaId,2" db:"mediaId" json:"mediaId,omitempty"`
}

func NewTMCProcessResult_() *TMCProcessResult_ {
	return &TMCProcessResult_{}
}

func (p *TMCProcessResult_) GetError() int32 {
	return p.Error
}

var TMCProcessResult__MediaId_DEFAULT string

func (p *TMCProcessResult_) GetMediaId() string {
	if !p.IsSetMediaId() {
		return TMCProcessResult__MediaId_DEFAULT
	}
	return *p.MediaId
}
func (p *TMCProcessResult_) IsSetMediaId() bool {
	return p.MediaId != nil
}

func (p *TMCProcessResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetError bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetError = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetError {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"))
	}
	return nil
}

func (p *TMCProcessResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *TMCProcessResult_) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MediaId = &v
	}
	return nil
}

func (p *TMCProcessResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCProcessResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCProcessResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TMCProcessResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaId() {
		if err := oprot.WriteFieldBegin("mediaId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mediaId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mediaId: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCProcessResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - FileId
//  - RemainTime
//  - TotalTimeProc
//  - CreateTime
//  - StorageId
//  - ExtraData
//  - FileSize
//  - VideoWidth
//  - VideoHeight
type TMCFileStatusId struct {
	Status        *int32 `thrift:"status,1" db:"status" json:"status,omitempty"`
	FileId        *int64 `thrift:"fileId,2" db:"fileId" json:"fileId,omitempty"`
	RemainTime    *int32 `thrift:"remainTime,3" db:"remainTime" json:"remainTime,omitempty"`
	TotalTimeProc *int32 `thrift:"totalTimeProc,4" db:"totalTimeProc" json:"totalTimeProc,omitempty"`
	CreateTime    *int64 `thrift:"createTime,5" db:"createTime" json:"createTime,omitempty"`
	StorageId     *int32 `thrift:"storageId,6" db:"storageId" json:"storageId,omitempty"`
	ExtraData     []byte `thrift:"extraData,7" db:"extraData" json:"extraData,omitempty"`
	FileSize      *int64 `thrift:"fileSize,8" db:"fileSize" json:"fileSize,omitempty"`
	VideoWidth    *int16 `thrift:"videoWidth,9" db:"videoWidth" json:"videoWidth,omitempty"`
	VideoHeight   *int16 `thrift:"videoHeight,10" db:"videoHeight" json:"videoHeight,omitempty"`
}

func NewTMCFileStatusId() *TMCFileStatusId {
	return &TMCFileStatusId{}
}

var TMCFileStatusId_Status_DEFAULT int32

func (p *TMCFileStatusId) GetStatus() int32 {
	if !p.IsSetStatus() {
		return TMCFileStatusId_Status_DEFAULT
	}
	return *p.Status
}

var TMCFileStatusId_FileId_DEFAULT int64

func (p *TMCFileStatusId) GetFileId() int64 {
	if !p.IsSetFileId() {
		return TMCFileStatusId_FileId_DEFAULT
	}
	return *p.FileId
}

var TMCFileStatusId_RemainTime_DEFAULT int32

func (p *TMCFileStatusId) GetRemainTime() int32 {
	if !p.IsSetRemainTime() {
		return TMCFileStatusId_RemainTime_DEFAULT
	}
	return *p.RemainTime
}

var TMCFileStatusId_TotalTimeProc_DEFAULT int32

func (p *TMCFileStatusId) GetTotalTimeProc() int32 {
	if !p.IsSetTotalTimeProc() {
		return TMCFileStatusId_TotalTimeProc_DEFAULT
	}
	return *p.TotalTimeProc
}

var TMCFileStatusId_CreateTime_DEFAULT int64

func (p *TMCFileStatusId) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return TMCFileStatusId_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TMCFileStatusId_StorageId_DEFAULT int32

func (p *TMCFileStatusId) GetStorageId() int32 {
	if !p.IsSetStorageId() {
		return TMCFileStatusId_StorageId_DEFAULT
	}
	return *p.StorageId
}

var TMCFileStatusId_ExtraData_DEFAULT []byte

func (p *TMCFileStatusId) GetExtraData() []byte {
	return p.ExtraData
}

var TMCFileStatusId_FileSize_DEFAULT int64

func (p *TMCFileStatusId) GetFileSize() int64 {
	if !p.IsSetFileSize() {
		return TMCFileStatusId_FileSize_DEFAULT
	}
	return *p.FileSize
}

var TMCFileStatusId_VideoWidth_DEFAULT int16

func (p *TMCFileStatusId) GetVideoWidth() int16 {
	if !p.IsSetVideoWidth() {
		return TMCFileStatusId_VideoWidth_DEFAULT
	}
	return *p.VideoWidth
}

var TMCFileStatusId_VideoHeight_DEFAULT int16

func (p *TMCFileStatusId) GetVideoHeight() int16 {
	if !p.IsSetVideoHeight() {
		return TMCFileStatusId_VideoHeight_DEFAULT
	}
	return *p.VideoHeight
}
func (p *TMCFileStatusId) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMCFileStatusId) IsSetFileId() bool {
	return p.FileId != nil
}

func (p *TMCFileStatusId) IsSetRemainTime() bool {
	return p.RemainTime != nil
}

func (p *TMCFileStatusId) IsSetTotalTimeProc() bool {
	return p.TotalTimeProc != nil
}

func (p *TMCFileStatusId) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TMCFileStatusId) IsSetStorageId() bool {
	return p.StorageId != nil
}

func (p *TMCFileStatusId) IsSetExtraData() bool {
	return p.ExtraData != nil
}

func (p *TMCFileStatusId) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *TMCFileStatusId) IsSetVideoWidth() bool {
	return p.VideoWidth != nil
}

func (p *TMCFileStatusId) IsSetVideoHeight() bool {
	return p.VideoHeight != nil
}

func (p *TMCFileStatusId) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCFileStatusId) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FileId = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RemainTime = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalTimeProc = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.StorageId = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.ExtraData = v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FileSize = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.VideoWidth = &v
	}
	return nil
}

func (p *TMCFileStatusId) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.VideoHeight = &v
	}
	return nil
}

func (p *TMCFileStatusId) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCFileStatusId"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCFileStatusId) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileId() {
		if err := oprot.WriteFieldBegin("fileId", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fileId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FileId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fileId: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainTime() {
		if err := oprot.WriteFieldBegin("remainTime", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remainTime: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RemainTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainTime (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remainTime: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTimeProc() {
		if err := oprot.WriteFieldBegin("totalTimeProc", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalTimeProc: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalTimeProc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalTimeProc (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalTimeProc: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createTime: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageId() {
		if err := oprot.WriteFieldBegin("storageId", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:storageId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StorageId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storageId (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:storageId: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtraData() {
		if err := oprot.WriteFieldBegin("extraData", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:extraData: ", p), err)
		}
		if err := oprot.WriteBinary(p.ExtraData); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.extraData (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:extraData: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fileSize: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileSize (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fileSize: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoWidth() {
		if err := oprot.WriteFieldBegin("videoWidth", thrift.I16, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:videoWidth: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.VideoWidth)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.videoWidth (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:videoWidth: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoHeight() {
		if err := oprot.WriteFieldBegin("videoHeight", thrift.I16, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:videoHeight: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.VideoHeight)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.videoHeight (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:videoHeight: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusId) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCFileStatusId(%+v)", *p)
}

// Attributes:
//  - Status
//  - FileUrl
//  - RemainTime
//  - TotalTimeProc
//  - FileSize
//  - VideoWidth
//  - VideoHeight
type TMCFileStatusUrl struct {
	Status        *int32  `thrift:"status,1" db:"status" json:"status,omitempty"`
	FileUrl       *string `thrift:"fileUrl,2" db:"fileUrl" json:"fileUrl,omitempty"`
	RemainTime    *int32  `thrift:"remainTime,3" db:"remainTime" json:"remainTime,omitempty"`
	TotalTimeProc *int32  `thrift:"totalTimeProc,4" db:"totalTimeProc" json:"totalTimeProc,omitempty"`
	FileSize      *int64  `thrift:"fileSize,5" db:"fileSize" json:"fileSize,omitempty"`
	VideoWidth    *int32  `thrift:"videoWidth,6" db:"videoWidth" json:"videoWidth,omitempty"`
	VideoHeight   *int32  `thrift:"videoHeight,7" db:"videoHeight" json:"videoHeight,omitempty"`
}

func NewTMCFileStatusUrl() *TMCFileStatusUrl {
	return &TMCFileStatusUrl{}
}

var TMCFileStatusUrl_Status_DEFAULT int32

func (p *TMCFileStatusUrl) GetStatus() int32 {
	if !p.IsSetStatus() {
		return TMCFileStatusUrl_Status_DEFAULT
	}
	return *p.Status
}

var TMCFileStatusUrl_FileUrl_DEFAULT string

func (p *TMCFileStatusUrl) GetFileUrl() string {
	if !p.IsSetFileUrl() {
		return TMCFileStatusUrl_FileUrl_DEFAULT
	}
	return *p.FileUrl
}

var TMCFileStatusUrl_RemainTime_DEFAULT int32

func (p *TMCFileStatusUrl) GetRemainTime() int32 {
	if !p.IsSetRemainTime() {
		return TMCFileStatusUrl_RemainTime_DEFAULT
	}
	return *p.RemainTime
}

var TMCFileStatusUrl_TotalTimeProc_DEFAULT int32

func (p *TMCFileStatusUrl) GetTotalTimeProc() int32 {
	if !p.IsSetTotalTimeProc() {
		return TMCFileStatusUrl_TotalTimeProc_DEFAULT
	}
	return *p.TotalTimeProc
}

var TMCFileStatusUrl_FileSize_DEFAULT int64

func (p *TMCFileStatusUrl) GetFileSize() int64 {
	if !p.IsSetFileSize() {
		return TMCFileStatusUrl_FileSize_DEFAULT
	}
	return *p.FileSize
}

var TMCFileStatusUrl_VideoWidth_DEFAULT int32

func (p *TMCFileStatusUrl) GetVideoWidth() int32 {
	if !p.IsSetVideoWidth() {
		return TMCFileStatusUrl_VideoWidth_DEFAULT
	}
	return *p.VideoWidth
}

var TMCFileStatusUrl_VideoHeight_DEFAULT int32

func (p *TMCFileStatusUrl) GetVideoHeight() int32 {
	if !p.IsSetVideoHeight() {
		return TMCFileStatusUrl_VideoHeight_DEFAULT
	}
	return *p.VideoHeight
}
func (p *TMCFileStatusUrl) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMCFileStatusUrl) IsSetFileUrl() bool {
	return p.FileUrl != nil
}

func (p *TMCFileStatusUrl) IsSetRemainTime() bool {
	return p.RemainTime != nil
}

func (p *TMCFileStatusUrl) IsSetTotalTimeProc() bool {
	return p.TotalTimeProc != nil
}

func (p *TMCFileStatusUrl) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *TMCFileStatusUrl) IsSetVideoWidth() bool {
	return p.VideoWidth != nil
}

func (p *TMCFileStatusUrl) IsSetVideoHeight() bool {
	return p.VideoHeight != nil
}

func (p *TMCFileStatusUrl) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCFileStatusUrl) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TMCFileStatusUrl) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FileUrl = &v
	}
	return nil
}

func (p *TMCFileStatusUrl) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.RemainTime = &v
	}
	return nil
}

func (p *TMCFileStatusUrl) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.TotalTimeProc = &v
	}
	return nil
}

func (p *TMCFileStatusUrl) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.FileSize = &v
	}
	return nil
}

func (p *TMCFileStatusUrl) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.VideoWidth = &v
	}
	return nil
}

func (p *TMCFileStatusUrl) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.VideoHeight = &v
	}
	return nil
}

func (p *TMCFileStatusUrl) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCFileStatusUrl"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCFileStatusUrl) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusUrl) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileUrl() {
		if err := oprot.WriteFieldBegin("fileUrl", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fileUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FileUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileUrl (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fileUrl: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusUrl) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetRemainTime() {
		if err := oprot.WriteFieldBegin("remainTime", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:remainTime: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.RemainTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.remainTime (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:remainTime: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusUrl) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTimeProc() {
		if err := oprot.WriteFieldBegin("totalTimeProc", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalTimeProc: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalTimeProc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalTimeProc (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalTimeProc: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusUrl) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err := oprot.WriteFieldBegin("fileSize", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:fileSize: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileSize (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:fileSize: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusUrl) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoWidth() {
		if err := oprot.WriteFieldBegin("videoWidth", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:videoWidth: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.VideoWidth)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.videoWidth (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:videoWidth: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusUrl) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoHeight() {
		if err := oprot.WriteFieldBegin("videoHeight", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:videoHeight: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.VideoHeight)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.videoHeight (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:videoHeight: ", p), err)
		}
	}
	return err
}

func (p *TMCFileStatusUrl) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCFileStatusUrl(%+v)", *p)
}

// Attributes:
//  - Duration
type TMCMediaProperties struct {
	Duration *int32 `thrift:"duration,1" db:"duration" json:"duration,omitempty"`
}

func NewTMCMediaProperties() *TMCMediaProperties {
	return &TMCMediaProperties{}
}

var TMCMediaProperties_Duration_DEFAULT int32

func (p *TMCMediaProperties) GetDuration() int32 {
	if !p.IsSetDuration() {
		return TMCMediaProperties_Duration_DEFAULT
	}
	return *p.Duration
}
func (p *TMCMediaProperties) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *TMCMediaProperties) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCMediaProperties) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *TMCMediaProperties) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCMediaProperties"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCMediaProperties) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:duration: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:duration: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProperties) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCMediaProperties(%+v)", *p)
}

// Attributes:
//  - Status
//  - MapFormatQualityInfo
//  - MediaName
//  - CreateTime
//  - TotalTimeProc
//  - DownloadProgress
//  - OriginFileSize
//  - SourceInfo
//  - ExternalSourceInfo
//  - Duration
//  - Properties
//  - AppId
//  - TempOriginUrl
//  - StoryBoardUrls
//  - PosterUrls
//  - PosterGifUrls
type TMCMediaInfo struct {
	Status               *int32                      `thrift:"status,1" db:"status" json:"status,omitempty"`
	MapFormatQualityInfo map[int32]TMCQualityInfoMap `thrift:"mapFormatQualityInfo,2" db:"mapFormatQualityInfo" json:"mapFormatQualityInfo,omitempty"`
	// unused fields # 3 to 5
	MediaName          *string             `thrift:"mediaName,6" db:"mediaName" json:"mediaName,omitempty"`
	CreateTime         *int64              `thrift:"createTime,7" db:"createTime" json:"createTime,omitempty"`
	TotalTimeProc      *int32              `thrift:"totalTimeProc,8" db:"totalTimeProc" json:"totalTimeProc,omitempty"`
	DownloadProgress   *int32              `thrift:"downloadProgress,9" db:"downloadProgress" json:"downloadProgress,omitempty"`
	OriginFileSize     *int64              `thrift:"originFileSize,10" db:"originFileSize" json:"originFileSize,omitempty"`
	SourceInfo         *TMCSourceInfo      `thrift:"sourceInfo,11" db:"sourceInfo" json:"sourceInfo,omitempty"`
	ExternalSourceInfo *TMCSourceInfo      `thrift:"externalSourceInfo,12" db:"externalSourceInfo" json:"externalSourceInfo,omitempty"`
	Duration           *int32              `thrift:"duration,13" db:"duration" json:"duration,omitempty"`
	Properties         *TMCMediaProperties `thrift:"properties,14" db:"properties" json:"properties,omitempty"`
	AppId              *string             `thrift:"appId,15" db:"appId" json:"appId,omitempty"`
	TempOriginUrl      *string             `thrift:"tempOriginUrl,16" db:"tempOriginUrl" json:"tempOriginUrl,omitempty"`
	// unused fields # 17 to 29
	StoryBoardUrls *TMCStoryBoardUrl             `thrift:"storyBoardUrls,30" db:"storyBoardUrls" json:"storyBoardUrls,omitempty"`
	PosterUrls     []map[int32]*TMCFileStatusUrl `thrift:"posterUrls,31" db:"posterUrls" json:"posterUrls,omitempty"`
	PosterGifUrls  []map[int32]*TMCFileStatusUrl `thrift:"posterGifUrls,32" db:"posterGifUrls" json:"posterGifUrls,omitempty"`
}

func NewTMCMediaInfo() *TMCMediaInfo {
	return &TMCMediaInfo{}
}

var TMCMediaInfo_Status_DEFAULT int32

func (p *TMCMediaInfo) GetStatus() int32 {
	if !p.IsSetStatus() {
		return TMCMediaInfo_Status_DEFAULT
	}
	return *p.Status
}

var TMCMediaInfo_MapFormatQualityInfo_DEFAULT map[int32]TMCQualityInfoMap

func (p *TMCMediaInfo) GetMapFormatQualityInfo() map[int32]TMCQualityInfoMap {
	return p.MapFormatQualityInfo
}

var TMCMediaInfo_MediaName_DEFAULT string

func (p *TMCMediaInfo) GetMediaName() string {
	if !p.IsSetMediaName() {
		return TMCMediaInfo_MediaName_DEFAULT
	}
	return *p.MediaName
}

var TMCMediaInfo_CreateTime_DEFAULT int64

func (p *TMCMediaInfo) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return TMCMediaInfo_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TMCMediaInfo_TotalTimeProc_DEFAULT int32

func (p *TMCMediaInfo) GetTotalTimeProc() int32 {
	if !p.IsSetTotalTimeProc() {
		return TMCMediaInfo_TotalTimeProc_DEFAULT
	}
	return *p.TotalTimeProc
}

var TMCMediaInfo_DownloadProgress_DEFAULT int32

func (p *TMCMediaInfo) GetDownloadProgress() int32 {
	if !p.IsSetDownloadProgress() {
		return TMCMediaInfo_DownloadProgress_DEFAULT
	}
	return *p.DownloadProgress
}

var TMCMediaInfo_OriginFileSize_DEFAULT int64

func (p *TMCMediaInfo) GetOriginFileSize() int64 {
	if !p.IsSetOriginFileSize() {
		return TMCMediaInfo_OriginFileSize_DEFAULT
	}
	return *p.OriginFileSize
}

var TMCMediaInfo_SourceInfo_DEFAULT *TMCSourceInfo

func (p *TMCMediaInfo) GetSourceInfo() *TMCSourceInfo {
	if !p.IsSetSourceInfo() {
		return TMCMediaInfo_SourceInfo_DEFAULT
	}
	return p.SourceInfo
}

var TMCMediaInfo_ExternalSourceInfo_DEFAULT *TMCSourceInfo

func (p *TMCMediaInfo) GetExternalSourceInfo() *TMCSourceInfo {
	if !p.IsSetExternalSourceInfo() {
		return TMCMediaInfo_ExternalSourceInfo_DEFAULT
	}
	return p.ExternalSourceInfo
}

var TMCMediaInfo_Duration_DEFAULT int32

func (p *TMCMediaInfo) GetDuration() int32 {
	if !p.IsSetDuration() {
		return TMCMediaInfo_Duration_DEFAULT
	}
	return *p.Duration
}

var TMCMediaInfo_Properties_DEFAULT *TMCMediaProperties

func (p *TMCMediaInfo) GetProperties() *TMCMediaProperties {
	if !p.IsSetProperties() {
		return TMCMediaInfo_Properties_DEFAULT
	}
	return p.Properties
}

var TMCMediaInfo_AppId_DEFAULT string

func (p *TMCMediaInfo) GetAppId() string {
	if !p.IsSetAppId() {
		return TMCMediaInfo_AppId_DEFAULT
	}
	return *p.AppId
}

var TMCMediaInfo_TempOriginUrl_DEFAULT string

func (p *TMCMediaInfo) GetTempOriginUrl() string {
	if !p.IsSetTempOriginUrl() {
		return TMCMediaInfo_TempOriginUrl_DEFAULT
	}
	return *p.TempOriginUrl
}

var TMCMediaInfo_StoryBoardUrls_DEFAULT *TMCStoryBoardUrl

func (p *TMCMediaInfo) GetStoryBoardUrls() *TMCStoryBoardUrl {
	if !p.IsSetStoryBoardUrls() {
		return TMCMediaInfo_StoryBoardUrls_DEFAULT
	}
	return p.StoryBoardUrls
}

var TMCMediaInfo_PosterUrls_DEFAULT []map[int32]*TMCFileStatusUrl

func (p *TMCMediaInfo) GetPosterUrls() []map[int32]*TMCFileStatusUrl {
	return p.PosterUrls
}

var TMCMediaInfo_PosterGifUrls_DEFAULT []map[int32]*TMCFileStatusUrl

func (p *TMCMediaInfo) GetPosterGifUrls() []map[int32]*TMCFileStatusUrl {
	return p.PosterGifUrls
}
func (p *TMCMediaInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMCMediaInfo) IsSetMapFormatQualityInfo() bool {
	return p.MapFormatQualityInfo != nil
}

func (p *TMCMediaInfo) IsSetMediaName() bool {
	return p.MediaName != nil
}

func (p *TMCMediaInfo) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TMCMediaInfo) IsSetTotalTimeProc() bool {
	return p.TotalTimeProc != nil
}

func (p *TMCMediaInfo) IsSetDownloadProgress() bool {
	return p.DownloadProgress != nil
}

func (p *TMCMediaInfo) IsSetOriginFileSize() bool {
	return p.OriginFileSize != nil
}

func (p *TMCMediaInfo) IsSetSourceInfo() bool {
	return p.SourceInfo != nil
}

func (p *TMCMediaInfo) IsSetExternalSourceInfo() bool {
	return p.ExternalSourceInfo != nil
}

func (p *TMCMediaInfo) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *TMCMediaInfo) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TMCMediaInfo) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *TMCMediaInfo) IsSetTempOriginUrl() bool {
	return p.TempOriginUrl != nil
}

func (p *TMCMediaInfo) IsSetStoryBoardUrls() bool {
	return p.StoryBoardUrls != nil
}

func (p *TMCMediaInfo) IsSetPosterUrls() bool {
	return p.PosterUrls != nil
}

func (p *TMCMediaInfo) IsSetPosterGifUrls() bool {
	return p.PosterGifUrls != nil
}

func (p *TMCMediaInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCMediaInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]TMCQualityInfoMap, size)
	p.MapFormatQualityInfo = tMap
	for i := 0; i < size; i++ {
		var _key9 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key9 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(TMCQualityInfoMap, size)
		_val10 := tMap
		for i := 0; i < size; i++ {
			var _key11 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key11 = v
			}
			_val12 := &TMCFileStatusUrl{}
			if err := _val12.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val12), err)
			}
			_val10[_key11] = _val12
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MapFormatQualityInfo[_key9] = _val10
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCMediaInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MediaName = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.TotalTimeProc = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DownloadProgress = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.OriginFileSize = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField11(iprot thrift.TProtocol) error {
	p.SourceInfo = &TMCSourceInfo{}
	if err := p.SourceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceInfo), err)
	}
	return nil
}

func (p *TMCMediaInfo) ReadField12(iprot thrift.TProtocol) error {
	p.ExternalSourceInfo = &TMCSourceInfo{}
	if err := p.ExternalSourceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExternalSourceInfo), err)
	}
	return nil
}

func (p *TMCMediaInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField14(iprot thrift.TProtocol) error {
	p.Properties = &TMCMediaProperties{}
	if err := p.Properties.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
	}
	return nil
}

func (p *TMCMediaInfo) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.AppId = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.TempOriginUrl = &v
	}
	return nil
}

func (p *TMCMediaInfo) ReadField30(iprot thrift.TProtocol) error {
	p.StoryBoardUrls = &TMCStoryBoardUrl{}
	if err := p.StoryBoardUrls.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StoryBoardUrls), err)
	}
	return nil
}

func (p *TMCMediaInfo) ReadField31(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]*TMCFileStatusUrl, 0, size)
	p.PosterUrls = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusUrl, size)
		_elem13 := tMap
		for i := 0; i < size; i++ {
			var _key14 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key14 = v
			}
			_val15 := &TMCFileStatusUrl{}
			if err := _val15.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val15), err)
			}
			_elem13[_key14] = _val15
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.PosterUrls = append(p.PosterUrls, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCMediaInfo) ReadField32(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]*TMCFileStatusUrl, 0, size)
	p.PosterGifUrls = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusUrl, size)
		_elem16 := tMap
		for i := 0; i < size; i++ {
			var _key17 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key17 = v
			}
			_val18 := &TMCFileStatusUrl{}
			if err := _val18.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val18), err)
			}
			_elem16[_key17] = _val18
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.PosterGifUrls = append(p.PosterGifUrls, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCMediaInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCMediaInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCMediaInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapFormatQualityInfo() {
		if err := oprot.WriteFieldBegin("mapFormatQualityInfo", thrift.MAP, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mapFormatQualityInfo: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.MapFormatQualityInfo)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapFormatQualityInfo {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mapFormatQualityInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaName() {
		if err := oprot.WriteFieldBegin("mediaName", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mediaName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaName (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mediaName: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createTime: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTimeProc() {
		if err := oprot.WriteFieldBegin("totalTimeProc", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:totalTimeProc: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalTimeProc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalTimeProc (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:totalTimeProc: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadProgress() {
		if err := oprot.WriteFieldBegin("downloadProgress", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:downloadProgress: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DownloadProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.downloadProgress (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:downloadProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginFileSize() {
		if err := oprot.WriteFieldBegin("originFileSize", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:originFileSize: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OriginFileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originFileSize (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:originFileSize: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceInfo() {
		if err := oprot.WriteFieldBegin("sourceInfo", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sourceInfo: ", p), err)
		}
		if err := p.SourceInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sourceInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalSourceInfo() {
		if err := oprot.WriteFieldBegin("externalSourceInfo", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:externalSourceInfo: ", p), err)
		}
		if err := p.ExternalSourceInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExternalSourceInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:externalSourceInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I32, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:duration: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:duration: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:properties: ", p), err)
		}
		if err := p.Properties.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:properties: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err := oprot.WriteFieldBegin("appId", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:appId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AppId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appId (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:appId: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetTempOriginUrl() {
		if err := oprot.WriteFieldBegin("tempOriginUrl", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:tempOriginUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TempOriginUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tempOriginUrl (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:tempOriginUrl: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoryBoardUrls() {
		if err := oprot.WriteFieldBegin("storyBoardUrls", thrift.STRUCT, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:storyBoardUrls: ", p), err)
		}
		if err := p.StoryBoardUrls.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StoryBoardUrls), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:storyBoardUrls: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterUrls() {
		if err := oprot.WriteFieldBegin("posterUrls", thrift.LIST, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:posterUrls: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.PosterUrls)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PosterUrls {
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:posterUrls: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterGifUrls() {
		if err := oprot.WriteFieldBegin("posterGifUrls", thrift.LIST, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:posterGifUrls: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.PosterGifUrls)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PosterGifUrls {
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:posterGifUrls: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCMediaInfo(%+v)", *p)
}

// Attributes:
//  - MediaId
//  - Status
//  - MapFormatInfo
//  - ListPosterId
//  - MediaName
//  - CreateTime
//  - TotalTimeProc
//  - DownloadProgress
//  - OriginFileSize
//  - SourceInfo
//  - ExternalSourceInfo
//  - Duration
//  - AppId
//  - StorageId
//  - TempOriginUrl
//  - Properties
//  - StoryBoardIds
//  - PosterIds
//  - PosterGifIds
type TMCMediaMeta struct {
	MediaId       int64                                `thrift:"mediaId,1,required" db:"mediaId" json:"mediaId"`
	Status        *int32                               `thrift:"status,2" db:"status" json:"status,omitempty"`
	MapFormatInfo map[int32]map[int32]*TMCFileStatusId `thrift:"mapFormatInfo,3" db:"mapFormatInfo" json:"mapFormatInfo,omitempty"`
	ListPosterId  []int64                              `thrift:"listPosterId,4" db:"listPosterId" json:"listPosterId,omitempty"`
	// unused field # 5
	MediaName          *string        `thrift:"mediaName,6" db:"mediaName" json:"mediaName,omitempty"`
	CreateTime         *int64         `thrift:"createTime,7" db:"createTime" json:"createTime,omitempty"`
	TotalTimeProc      *int32         `thrift:"totalTimeProc,8" db:"totalTimeProc" json:"totalTimeProc,omitempty"`
	DownloadProgress   *int32         `thrift:"downloadProgress,9" db:"downloadProgress" json:"downloadProgress,omitempty"`
	OriginFileSize     *int64         `thrift:"originFileSize,10" db:"originFileSize" json:"originFileSize,omitempty"`
	SourceInfo         *TMCSourceInfo `thrift:"sourceInfo,11" db:"sourceInfo" json:"sourceInfo,omitempty"`
	ExternalSourceInfo *TMCSourceInfo `thrift:"externalSourceInfo,12" db:"externalSourceInfo" json:"externalSourceInfo,omitempty"`
	Duration           *int32         `thrift:"duration,13" db:"duration" json:"duration,omitempty"`
	// unused field # 14
	AppId         *int32              `thrift:"appId,15" db:"appId" json:"appId,omitempty"`
	StorageId     *int32              `thrift:"storageId,16" db:"storageId" json:"storageId,omitempty"`
	TempOriginUrl *string             `thrift:"tempOriginUrl,17" db:"tempOriginUrl" json:"tempOriginUrl,omitempty"`
	Properties    *TMCMediaProperties `thrift:"properties,18" db:"properties" json:"properties,omitempty"`
	// unused fields # 19 to 29
	StoryBoardIds *TMCStoryBoardId             `thrift:"storyBoardIds,30" db:"storyBoardIds" json:"storyBoardIds,omitempty"`
	PosterIds     []map[int32]*TMCFileStatusId `thrift:"posterIds,31" db:"posterIds" json:"posterIds,omitempty"`
	PosterGifIds  []map[int32]*TMCFileStatusId `thrift:"posterGifIds,32" db:"posterGifIds" json:"posterGifIds,omitempty"`
}

func NewTMCMediaMeta() *TMCMediaMeta {
	return &TMCMediaMeta{}
}

func (p *TMCMediaMeta) GetMediaId() int64 {
	return p.MediaId
}

var TMCMediaMeta_Status_DEFAULT int32

func (p *TMCMediaMeta) GetStatus() int32 {
	if !p.IsSetStatus() {
		return TMCMediaMeta_Status_DEFAULT
	}
	return *p.Status
}

var TMCMediaMeta_MapFormatInfo_DEFAULT map[int32]map[int32]*TMCFileStatusId

func (p *TMCMediaMeta) GetMapFormatInfo() map[int32]map[int32]*TMCFileStatusId {
	return p.MapFormatInfo
}

var TMCMediaMeta_ListPosterId_DEFAULT []int64

func (p *TMCMediaMeta) GetListPosterId() []int64 {
	return p.ListPosterId
}

var TMCMediaMeta_MediaName_DEFAULT string

func (p *TMCMediaMeta) GetMediaName() string {
	if !p.IsSetMediaName() {
		return TMCMediaMeta_MediaName_DEFAULT
	}
	return *p.MediaName
}

var TMCMediaMeta_CreateTime_DEFAULT int64

func (p *TMCMediaMeta) GetCreateTime() int64 {
	if !p.IsSetCreateTime() {
		return TMCMediaMeta_CreateTime_DEFAULT
	}
	return *p.CreateTime
}

var TMCMediaMeta_TotalTimeProc_DEFAULT int32

func (p *TMCMediaMeta) GetTotalTimeProc() int32 {
	if !p.IsSetTotalTimeProc() {
		return TMCMediaMeta_TotalTimeProc_DEFAULT
	}
	return *p.TotalTimeProc
}

var TMCMediaMeta_DownloadProgress_DEFAULT int32

func (p *TMCMediaMeta) GetDownloadProgress() int32 {
	if !p.IsSetDownloadProgress() {
		return TMCMediaMeta_DownloadProgress_DEFAULT
	}
	return *p.DownloadProgress
}

var TMCMediaMeta_OriginFileSize_DEFAULT int64

func (p *TMCMediaMeta) GetOriginFileSize() int64 {
	if !p.IsSetOriginFileSize() {
		return TMCMediaMeta_OriginFileSize_DEFAULT
	}
	return *p.OriginFileSize
}

var TMCMediaMeta_SourceInfo_DEFAULT *TMCSourceInfo

func (p *TMCMediaMeta) GetSourceInfo() *TMCSourceInfo {
	if !p.IsSetSourceInfo() {
		return TMCMediaMeta_SourceInfo_DEFAULT
	}
	return p.SourceInfo
}

var TMCMediaMeta_ExternalSourceInfo_DEFAULT *TMCSourceInfo

func (p *TMCMediaMeta) GetExternalSourceInfo() *TMCSourceInfo {
	if !p.IsSetExternalSourceInfo() {
		return TMCMediaMeta_ExternalSourceInfo_DEFAULT
	}
	return p.ExternalSourceInfo
}

var TMCMediaMeta_Duration_DEFAULT int32

func (p *TMCMediaMeta) GetDuration() int32 {
	if !p.IsSetDuration() {
		return TMCMediaMeta_Duration_DEFAULT
	}
	return *p.Duration
}

var TMCMediaMeta_AppId_DEFAULT int32

func (p *TMCMediaMeta) GetAppId() int32 {
	if !p.IsSetAppId() {
		return TMCMediaMeta_AppId_DEFAULT
	}
	return *p.AppId
}

var TMCMediaMeta_StorageId_DEFAULT int32

func (p *TMCMediaMeta) GetStorageId() int32 {
	if !p.IsSetStorageId() {
		return TMCMediaMeta_StorageId_DEFAULT
	}
	return *p.StorageId
}

var TMCMediaMeta_TempOriginUrl_DEFAULT string

func (p *TMCMediaMeta) GetTempOriginUrl() string {
	if !p.IsSetTempOriginUrl() {
		return TMCMediaMeta_TempOriginUrl_DEFAULT
	}
	return *p.TempOriginUrl
}

var TMCMediaMeta_Properties_DEFAULT *TMCMediaProperties

func (p *TMCMediaMeta) GetProperties() *TMCMediaProperties {
	if !p.IsSetProperties() {
		return TMCMediaMeta_Properties_DEFAULT
	}
	return p.Properties
}

var TMCMediaMeta_StoryBoardIds_DEFAULT *TMCStoryBoardId

func (p *TMCMediaMeta) GetStoryBoardIds() *TMCStoryBoardId {
	if !p.IsSetStoryBoardIds() {
		return TMCMediaMeta_StoryBoardIds_DEFAULT
	}
	return p.StoryBoardIds
}

var TMCMediaMeta_PosterIds_DEFAULT []map[int32]*TMCFileStatusId

func (p *TMCMediaMeta) GetPosterIds() []map[int32]*TMCFileStatusId {
	return p.PosterIds
}

var TMCMediaMeta_PosterGifIds_DEFAULT []map[int32]*TMCFileStatusId

func (p *TMCMediaMeta) GetPosterGifIds() []map[int32]*TMCFileStatusId {
	return p.PosterGifIds
}
func (p *TMCMediaMeta) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMCMediaMeta) IsSetMapFormatInfo() bool {
	return p.MapFormatInfo != nil
}

func (p *TMCMediaMeta) IsSetListPosterId() bool {
	return p.ListPosterId != nil
}

func (p *TMCMediaMeta) IsSetMediaName() bool {
	return p.MediaName != nil
}

func (p *TMCMediaMeta) IsSetCreateTime() bool {
	return p.CreateTime != nil
}

func (p *TMCMediaMeta) IsSetTotalTimeProc() bool {
	return p.TotalTimeProc != nil
}

func (p *TMCMediaMeta) IsSetDownloadProgress() bool {
	return p.DownloadProgress != nil
}

func (p *TMCMediaMeta) IsSetOriginFileSize() bool {
	return p.OriginFileSize != nil
}

func (p *TMCMediaMeta) IsSetSourceInfo() bool {
	return p.SourceInfo != nil
}

func (p *TMCMediaMeta) IsSetExternalSourceInfo() bool {
	return p.ExternalSourceInfo != nil
}

func (p *TMCMediaMeta) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *TMCMediaMeta) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *TMCMediaMeta) IsSetStorageId() bool {
	return p.StorageId != nil
}

func (p *TMCMediaMeta) IsSetTempOriginUrl() bool {
	return p.TempOriginUrl != nil
}

func (p *TMCMediaMeta) IsSetProperties() bool {
	return p.Properties != nil
}

func (p *TMCMediaMeta) IsSetStoryBoardIds() bool {
	return p.StoryBoardIds != nil
}

func (p *TMCMediaMeta) IsSetPosterIds() bool {
	return p.PosterIds != nil
}

func (p *TMCMediaMeta) IsSetPosterGifIds() bool {
	return p.PosterGifIds != nil
}

func (p *TMCMediaMeta) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMediaId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetMediaId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 32:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField32(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMediaId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MediaId is not set"))
	}
	return nil
}

func (p *TMCMediaMeta) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MediaId = v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]map[int32]*TMCFileStatusId, size)
	p.MapFormatInfo = tMap
	for i := 0; i < size; i++ {
		var _key19 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key19 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusId, size)
		_val20 := tMap
		for i := 0; i < size; i++ {
			var _key21 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key21 = v
			}
			_val22 := &TMCFileStatusId{}
			if err := _val22.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val22), err)
			}
			_val20[_key21] = _val22
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MapFormatInfo[_key19] = _val20
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCMediaMeta) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.ListPosterId = tSlice
	for i := 0; i < size; i++ {
		var _elem23 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem23 = v
		}
		p.ListPosterId = append(p.ListPosterId, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCMediaMeta) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.MediaName = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.CreateTime = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.TotalTimeProc = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.DownloadProgress = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.OriginFileSize = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField11(iprot thrift.TProtocol) error {
	p.SourceInfo = &TMCSourceInfo{}
	if err := p.SourceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SourceInfo), err)
	}
	return nil
}

func (p *TMCMediaMeta) ReadField12(iprot thrift.TProtocol) error {
	p.ExternalSourceInfo = &TMCSourceInfo{}
	if err := p.ExternalSourceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExternalSourceInfo), err)
	}
	return nil
}

func (p *TMCMediaMeta) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.AppId = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.StorageId = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.TempOriginUrl = &v
	}
	return nil
}

func (p *TMCMediaMeta) ReadField18(iprot thrift.TProtocol) error {
	p.Properties = &TMCMediaProperties{}
	if err := p.Properties.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Properties), err)
	}
	return nil
}

func (p *TMCMediaMeta) ReadField30(iprot thrift.TProtocol) error {
	p.StoryBoardIds = &TMCStoryBoardId{}
	if err := p.StoryBoardIds.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StoryBoardIds), err)
	}
	return nil
}

func (p *TMCMediaMeta) ReadField31(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]*TMCFileStatusId, 0, size)
	p.PosterIds = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusId, size)
		_elem24 := tMap
		for i := 0; i < size; i++ {
			var _key25 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key25 = v
			}
			_val26 := &TMCFileStatusId{}
			if err := _val26.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val26), err)
			}
			_elem24[_key25] = _val26
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.PosterIds = append(p.PosterIds, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCMediaMeta) ReadField32(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]*TMCFileStatusId, 0, size)
	p.PosterGifIds = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusId, size)
		_elem27 := tMap
		for i := 0; i < size; i++ {
			var _key28 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key28 = v
			}
			_val29 := &TMCFileStatusId{}
			if err := _val29.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val29), err)
			}
			_elem27[_key28] = _val29
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.PosterGifIds = append(p.PosterGifIds, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCMediaMeta) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCMediaMeta"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField32(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCMediaMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MediaId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaId: ", p), err)
	}
	return err
}

func (p *TMCMediaMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapFormatInfo() {
		if err := oprot.WriteFieldBegin("mapFormatInfo", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mapFormatInfo: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.MapFormatInfo)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapFormatInfo {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mapFormatInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetListPosterId() {
		if err := oprot.WriteFieldBegin("listPosterId", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:listPosterId: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ListPosterId)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListPosterId {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:listPosterId: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaName() {
		if err := oprot.WriteFieldBegin("mediaName", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mediaName: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MediaName)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaName (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mediaName: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateTime() {
		if err := oprot.WriteFieldBegin("createTime", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:createTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.CreateTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.createTime (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:createTime: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTimeProc() {
		if err := oprot.WriteFieldBegin("totalTimeProc", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:totalTimeProc: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalTimeProc)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalTimeProc (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:totalTimeProc: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadProgress() {
		if err := oprot.WriteFieldBegin("downloadProgress", thrift.I32, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:downloadProgress: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DownloadProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.downloadProgress (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:downloadProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginFileSize() {
		if err := oprot.WriteFieldBegin("originFileSize", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:originFileSize: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OriginFileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originFileSize (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:originFileSize: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceInfo() {
		if err := oprot.WriteFieldBegin("sourceInfo", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:sourceInfo: ", p), err)
		}
		if err := p.SourceInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SourceInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:sourceInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetExternalSourceInfo() {
		if err := oprot.WriteFieldBegin("externalSourceInfo", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:externalSourceInfo: ", p), err)
		}
		if err := p.ExternalSourceInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExternalSourceInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:externalSourceInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I32, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:duration: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:duration: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err := oprot.WriteFieldBegin("appId", thrift.I32, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:appId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AppId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appId (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:appId: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageId() {
		if err := oprot.WriteFieldBegin("storageId", thrift.I32, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:storageId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StorageId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storageId (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:storageId: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetTempOriginUrl() {
		if err := oprot.WriteFieldBegin("tempOriginUrl", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:tempOriginUrl: ", p), err)
		}
		if err := oprot.WriteString(string(*p.TempOriginUrl)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tempOriginUrl (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:tempOriginUrl: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperties() {
		if err := oprot.WriteFieldBegin("properties", thrift.STRUCT, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:properties: ", p), err)
		}
		if err := p.Properties.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Properties), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:properties: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoryBoardIds() {
		if err := oprot.WriteFieldBegin("storyBoardIds", thrift.STRUCT, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:storyBoardIds: ", p), err)
		}
		if err := p.StoryBoardIds.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StoryBoardIds), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:storyBoardIds: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterIds() {
		if err := oprot.WriteFieldBegin("posterIds", thrift.LIST, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:posterIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.PosterIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PosterIds {
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:posterIds: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterGifIds() {
		if err := oprot.WriteFieldBegin("posterGifIds", thrift.LIST, 32); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:posterGifIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.PosterGifIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PosterGifIds {
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 32:posterGifIds: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCMediaMeta(%+v)", *p)
}

// Attributes:
//  - Error
//  - Value
type TMCMediaInfoResult_ struct {
	Error int32         `thrift:"error,1,required" db:"error" json:"error"`
	Value *TMCMediaInfo `thrift:"value,2" db:"value" json:"value,omitempty"`
}

func NewTMCMediaInfoResult_() *TMCMediaInfoResult_ {
	return &TMCMediaInfoResult_{}
}

func (p *TMCMediaInfoResult_) GetError() int32 {
	return p.Error
}

var TMCMediaInfoResult__Value_DEFAULT *TMCMediaInfo

func (p *TMCMediaInfoResult_) GetValue() *TMCMediaInfo {
	if !p.IsSetValue() {
		return TMCMediaInfoResult__Value_DEFAULT
	}
	return p.Value
}
func (p *TMCMediaInfoResult_) IsSetValue() bool {
	return p.Value != nil
}

func (p *TMCMediaInfoResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetError bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetError = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetError {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"))
	}
	return nil
}

func (p *TMCMediaInfoResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *TMCMediaInfoResult_) ReadField2(iprot thrift.TProtocol) error {
	p.Value = &TMCMediaInfo{}
	if err := p.Value.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
	}
	return nil
}

func (p *TMCMediaInfoResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCMediaInfoResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCMediaInfoResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TMCMediaInfoResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
		}
		if err := p.Value.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaInfoResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCMediaInfoResult_(%+v)", *p)
}

// Attributes:
//  - Error
//  - Data
type TMCMediaMetaResult_ struct {
	Error int32         `thrift:"error,1,required" db:"error" json:"error"`
	Data  *TMCMediaMeta `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTMCMediaMetaResult_() *TMCMediaMetaResult_ {
	return &TMCMediaMetaResult_{}
}

func (p *TMCMediaMetaResult_) GetError() int32 {
	return p.Error
}

var TMCMediaMetaResult__Data_DEFAULT *TMCMediaMeta

func (p *TMCMediaMetaResult_) GetData() *TMCMediaMeta {
	if !p.IsSetData() {
		return TMCMediaMetaResult__Data_DEFAULT
	}
	return p.Data
}
func (p *TMCMediaMetaResult_) IsSetData() bool {
	return p.Data != nil
}

func (p *TMCMediaMetaResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetError bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetError = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetError {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Error is not set"))
	}
	return nil
}

func (p *TMCMediaMetaResult_) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Error = v
	}
	return nil
}

func (p *TMCMediaMetaResult_) ReadField2(iprot thrift.TProtocol) error {
	p.Data = &TMCMediaMeta{}
	if err := p.Data.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
	}
	return nil
}

func (p *TMCMediaMetaResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCMediaMetaResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCMediaMetaResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Error)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err)
	}
	return err
}

func (p *TMCMediaMetaResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err)
		}
		if err := p.Data.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaMetaResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCMediaMetaResult_(%+v)", *p)
}

// Attributes:
//  - MediaId
//  - MediaSource
//  - WatermarkInfo
//  - OutputInfo
//  - ZenPoster
//  - ZenStoryboard
//  - GetDuration
//  - Convert
//  - Watermark
//  - Output
//  - GenStoryboard
//  - GenPoster
//  - PosterSource
//  - GenGif
//  - PosterGifSource
//  - AppId
type TMCMediaProcessNotify struct {
	MediaId       int64             `thrift:"mediaId,1,required" db:"mediaId" json:"mediaId"`
	MediaSource   *TMCSourceInfo    `thrift:"mediaSource,2" db:"mediaSource" json:"mediaSource,omitempty"`
	WatermarkInfo *TMCWaterMarkInfo `thrift:"watermarkInfo,3" db:"watermarkInfo" json:"watermarkInfo,omitempty"`
	OutputInfo    *TMCOutputInfo    `thrift:"outputInfo,4" db:"outputInfo" json:"outputInfo,omitempty"`
	ZenPoster     *bool             `thrift:"zenPoster,5" db:"zenPoster" json:"zenPoster,omitempty"`
	ZenStoryboard *bool             `thrift:"zenStoryboard,6" db:"zenStoryboard" json:"zenStoryboard,omitempty"`
	// unused field # 7
	GetDuration *bool `thrift:"getDuration,8" db:"getDuration" json:"getDuration,omitempty"`
	// unused field # 9
	Convert   *bool             `thrift:"convert,10" db:"convert" json:"convert,omitempty"`
	Watermark *TMCWaterMarkInfo `thrift:"watermark,11" db:"watermark" json:"watermark,omitempty"`
	Output    *TMCOutputInfo    `thrift:"output,12" db:"output" json:"output,omitempty"`
	// unused fields # 13 to 19
	GenStoryboard *bool `thrift:"genStoryboard,20" db:"genStoryboard" json:"genStoryboard,omitempty"`
	// unused fields # 21 to 29
	GenPoster    *bool            `thrift:"genPoster,30" db:"genPoster" json:"genPoster,omitempty"`
	PosterSource *TMCPosterSource `thrift:"posterSource,31" db:"posterSource" json:"posterSource,omitempty"`
	// unused fields # 32 to 39
	GenGif          *bool         `thrift:"genGif,40" db:"genGif" json:"genGif,omitempty"`
	PosterGifSource *TMCGifSource `thrift:"posterGifSource,41" db:"posterGifSource" json:"posterGifSource,omitempty"`
	// unused fields # 42 to 49
	AppId *int32 `thrift:"appId,50" db:"appId" json:"appId,omitempty"`
}

func NewTMCMediaProcessNotify() *TMCMediaProcessNotify {
	return &TMCMediaProcessNotify{}
}

func (p *TMCMediaProcessNotify) GetMediaId() int64 {
	return p.MediaId
}

var TMCMediaProcessNotify_MediaSource_DEFAULT *TMCSourceInfo

func (p *TMCMediaProcessNotify) GetMediaSource() *TMCSourceInfo {
	if !p.IsSetMediaSource() {
		return TMCMediaProcessNotify_MediaSource_DEFAULT
	}
	return p.MediaSource
}

var TMCMediaProcessNotify_WatermarkInfo_DEFAULT *TMCWaterMarkInfo

func (p *TMCMediaProcessNotify) GetWatermarkInfo() *TMCWaterMarkInfo {
	if !p.IsSetWatermarkInfo() {
		return TMCMediaProcessNotify_WatermarkInfo_DEFAULT
	}
	return p.WatermarkInfo
}

var TMCMediaProcessNotify_OutputInfo_DEFAULT *TMCOutputInfo

func (p *TMCMediaProcessNotify) GetOutputInfo() *TMCOutputInfo {
	if !p.IsSetOutputInfo() {
		return TMCMediaProcessNotify_OutputInfo_DEFAULT
	}
	return p.OutputInfo
}

var TMCMediaProcessNotify_ZenPoster_DEFAULT bool

func (p *TMCMediaProcessNotify) GetZenPoster() bool {
	if !p.IsSetZenPoster() {
		return TMCMediaProcessNotify_ZenPoster_DEFAULT
	}
	return *p.ZenPoster
}

var TMCMediaProcessNotify_ZenStoryboard_DEFAULT bool

func (p *TMCMediaProcessNotify) GetZenStoryboard() bool {
	if !p.IsSetZenStoryboard() {
		return TMCMediaProcessNotify_ZenStoryboard_DEFAULT
	}
	return *p.ZenStoryboard
}

var TMCMediaProcessNotify_GetDuration_DEFAULT bool

func (p *TMCMediaProcessNotify) GetGetDuration() bool {
	if !p.IsSetGetDuration() {
		return TMCMediaProcessNotify_GetDuration_DEFAULT
	}
	return *p.GetDuration
}

var TMCMediaProcessNotify_Convert_DEFAULT bool

func (p *TMCMediaProcessNotify) GetConvert() bool {
	if !p.IsSetConvert() {
		return TMCMediaProcessNotify_Convert_DEFAULT
	}
	return *p.Convert
}

var TMCMediaProcessNotify_Watermark_DEFAULT *TMCWaterMarkInfo

func (p *TMCMediaProcessNotify) GetWatermark() *TMCWaterMarkInfo {
	if !p.IsSetWatermark() {
		return TMCMediaProcessNotify_Watermark_DEFAULT
	}
	return p.Watermark
}

var TMCMediaProcessNotify_Output_DEFAULT *TMCOutputInfo

func (p *TMCMediaProcessNotify) GetOutput() *TMCOutputInfo {
	if !p.IsSetOutput() {
		return TMCMediaProcessNotify_Output_DEFAULT
	}
	return p.Output
}

var TMCMediaProcessNotify_GenStoryboard_DEFAULT bool

func (p *TMCMediaProcessNotify) GetGenStoryboard() bool {
	if !p.IsSetGenStoryboard() {
		return TMCMediaProcessNotify_GenStoryboard_DEFAULT
	}
	return *p.GenStoryboard
}

var TMCMediaProcessNotify_GenPoster_DEFAULT bool

func (p *TMCMediaProcessNotify) GetGenPoster() bool {
	if !p.IsSetGenPoster() {
		return TMCMediaProcessNotify_GenPoster_DEFAULT
	}
	return *p.GenPoster
}

var TMCMediaProcessNotify_PosterSource_DEFAULT *TMCPosterSource

func (p *TMCMediaProcessNotify) GetPosterSource() *TMCPosterSource {
	if !p.IsSetPosterSource() {
		return TMCMediaProcessNotify_PosterSource_DEFAULT
	}
	return p.PosterSource
}

var TMCMediaProcessNotify_GenGif_DEFAULT bool

func (p *TMCMediaProcessNotify) GetGenGif() bool {
	if !p.IsSetGenGif() {
		return TMCMediaProcessNotify_GenGif_DEFAULT
	}
	return *p.GenGif
}

var TMCMediaProcessNotify_PosterGifSource_DEFAULT *TMCGifSource

func (p *TMCMediaProcessNotify) GetPosterGifSource() *TMCGifSource {
	if !p.IsSetPosterGifSource() {
		return TMCMediaProcessNotify_PosterGifSource_DEFAULT
	}
	return p.PosterGifSource
}

var TMCMediaProcessNotify_AppId_DEFAULT int32

func (p *TMCMediaProcessNotify) GetAppId() int32 {
	if !p.IsSetAppId() {
		return TMCMediaProcessNotify_AppId_DEFAULT
	}
	return *p.AppId
}
func (p *TMCMediaProcessNotify) IsSetMediaSource() bool {
	return p.MediaSource != nil
}

func (p *TMCMediaProcessNotify) IsSetWatermarkInfo() bool {
	return p.WatermarkInfo != nil
}

func (p *TMCMediaProcessNotify) IsSetOutputInfo() bool {
	return p.OutputInfo != nil
}

func (p *TMCMediaProcessNotify) IsSetZenPoster() bool {
	return p.ZenPoster != nil
}

func (p *TMCMediaProcessNotify) IsSetZenStoryboard() bool {
	return p.ZenStoryboard != nil
}

func (p *TMCMediaProcessNotify) IsSetGetDuration() bool {
	return p.GetDuration != nil
}

func (p *TMCMediaProcessNotify) IsSetConvert() bool {
	return p.Convert != nil
}

func (p *TMCMediaProcessNotify) IsSetWatermark() bool {
	return p.Watermark != nil
}

func (p *TMCMediaProcessNotify) IsSetOutput() bool {
	return p.Output != nil
}

func (p *TMCMediaProcessNotify) IsSetGenStoryboard() bool {
	return p.GenStoryboard != nil
}

func (p *TMCMediaProcessNotify) IsSetGenPoster() bool {
	return p.GenPoster != nil
}

func (p *TMCMediaProcessNotify) IsSetPosterSource() bool {
	return p.PosterSource != nil
}

func (p *TMCMediaProcessNotify) IsSetGenGif() bool {
	return p.GenGif != nil
}

func (p *TMCMediaProcessNotify) IsSetPosterGifSource() bool {
	return p.PosterGifSource != nil
}

func (p *TMCMediaProcessNotify) IsSetAppId() bool {
	return p.AppId != nil
}

func (p *TMCMediaProcessNotify) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMediaId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetMediaId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 41:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField41(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField50(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMediaId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MediaId is not set"))
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MediaId = v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField2(iprot thrift.TProtocol) error {
	p.MediaSource = &TMCSourceInfo{}
	if err := p.MediaSource.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MediaSource), err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField3(iprot thrift.TProtocol) error {
	p.WatermarkInfo = &TMCWaterMarkInfo{}
	if err := p.WatermarkInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WatermarkInfo), err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField4(iprot thrift.TProtocol) error {
	p.OutputInfo = &TMCOutputInfo{}
	if err := p.OutputInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OutputInfo), err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ZenPoster = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ZenStoryboard = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.GetDuration = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Convert = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField11(iprot thrift.TProtocol) error {
	p.Watermark = &TMCWaterMarkInfo{}
	if err := p.Watermark.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Watermark), err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField12(iprot thrift.TProtocol) error {
	p.Output = &TMCOutputInfo{}
	if err := p.Output.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Output), err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.GenStoryboard = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.GenPoster = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField31(iprot thrift.TProtocol) error {
	p.PosterSource = &TMCPosterSource{}
	if err := p.PosterSource.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PosterSource), err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.GenGif = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField41(iprot thrift.TProtocol) error {
	p.PosterGifSource = &TMCGifSource{}
	if err := p.PosterGifSource.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PosterGifSource), err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) ReadField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.AppId = &v
	}
	return nil
}

func (p *TMCMediaProcessNotify) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCMediaProcessNotify"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField41(oprot); err != nil {
			return err
		}
		if err := p.writeField50(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCMediaProcessNotify) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MediaId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaId: ", p), err)
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaSource() {
		if err := oprot.WriteFieldBegin("mediaSource", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mediaSource: ", p), err)
		}
		if err := p.MediaSource.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MediaSource), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mediaSource: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWatermarkInfo() {
		if err := oprot.WriteFieldBegin("watermarkInfo", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:watermarkInfo: ", p), err)
		}
		if err := p.WatermarkInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WatermarkInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:watermarkInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputInfo() {
		if err := oprot.WriteFieldBegin("outputInfo", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputInfo: ", p), err)
		}
		if err := p.OutputInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OutputInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetZenPoster() {
		if err := oprot.WriteFieldBegin("zenPoster", thrift.BOOL, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:zenPoster: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ZenPoster)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.zenPoster (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:zenPoster: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetZenStoryboard() {
		if err := oprot.WriteFieldBegin("zenStoryboard", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:zenStoryboard: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.ZenStoryboard)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.zenStoryboard (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:zenStoryboard: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetGetDuration() {
		if err := oprot.WriteFieldBegin("getDuration", thrift.BOOL, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:getDuration: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.GetDuration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.getDuration (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:getDuration: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetConvert() {
		if err := oprot.WriteFieldBegin("convert", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:convert: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Convert)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.convert (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:convert: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetWatermark() {
		if err := oprot.WriteFieldBegin("watermark", thrift.STRUCT, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:watermark: ", p), err)
		}
		if err := p.Watermark.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Watermark), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:watermark: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutput() {
		if err := oprot.WriteFieldBegin("output", thrift.STRUCT, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:output: ", p), err)
		}
		if err := p.Output.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Output), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:output: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenStoryboard() {
		if err := oprot.WriteFieldBegin("genStoryboard", thrift.BOOL, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:genStoryboard: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.GenStoryboard)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.genStoryboard (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:genStoryboard: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenPoster() {
		if err := oprot.WriteFieldBegin("genPoster", thrift.BOOL, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:genPoster: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.GenPoster)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.genPoster (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:genPoster: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterSource() {
		if err := oprot.WriteFieldBegin("posterSource", thrift.STRUCT, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:posterSource: ", p), err)
		}
		if err := p.PosterSource.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PosterSource), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:posterSource: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetGenGif() {
		if err := oprot.WriteFieldBegin("genGif", thrift.BOOL, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:genGif: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.GenGif)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.genGif (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:genGif: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterGifSource() {
		if err := oprot.WriteFieldBegin("posterGifSource", thrift.STRUCT, 41); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:posterGifSource: ", p), err)
		}
		if err := p.PosterGifSource.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PosterGifSource), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 41:posterGifSource: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err := oprot.WriteFieldBegin("appId", thrift.I32, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:appId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AppId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appId (50) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:appId: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProcessNotify) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCMediaProcessNotify(%+v)", *p)
}

// Attributes:
//  - MediaId
//  - Status
//  - MapFormatProgressObs
//  - ListPosterIdObs
//  - ListStoryboardIdObs
//  - DownloadProgressObs
//  - TotalTimeProcObs
//  - DurationObs
//  - UpdateConvertProgress
//  - MapFormatProgress
//  - Duration
//  - OriginFileSize
//  - UpdateDownloadProgress
//  - DownloadProgress
//  - UpdateStoryBoardProgress
//  - StoryBoardIds
//  - UpdatePosterProgress
//  - PosterIds
//  - UpdatePosterGifProgress
//  - PosterGifIds
type TMCProcessStatusNotify struct {
	MediaId              int64                                `thrift:"mediaId,1,required" db:"mediaId" json:"mediaId"`
	Status               *int32                               `thrift:"status,2" db:"status" json:"status,omitempty"`
	MapFormatProgressObs map[int32]map[int32]*TMCFileStatusId `thrift:"mapFormatProgress_obs,3" db:"mapFormatProgress_obs" json:"mapFormatProgress_obs,omitempty"`
	ListPosterIdObs      []int64                              `thrift:"listPosterId_obs,4" db:"listPosterId_obs" json:"listPosterId_obs,omitempty"`
	ListStoryboardIdObs  []int64                              `thrift:"listStoryboardId_obs,5" db:"listStoryboardId_obs" json:"listStoryboardId_obs,omitempty"`
	DownloadProgressObs  *int32                               `thrift:"downloadProgress_obs,6" db:"downloadProgress_obs" json:"downloadProgress_obs,omitempty"`
	TotalTimeProcObs     *int32                               `thrift:"totalTimeProc_obs,7" db:"totalTimeProc_obs" json:"totalTimeProc_obs,omitempty"`
	DurationObs          *int32                               `thrift:"duration_obs,8" db:"duration_obs" json:"duration_obs,omitempty"`
	// unused field # 9
	UpdateConvertProgress *bool                                `thrift:"updateConvertProgress,10" db:"updateConvertProgress" json:"updateConvertProgress,omitempty"`
	MapFormatProgress     map[int32]map[int32]*TMCFileStatusId `thrift:"mapFormatProgress,11" db:"mapFormatProgress" json:"mapFormatProgress,omitempty"`
	Duration              *int32                               `thrift:"duration,12" db:"duration" json:"duration,omitempty"`
	OriginFileSize        *int64                               `thrift:"originFileSize,13" db:"originFileSize" json:"originFileSize,omitempty"`
	// unused fields # 14 to 19
	UpdateDownloadProgress *bool  `thrift:"updateDownloadProgress,20" db:"updateDownloadProgress" json:"updateDownloadProgress,omitempty"`
	DownloadProgress       *int32 `thrift:"downloadProgress,21" db:"downloadProgress" json:"downloadProgress,omitempty"`
	// unused fields # 22 to 29
	UpdateStoryBoardProgress *bool            `thrift:"updateStoryBoardProgress,30" db:"updateStoryBoardProgress" json:"updateStoryBoardProgress,omitempty"`
	StoryBoardIds            *TMCStoryBoardId `thrift:"storyBoardIds,31" db:"storyBoardIds" json:"storyBoardIds,omitempty"`
	// unused fields # 32 to 39
	UpdatePosterProgress *bool                        `thrift:"updatePosterProgress,40" db:"updatePosterProgress" json:"updatePosterProgress,omitempty"`
	PosterIds            []map[int32]*TMCFileStatusId `thrift:"posterIds,41" db:"posterIds" json:"posterIds,omitempty"`
	// unused fields # 42 to 49
	UpdatePosterGifProgress *bool                        `thrift:"updatePosterGifProgress,50" db:"updatePosterGifProgress" json:"updatePosterGifProgress,omitempty"`
	PosterGifIds            []map[int32]*TMCFileStatusId `thrift:"posterGifIds,51" db:"posterGifIds" json:"posterGifIds,omitempty"`
}

func NewTMCProcessStatusNotify() *TMCProcessStatusNotify {
	return &TMCProcessStatusNotify{}
}

func (p *TMCProcessStatusNotify) GetMediaId() int64 {
	return p.MediaId
}

var TMCProcessStatusNotify_Status_DEFAULT int32

func (p *TMCProcessStatusNotify) GetStatus() int32 {
	if !p.IsSetStatus() {
		return TMCProcessStatusNotify_Status_DEFAULT
	}
	return *p.Status
}

var TMCProcessStatusNotify_MapFormatProgressObs_DEFAULT map[int32]map[int32]*TMCFileStatusId

func (p *TMCProcessStatusNotify) GetMapFormatProgressObs() map[int32]map[int32]*TMCFileStatusId {
	return p.MapFormatProgressObs
}

var TMCProcessStatusNotify_ListPosterIdObs_DEFAULT []int64

func (p *TMCProcessStatusNotify) GetListPosterIdObs() []int64 {
	return p.ListPosterIdObs
}

var TMCProcessStatusNotify_ListStoryboardIdObs_DEFAULT []int64

func (p *TMCProcessStatusNotify) GetListStoryboardIdObs() []int64 {
	return p.ListStoryboardIdObs
}

var TMCProcessStatusNotify_DownloadProgressObs_DEFAULT int32

func (p *TMCProcessStatusNotify) GetDownloadProgressObs() int32 {
	if !p.IsSetDownloadProgressObs() {
		return TMCProcessStatusNotify_DownloadProgressObs_DEFAULT
	}
	return *p.DownloadProgressObs
}

var TMCProcessStatusNotify_TotalTimeProcObs_DEFAULT int32

func (p *TMCProcessStatusNotify) GetTotalTimeProcObs() int32 {
	if !p.IsSetTotalTimeProcObs() {
		return TMCProcessStatusNotify_TotalTimeProcObs_DEFAULT
	}
	return *p.TotalTimeProcObs
}

var TMCProcessStatusNotify_DurationObs_DEFAULT int32

func (p *TMCProcessStatusNotify) GetDurationObs() int32 {
	if !p.IsSetDurationObs() {
		return TMCProcessStatusNotify_DurationObs_DEFAULT
	}
	return *p.DurationObs
}

var TMCProcessStatusNotify_UpdateConvertProgress_DEFAULT bool

func (p *TMCProcessStatusNotify) GetUpdateConvertProgress() bool {
	if !p.IsSetUpdateConvertProgress() {
		return TMCProcessStatusNotify_UpdateConvertProgress_DEFAULT
	}
	return *p.UpdateConvertProgress
}

var TMCProcessStatusNotify_MapFormatProgress_DEFAULT map[int32]map[int32]*TMCFileStatusId

func (p *TMCProcessStatusNotify) GetMapFormatProgress() map[int32]map[int32]*TMCFileStatusId {
	return p.MapFormatProgress
}

var TMCProcessStatusNotify_Duration_DEFAULT int32

func (p *TMCProcessStatusNotify) GetDuration() int32 {
	if !p.IsSetDuration() {
		return TMCProcessStatusNotify_Duration_DEFAULT
	}
	return *p.Duration
}

var TMCProcessStatusNotify_OriginFileSize_DEFAULT int64

func (p *TMCProcessStatusNotify) GetOriginFileSize() int64 {
	if !p.IsSetOriginFileSize() {
		return TMCProcessStatusNotify_OriginFileSize_DEFAULT
	}
	return *p.OriginFileSize
}

var TMCProcessStatusNotify_UpdateDownloadProgress_DEFAULT bool

func (p *TMCProcessStatusNotify) GetUpdateDownloadProgress() bool {
	if !p.IsSetUpdateDownloadProgress() {
		return TMCProcessStatusNotify_UpdateDownloadProgress_DEFAULT
	}
	return *p.UpdateDownloadProgress
}

var TMCProcessStatusNotify_DownloadProgress_DEFAULT int32

func (p *TMCProcessStatusNotify) GetDownloadProgress() int32 {
	if !p.IsSetDownloadProgress() {
		return TMCProcessStatusNotify_DownloadProgress_DEFAULT
	}
	return *p.DownloadProgress
}

var TMCProcessStatusNotify_UpdateStoryBoardProgress_DEFAULT bool

func (p *TMCProcessStatusNotify) GetUpdateStoryBoardProgress() bool {
	if !p.IsSetUpdateStoryBoardProgress() {
		return TMCProcessStatusNotify_UpdateStoryBoardProgress_DEFAULT
	}
	return *p.UpdateStoryBoardProgress
}

var TMCProcessStatusNotify_StoryBoardIds_DEFAULT *TMCStoryBoardId

func (p *TMCProcessStatusNotify) GetStoryBoardIds() *TMCStoryBoardId {
	if !p.IsSetStoryBoardIds() {
		return TMCProcessStatusNotify_StoryBoardIds_DEFAULT
	}
	return p.StoryBoardIds
}

var TMCProcessStatusNotify_UpdatePosterProgress_DEFAULT bool

func (p *TMCProcessStatusNotify) GetUpdatePosterProgress() bool {
	if !p.IsSetUpdatePosterProgress() {
		return TMCProcessStatusNotify_UpdatePosterProgress_DEFAULT
	}
	return *p.UpdatePosterProgress
}

var TMCProcessStatusNotify_PosterIds_DEFAULT []map[int32]*TMCFileStatusId

func (p *TMCProcessStatusNotify) GetPosterIds() []map[int32]*TMCFileStatusId {
	return p.PosterIds
}

var TMCProcessStatusNotify_UpdatePosterGifProgress_DEFAULT bool

func (p *TMCProcessStatusNotify) GetUpdatePosterGifProgress() bool {
	if !p.IsSetUpdatePosterGifProgress() {
		return TMCProcessStatusNotify_UpdatePosterGifProgress_DEFAULT
	}
	return *p.UpdatePosterGifProgress
}

var TMCProcessStatusNotify_PosterGifIds_DEFAULT []map[int32]*TMCFileStatusId

func (p *TMCProcessStatusNotify) GetPosterGifIds() []map[int32]*TMCFileStatusId {
	return p.PosterGifIds
}
func (p *TMCProcessStatusNotify) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TMCProcessStatusNotify) IsSetMapFormatProgressObs() bool {
	return p.MapFormatProgressObs != nil
}

func (p *TMCProcessStatusNotify) IsSetListPosterIdObs() bool {
	return p.ListPosterIdObs != nil
}

func (p *TMCProcessStatusNotify) IsSetListStoryboardIdObs() bool {
	return p.ListStoryboardIdObs != nil
}

func (p *TMCProcessStatusNotify) IsSetDownloadProgressObs() bool {
	return p.DownloadProgressObs != nil
}

func (p *TMCProcessStatusNotify) IsSetTotalTimeProcObs() bool {
	return p.TotalTimeProcObs != nil
}

func (p *TMCProcessStatusNotify) IsSetDurationObs() bool {
	return p.DurationObs != nil
}

func (p *TMCProcessStatusNotify) IsSetUpdateConvertProgress() bool {
	return p.UpdateConvertProgress != nil
}

func (p *TMCProcessStatusNotify) IsSetMapFormatProgress() bool {
	return p.MapFormatProgress != nil
}

func (p *TMCProcessStatusNotify) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *TMCProcessStatusNotify) IsSetOriginFileSize() bool {
	return p.OriginFileSize != nil
}

func (p *TMCProcessStatusNotify) IsSetUpdateDownloadProgress() bool {
	return p.UpdateDownloadProgress != nil
}

func (p *TMCProcessStatusNotify) IsSetDownloadProgress() bool {
	return p.DownloadProgress != nil
}

func (p *TMCProcessStatusNotify) IsSetUpdateStoryBoardProgress() bool {
	return p.UpdateStoryBoardProgress != nil
}

func (p *TMCProcessStatusNotify) IsSetStoryBoardIds() bool {
	return p.StoryBoardIds != nil
}

func (p *TMCProcessStatusNotify) IsSetUpdatePosterProgress() bool {
	return p.UpdatePosterProgress != nil
}

func (p *TMCProcessStatusNotify) IsSetPosterIds() bool {
	return p.PosterIds != nil
}

func (p *TMCProcessStatusNotify) IsSetUpdatePosterGifProgress() bool {
	return p.UpdatePosterGifProgress != nil
}

func (p *TMCProcessStatusNotify) IsSetPosterGifIds() bool {
	return p.PosterGifIds != nil
}

func (p *TMCProcessStatusNotify) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMediaId bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetMediaId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField31(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 40:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField40(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 41:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField41(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 50:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField50(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 51:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField51(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMediaId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MediaId is not set"))
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MediaId = v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Status = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]map[int32]*TMCFileStatusId, size)
	p.MapFormatProgressObs = tMap
	for i := 0; i < size; i++ {
		var _key30 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key30 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusId, size)
		_val31 := tMap
		for i := 0; i < size; i++ {
			var _key32 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key32 = v
			}
			_val33 := &TMCFileStatusId{}
			if err := _val33.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val33), err)
			}
			_val31[_key32] = _val33
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MapFormatProgressObs[_key30] = _val31
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.ListPosterIdObs = tSlice
	for i := 0; i < size; i++ {
		var _elem34 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem34 = v
		}
		p.ListPosterIdObs = append(p.ListPosterIdObs, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.ListStoryboardIdObs = tSlice
	for i := 0; i < size; i++ {
		var _elem35 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem35 = v
		}
		p.ListStoryboardIdObs = append(p.ListStoryboardIdObs, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DownloadProgressObs = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.TotalTimeProcObs = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.DurationObs = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.UpdateConvertProgress = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField11(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]map[int32]*TMCFileStatusId, size)
	p.MapFormatProgress = tMap
	for i := 0; i < size; i++ {
		var _key36 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key36 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusId, size)
		_val37 := tMap
		for i := 0; i < size; i++ {
			var _key38 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key38 = v
			}
			_val39 := &TMCFileStatusId{}
			if err := _val39.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val39), err)
			}
			_val37[_key38] = _val39
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MapFormatProgress[_key36] = _val37
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Duration = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.OriginFileSize = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.UpdateDownloadProgress = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.DownloadProgress = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.UpdateStoryBoardProgress = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField31(iprot thrift.TProtocol) error {
	p.StoryBoardIds = &TMCStoryBoardId{}
	if err := p.StoryBoardIds.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StoryBoardIds), err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField40(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 40: ", err)
	} else {
		p.UpdatePosterProgress = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField41(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]*TMCFileStatusId, 0, size)
	p.PosterIds = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusId, size)
		_elem40 := tMap
		for i := 0; i < size; i++ {
			var _key41 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key41 = v
			}
			_val42 := &TMCFileStatusId{}
			if err := _val42.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val42), err)
			}
			_elem40[_key41] = _val42
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.PosterIds = append(p.PosterIds, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField50(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 50: ", err)
	} else {
		p.UpdatePosterGifProgress = &v
	}
	return nil
}

func (p *TMCProcessStatusNotify) ReadField51(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]map[int32]*TMCFileStatusId, 0, size)
	p.PosterGifIds = tSlice
	for i := 0; i < size; i++ {
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]*TMCFileStatusId, size)
		_elem43 := tMap
		for i := 0; i < size; i++ {
			var _key44 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key44 = v
			}
			_val45 := &TMCFileStatusId{}
			if err := _val45.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val45), err)
			}
			_elem43[_key44] = _val45
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.PosterGifIds = append(p.PosterGifIds, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCProcessStatusNotify"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField31(oprot); err != nil {
			return err
		}
		if err := p.writeField40(oprot); err != nil {
			return err
		}
		if err := p.writeField41(oprot); err != nil {
			return err
		}
		if err := p.writeField50(oprot); err != nil {
			return err
		}
		if err := p.writeField51(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCProcessStatusNotify) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaId", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaId: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MediaId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.mediaId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaId: ", p), err)
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err := oprot.WriteFieldBegin("status", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapFormatProgressObs() {
		if err := oprot.WriteFieldBegin("mapFormatProgress_obs", thrift.MAP, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:mapFormatProgress_obs: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.MapFormatProgressObs)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapFormatProgressObs {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:mapFormatProgress_obs: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetListPosterIdObs() {
		if err := oprot.WriteFieldBegin("listPosterId_obs", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:listPosterId_obs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ListPosterIdObs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListPosterIdObs {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:listPosterId_obs: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetListStoryboardIdObs() {
		if err := oprot.WriteFieldBegin("listStoryboardId_obs", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:listStoryboardId_obs: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ListStoryboardIdObs)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ListStoryboardIdObs {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:listStoryboardId_obs: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadProgressObs() {
		if err := oprot.WriteFieldBegin("downloadProgress_obs", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:downloadProgress_obs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DownloadProgressObs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.downloadProgress_obs (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:downloadProgress_obs: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTimeProcObs() {
		if err := oprot.WriteFieldBegin("totalTimeProc_obs", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:totalTimeProc_obs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TotalTimeProcObs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.totalTimeProc_obs (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:totalTimeProc_obs: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurationObs() {
		if err := oprot.WriteFieldBegin("duration_obs", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:duration_obs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DurationObs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration_obs (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:duration_obs: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateConvertProgress() {
		if err := oprot.WriteFieldBegin("updateConvertProgress", thrift.BOOL, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updateConvertProgress: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UpdateConvertProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateConvertProgress (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updateConvertProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapFormatProgress() {
		if err := oprot.WriteFieldBegin("mapFormatProgress", thrift.MAP, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:mapFormatProgress: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.MapFormatProgress)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapFormatProgress {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:mapFormatProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err := oprot.WriteFieldBegin("duration", thrift.I32, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:duration: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Duration)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.duration (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:duration: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetOriginFileSize() {
		if err := oprot.WriteFieldBegin("originFileSize", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:originFileSize: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.OriginFileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.originFileSize (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:originFileSize: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateDownloadProgress() {
		if err := oprot.WriteFieldBegin("updateDownloadProgress", thrift.BOOL, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:updateDownloadProgress: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UpdateDownloadProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateDownloadProgress (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:updateDownloadProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetDownloadProgress() {
		if err := oprot.WriteFieldBegin("downloadProgress", thrift.I32, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:downloadProgress: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.DownloadProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.downloadProgress (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:downloadProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateStoryBoardProgress() {
		if err := oprot.WriteFieldBegin("updateStoryBoardProgress", thrift.BOOL, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:updateStoryBoardProgress: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UpdateStoryBoardProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updateStoryBoardProgress (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:updateStoryBoardProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetStoryBoardIds() {
		if err := oprot.WriteFieldBegin("storyBoardIds", thrift.STRUCT, 31); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:storyBoardIds: ", p), err)
		}
		if err := p.StoryBoardIds.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StoryBoardIds), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 31:storyBoardIds: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatePosterProgress() {
		if err := oprot.WriteFieldBegin("updatePosterProgress", thrift.BOOL, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:updatePosterProgress: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UpdatePosterProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updatePosterProgress (40) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:updatePosterProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterIds() {
		if err := oprot.WriteFieldBegin("posterIds", thrift.LIST, 41); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:posterIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.PosterIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PosterIds {
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 41:posterIds: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatePosterGifProgress() {
		if err := oprot.WriteFieldBegin("updatePosterGifProgress", thrift.BOOL, 50); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:updatePosterGifProgress: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UpdatePosterGifProgress)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.updatePosterGifProgress (50) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 50:updatePosterGifProgress: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) writeField51(oprot thrift.TProtocol) (err error) {
	if p.IsSetPosterGifIds() {
		if err := oprot.WriteFieldBegin("posterGifIds", thrift.LIST, 51); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:posterGifIds: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.MAP, len(p.PosterGifIds)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.PosterGifIds {
			if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := v.Write(oprot); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 51:posterGifIds: ", p), err)
		}
	}
	return err
}

func (p *TMCProcessStatusNotify) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCProcessStatusNotify(%+v)", *p)
}

// Attributes:
//  - MediaId
//  - ProcessOption
type TMCDownloadExternalNotify struct {
	MediaId       *int64            `thrift:"mediaId,1" db:"mediaId" json:"mediaId,omitempty"`
	ProcessOption *TMCProcessOption `thrift:"processOption,2" db:"processOption" json:"processOption,omitempty"`
}

func NewTMCDownloadExternalNotify() *TMCDownloadExternalNotify {
	return &TMCDownloadExternalNotify{}
}

var TMCDownloadExternalNotify_MediaId_DEFAULT int64

func (p *TMCDownloadExternalNotify) GetMediaId() int64 {
	if !p.IsSetMediaId() {
		return TMCDownloadExternalNotify_MediaId_DEFAULT
	}
	return *p.MediaId
}

var TMCDownloadExternalNotify_ProcessOption_DEFAULT *TMCProcessOption

func (p *TMCDownloadExternalNotify) GetProcessOption() *TMCProcessOption {
	if !p.IsSetProcessOption() {
		return TMCDownloadExternalNotify_ProcessOption_DEFAULT
	}
	return p.ProcessOption
}
func (p *TMCDownloadExternalNotify) IsSetMediaId() bool {
	return p.MediaId != nil
}

func (p *TMCDownloadExternalNotify) IsSetProcessOption() bool {
	return p.ProcessOption != nil
}

func (p *TMCDownloadExternalNotify) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCDownloadExternalNotify) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MediaId = &v
	}
	return nil
}

func (p *TMCDownloadExternalNotify) ReadField2(iprot thrift.TProtocol) error {
	p.ProcessOption = &TMCProcessOption{}
	if err := p.ProcessOption.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ProcessOption), err)
	}
	return nil
}

func (p *TMCDownloadExternalNotify) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCDownloadExternalNotify"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCDownloadExternalNotify) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMediaId() {
		if err := oprot.WriteFieldBegin("mediaId", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.MediaId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.mediaId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaId: ", p), err)
		}
	}
	return err
}

func (p *TMCDownloadExternalNotify) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessOption() {
		if err := oprot.WriteFieldBegin("processOption", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:processOption: ", p), err)
		}
		if err := p.ProcessOption.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ProcessOption), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:processOption: ", p), err)
		}
	}
	return err
}

func (p *TMCDownloadExternalNotify) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCDownloadExternalNotify(%+v)", *p)
}

// Attributes:
//  - ID
//  - VideoBitrateKbps
//  - Fps
//  - Resolution
//  - AudioBitrateKbps
type TMCMediaProfile struct {
	ID               *string `thrift:"id,1" db:"id" json:"id,omitempty"`
	VideoBitrateKbps *int32  `thrift:"videoBitrateKbps,2" db:"videoBitrateKbps" json:"videoBitrateKbps,omitempty"`
	Fps              *int32  `thrift:"fps,3" db:"fps" json:"fps,omitempty"`
	Resolution       *int32  `thrift:"resolution,4" db:"resolution" json:"resolution,omitempty"`
	AudioBitrateKbps *int32  `thrift:"audioBitrateKbps,5" db:"audioBitrateKbps" json:"audioBitrateKbps,omitempty"`
}

func NewTMCMediaProfile() *TMCMediaProfile {
	return &TMCMediaProfile{}
}

var TMCMediaProfile_ID_DEFAULT string

func (p *TMCMediaProfile) GetID() string {
	if !p.IsSetID() {
		return TMCMediaProfile_ID_DEFAULT
	}
	return *p.ID
}

var TMCMediaProfile_VideoBitrateKbps_DEFAULT int32

func (p *TMCMediaProfile) GetVideoBitrateKbps() int32 {
	if !p.IsSetVideoBitrateKbps() {
		return TMCMediaProfile_VideoBitrateKbps_DEFAULT
	}
	return *p.VideoBitrateKbps
}

var TMCMediaProfile_Fps_DEFAULT int32

func (p *TMCMediaProfile) GetFps() int32 {
	if !p.IsSetFps() {
		return TMCMediaProfile_Fps_DEFAULT
	}
	return *p.Fps
}

var TMCMediaProfile_Resolution_DEFAULT int32

func (p *TMCMediaProfile) GetResolution() int32 {
	if !p.IsSetResolution() {
		return TMCMediaProfile_Resolution_DEFAULT
	}
	return *p.Resolution
}

var TMCMediaProfile_AudioBitrateKbps_DEFAULT int32

func (p *TMCMediaProfile) GetAudioBitrateKbps() int32 {
	if !p.IsSetAudioBitrateKbps() {
		return TMCMediaProfile_AudioBitrateKbps_DEFAULT
	}
	return *p.AudioBitrateKbps
}
func (p *TMCMediaProfile) IsSetID() bool {
	return p.ID != nil
}

func (p *TMCMediaProfile) IsSetVideoBitrateKbps() bool {
	return p.VideoBitrateKbps != nil
}

func (p *TMCMediaProfile) IsSetFps() bool {
	return p.Fps != nil
}

func (p *TMCMediaProfile) IsSetResolution() bool {
	return p.Resolution != nil
}

func (p *TMCMediaProfile) IsSetAudioBitrateKbps() bool {
	return p.AudioBitrateKbps != nil
}

func (p *TMCMediaProfile) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCMediaProfile) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *TMCMediaProfile) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.VideoBitrateKbps = &v
	}
	return nil
}

func (p *TMCMediaProfile) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Fps = &v
	}
	return nil
}

func (p *TMCMediaProfile) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Resolution = &v
	}
	return nil
}

func (p *TMCMediaProfile) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.AudioBitrateKbps = &v
	}
	return nil
}

func (p *TMCMediaProfile) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCMediaProfile"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCMediaProfile) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProfile) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoBitrateKbps() {
		if err := oprot.WriteFieldBegin("videoBitrateKbps", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:videoBitrateKbps: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.VideoBitrateKbps)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.videoBitrateKbps (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:videoBitrateKbps: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProfile) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFps() {
		if err := oprot.WriteFieldBegin("fps", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fps: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Fps)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fps (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fps: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProfile) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetResolution() {
		if err := oprot.WriteFieldBegin("resolution", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resolution: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Resolution)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.resolution (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resolution: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProfile) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudioBitrateKbps() {
		if err := oprot.WriteFieldBegin("audioBitrateKbps", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:audioBitrateKbps: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AudioBitrateKbps)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.audioBitrateKbps (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:audioBitrateKbps: ", p), err)
		}
	}
	return err
}

func (p *TMCMediaProfile) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCMediaProfile(%+v)", *p)
}

// Attributes:
//  - FileSize
//  - FarmId
type TMCFileSizeTranscode struct {
	FileSize *int32 `thrift:"fileSize,1" db:"fileSize" json:"fileSize,omitempty"`
	FarmId   *int32 `thrift:"farmId,2" db:"farmId" json:"farmId,omitempty"`
}

func NewTMCFileSizeTranscode() *TMCFileSizeTranscode {
	return &TMCFileSizeTranscode{}
}

var TMCFileSizeTranscode_FileSize_DEFAULT int32

func (p *TMCFileSizeTranscode) GetFileSize() int32 {
	if !p.IsSetFileSize() {
		return TMCFileSizeTranscode_FileSize_DEFAULT
	}
	return *p.FileSize
}

var TMCFileSizeTranscode_FarmId_DEFAULT int32

func (p *TMCFileSizeTranscode) GetFarmId() int32 {
	if !p.IsSetFarmId() {
		return TMCFileSizeTranscode_FarmId_DEFAULT
	}
	return *p.FarmId
}
func (p *TMCFileSizeTranscode) IsSetFileSize() bool {
	return p.FileSize != nil
}

func (p *TMCFileSizeTranscode) IsSetFarmId() bool {
	return p.FarmId != nil
}

func (p *TMCFileSizeTranscode) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCFileSizeTranscode) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FileSize = &v
	}
	return nil
}

func (p *TMCFileSizeTranscode) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.FarmId = &v
	}
	return nil
}

func (p *TMCFileSizeTranscode) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCFileSizeTranscode"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCFileSizeTranscode) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileSize() {
		if err := oprot.WriteFieldBegin("fileSize", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FileSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileSize (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileSize: ", p), err)
		}
	}
	return err
}

func (p *TMCFileSizeTranscode) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFarmId() {
		if err := oprot.WriteFieldBegin("farmId", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:farmId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FarmId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.farmId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:farmId: ", p), err)
		}
	}
	return err
}

func (p *TMCFileSizeTranscode) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCFileSizeTranscode(%+v)", *p)
}

// Attributes:
//  - AppId
//  - AppName
//  - AppKey
//  - AppType
//  - StorageId
//  - Domain
//  - FarmProcessId
//  - MapFormatQualityStorage
//  - MapProfile
//  - FarmProcessBySize
//  - SecureLinkExpireBf
//  - SecureLinkExpireHls
//  - StorageForMaxQuality
//  - StorageForMinQuality
//  - VideoKeyframeInterval
//  - UseOriginDomain
//  - UseHttps
//  - AppPermission
//  - IsInternalApp
//  - MinInputQuality
//  - MinInputAudioQuality
//  - VideoPreset
type TMCAppMedia struct {
	AppId         int32   `thrift:"appId,1,required" db:"appId" json:"appId"`
	AppName       string  `thrift:"appName,2,required" db:"appName" json:"appName"`
	AppKey        string  `thrift:"appKey,3,required" db:"appKey" json:"appKey"`
	AppType       *int32  `thrift:"appType,4" db:"appType" json:"appType,omitempty"`
	StorageId     *int32  `thrift:"storageId,5" db:"storageId" json:"storageId,omitempty"`
	Domain        *string `thrift:"domain,6" db:"domain" json:"domain,omitempty"`
	FarmProcessId *int32  `thrift:"farmProcessId,7" db:"farmProcessId" json:"farmProcessId,omitempty"`
	// unused fields # 8 to 9
	MapFormatQualityStorage map[int32]map[int32]int32 `thrift:"mapFormatQualityStorage,10" db:"mapFormatQualityStorage" json:"mapFormatQualityStorage,omitempty"`
	// unused fields # 11 to 20
	MapProfile            map[string]*TMCMediaProfile `thrift:"mapProfile,21" db:"mapProfile" json:"mapProfile,omitempty"`
	FarmProcessBySize     []*TMCFileSizeTranscode     `thrift:"farmProcessBySize,22" db:"farmProcessBySize" json:"farmProcessBySize,omitempty"`
	SecureLinkExpireBf    *int32                      `thrift:"secureLinkExpireBf,23" db:"secureLinkExpireBf" json:"secureLinkExpireBf,omitempty"`
	SecureLinkExpireHls   *int32                      `thrift:"secureLinkExpireHls,24" db:"secureLinkExpireHls" json:"secureLinkExpireHls,omitempty"`
	StorageForMaxQuality  *int32                      `thrift:"storageForMaxQuality,25" db:"storageForMaxQuality" json:"storageForMaxQuality,omitempty"`
	StorageForMinQuality  *int32                      `thrift:"storageForMinQuality,26" db:"storageForMinQuality" json:"storageForMinQuality,omitempty"`
	VideoKeyframeInterval *int32                      `thrift:"videoKeyframeInterval,27" db:"videoKeyframeInterval" json:"videoKeyframeInterval,omitempty"`
	UseOriginDomain       *bool                       `thrift:"useOriginDomain,28" db:"useOriginDomain" json:"useOriginDomain,omitempty"`
	UseHttps              *bool                       `thrift:"useHttps,29" db:"useHttps" json:"useHttps,omitempty"`
	AppPermission         map[int32][]int32           `thrift:"appPermission,30" db:"appPermission" json:"appPermission,omitempty"`
	// unused fields # 31 to 33
	IsInternalApp        *bool  `thrift:"isInternalApp,34" db:"isInternalApp" json:"isInternalApp,omitempty"`
	MinInputQuality      *int32 `thrift:"minInputQuality,35" db:"minInputQuality" json:"minInputQuality,omitempty"`
	MinInputAudioQuality *int32 `thrift:"minInputAudioQuality,36" db:"minInputAudioQuality" json:"minInputAudioQuality,omitempty"`
	VideoPreset          *int32 `thrift:"videoPreset,37" db:"videoPreset" json:"videoPreset,omitempty"`
}

func NewTMCAppMedia() *TMCAppMedia {
	return &TMCAppMedia{}
}

func (p *TMCAppMedia) GetAppId() int32 {
	return p.AppId
}

func (p *TMCAppMedia) GetAppName() string {
	return p.AppName
}

func (p *TMCAppMedia) GetAppKey() string {
	return p.AppKey
}

var TMCAppMedia_AppType_DEFAULT int32

func (p *TMCAppMedia) GetAppType() int32 {
	if !p.IsSetAppType() {
		return TMCAppMedia_AppType_DEFAULT
	}
	return *p.AppType
}

var TMCAppMedia_StorageId_DEFAULT int32

func (p *TMCAppMedia) GetStorageId() int32 {
	if !p.IsSetStorageId() {
		return TMCAppMedia_StorageId_DEFAULT
	}
	return *p.StorageId
}

var TMCAppMedia_Domain_DEFAULT string

func (p *TMCAppMedia) GetDomain() string {
	if !p.IsSetDomain() {
		return TMCAppMedia_Domain_DEFAULT
	}
	return *p.Domain
}

var TMCAppMedia_FarmProcessId_DEFAULT int32

func (p *TMCAppMedia) GetFarmProcessId() int32 {
	if !p.IsSetFarmProcessId() {
		return TMCAppMedia_FarmProcessId_DEFAULT
	}
	return *p.FarmProcessId
}

var TMCAppMedia_MapFormatQualityStorage_DEFAULT map[int32]map[int32]int32

func (p *TMCAppMedia) GetMapFormatQualityStorage() map[int32]map[int32]int32 {
	return p.MapFormatQualityStorage
}

var TMCAppMedia_MapProfile_DEFAULT map[string]*TMCMediaProfile

func (p *TMCAppMedia) GetMapProfile() map[string]*TMCMediaProfile {
	return p.MapProfile
}

var TMCAppMedia_FarmProcessBySize_DEFAULT []*TMCFileSizeTranscode

func (p *TMCAppMedia) GetFarmProcessBySize() []*TMCFileSizeTranscode {
	return p.FarmProcessBySize
}

var TMCAppMedia_SecureLinkExpireBf_DEFAULT int32

func (p *TMCAppMedia) GetSecureLinkExpireBf() int32 {
	if !p.IsSetSecureLinkExpireBf() {
		return TMCAppMedia_SecureLinkExpireBf_DEFAULT
	}
	return *p.SecureLinkExpireBf
}

var TMCAppMedia_SecureLinkExpireHls_DEFAULT int32

func (p *TMCAppMedia) GetSecureLinkExpireHls() int32 {
	if !p.IsSetSecureLinkExpireHls() {
		return TMCAppMedia_SecureLinkExpireHls_DEFAULT
	}
	return *p.SecureLinkExpireHls
}

var TMCAppMedia_StorageForMaxQuality_DEFAULT int32

func (p *TMCAppMedia) GetStorageForMaxQuality() int32 {
	if !p.IsSetStorageForMaxQuality() {
		return TMCAppMedia_StorageForMaxQuality_DEFAULT
	}
	return *p.StorageForMaxQuality
}

var TMCAppMedia_StorageForMinQuality_DEFAULT int32

func (p *TMCAppMedia) GetStorageForMinQuality() int32 {
	if !p.IsSetStorageForMinQuality() {
		return TMCAppMedia_StorageForMinQuality_DEFAULT
	}
	return *p.StorageForMinQuality
}

var TMCAppMedia_VideoKeyframeInterval_DEFAULT int32

func (p *TMCAppMedia) GetVideoKeyframeInterval() int32 {
	if !p.IsSetVideoKeyframeInterval() {
		return TMCAppMedia_VideoKeyframeInterval_DEFAULT
	}
	return *p.VideoKeyframeInterval
}

var TMCAppMedia_UseOriginDomain_DEFAULT bool

func (p *TMCAppMedia) GetUseOriginDomain() bool {
	if !p.IsSetUseOriginDomain() {
		return TMCAppMedia_UseOriginDomain_DEFAULT
	}
	return *p.UseOriginDomain
}

var TMCAppMedia_UseHttps_DEFAULT bool

func (p *TMCAppMedia) GetUseHttps() bool {
	if !p.IsSetUseHttps() {
		return TMCAppMedia_UseHttps_DEFAULT
	}
	return *p.UseHttps
}

var TMCAppMedia_AppPermission_DEFAULT map[int32][]int32

func (p *TMCAppMedia) GetAppPermission() map[int32][]int32 {
	return p.AppPermission
}

var TMCAppMedia_IsInternalApp_DEFAULT bool

func (p *TMCAppMedia) GetIsInternalApp() bool {
	if !p.IsSetIsInternalApp() {
		return TMCAppMedia_IsInternalApp_DEFAULT
	}
	return *p.IsInternalApp
}

var TMCAppMedia_MinInputQuality_DEFAULT int32

func (p *TMCAppMedia) GetMinInputQuality() int32 {
	if !p.IsSetMinInputQuality() {
		return TMCAppMedia_MinInputQuality_DEFAULT
	}
	return *p.MinInputQuality
}

var TMCAppMedia_MinInputAudioQuality_DEFAULT int32

func (p *TMCAppMedia) GetMinInputAudioQuality() int32 {
	if !p.IsSetMinInputAudioQuality() {
		return TMCAppMedia_MinInputAudioQuality_DEFAULT
	}
	return *p.MinInputAudioQuality
}

var TMCAppMedia_VideoPreset_DEFAULT int32

func (p *TMCAppMedia) GetVideoPreset() int32 {
	if !p.IsSetVideoPreset() {
		return TMCAppMedia_VideoPreset_DEFAULT
	}
	return *p.VideoPreset
}
func (p *TMCAppMedia) IsSetAppType() bool {
	return p.AppType != nil
}

func (p *TMCAppMedia) IsSetStorageId() bool {
	return p.StorageId != nil
}

func (p *TMCAppMedia) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *TMCAppMedia) IsSetFarmProcessId() bool {
	return p.FarmProcessId != nil
}

func (p *TMCAppMedia) IsSetMapFormatQualityStorage() bool {
	return p.MapFormatQualityStorage != nil
}

func (p *TMCAppMedia) IsSetMapProfile() bool {
	return p.MapProfile != nil
}

func (p *TMCAppMedia) IsSetFarmProcessBySize() bool {
	return p.FarmProcessBySize != nil
}

func (p *TMCAppMedia) IsSetSecureLinkExpireBf() bool {
	return p.SecureLinkExpireBf != nil
}

func (p *TMCAppMedia) IsSetSecureLinkExpireHls() bool {
	return p.SecureLinkExpireHls != nil
}

func (p *TMCAppMedia) IsSetStorageForMaxQuality() bool {
	return p.StorageForMaxQuality != nil
}

func (p *TMCAppMedia) IsSetStorageForMinQuality() bool {
	return p.StorageForMinQuality != nil
}

func (p *TMCAppMedia) IsSetVideoKeyframeInterval() bool {
	return p.VideoKeyframeInterval != nil
}

func (p *TMCAppMedia) IsSetUseOriginDomain() bool {
	return p.UseOriginDomain != nil
}

func (p *TMCAppMedia) IsSetUseHttps() bool {
	return p.UseHttps != nil
}

func (p *TMCAppMedia) IsSetAppPermission() bool {
	return p.AppPermission != nil
}

func (p *TMCAppMedia) IsSetIsInternalApp() bool {
	return p.IsInternalApp != nil
}

func (p *TMCAppMedia) IsSetMinInputQuality() bool {
	return p.MinInputQuality != nil
}

func (p *TMCAppMedia) IsSetMinInputAudioQuality() bool {
	return p.MinInputAudioQuality != nil
}

func (p *TMCAppMedia) IsSetVideoPreset() bool {
	return p.VideoPreset != nil
}

func (p *TMCAppMedia) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetAppId bool = false
	var issetAppName bool = false
	var issetAppKey bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
				issetAppId = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
				issetAppName = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
				issetAppKey = true
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 25:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField25(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 26:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField26(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 27:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField27(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 28:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField28(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 29:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField29(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 34:
			if fieldTypeId == thrift.BOOL {
				if err := p.ReadField34(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 35:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField35(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 36:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField36(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 37:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField37(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetAppId {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppId is not set"))
	}
	if !issetAppName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppName is not set"))
	}
	if !issetAppKey {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AppKey is not set"))
	}
	return nil
}

func (p *TMCAppMedia) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.AppId = v
	}
	return nil
}

func (p *TMCAppMedia) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.AppName = v
	}
	return nil
}

func (p *TMCAppMedia) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AppKey = v
	}
	return nil
}

func (p *TMCAppMedia) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AppType = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StorageId = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.FarmProcessId = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32]map[int32]int32, size)
	p.MapFormatQualityStorage = tMap
	for i := 0; i < size; i++ {
		var _key46 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key46 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return thrift.PrependError("error reading map begin: ", err)
		}
		tMap := make(map[int32]int32, size)
		_val47 := tMap
		for i := 0; i < size; i++ {
			var _key48 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_key48 = v
			}
			var _val49 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_val49 = v
			}
			_val47[_key48] = _val49
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return thrift.PrependError("error reading map end: ", err)
		}
		p.MapFormatQualityStorage[_key46] = _val47
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCAppMedia) ReadField21(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*TMCMediaProfile, size)
	p.MapProfile = tMap
	for i := 0; i < size; i++ {
		var _key50 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key50 = v
		}
		_val51 := &TMCMediaProfile{}
		if err := _val51.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val51), err)
		}
		p.MapProfile[_key50] = _val51
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCAppMedia) ReadField22(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TMCFileSizeTranscode, 0, size)
	p.FarmProcessBySize = tSlice
	for i := 0; i < size; i++ {
		_elem52 := &TMCFileSizeTranscode{}
		if err := _elem52.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem52), err)
		}
		p.FarmProcessBySize = append(p.FarmProcessBySize, _elem52)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCAppMedia) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.SecureLinkExpireBf = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.SecureLinkExpireHls = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField25(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 25: ", err)
	} else {
		p.StorageForMaxQuality = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField26(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 26: ", err)
	} else {
		p.StorageForMinQuality = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField27(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 27: ", err)
	} else {
		p.VideoKeyframeInterval = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField28(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 28: ", err)
	} else {
		p.UseOriginDomain = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField29(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 29: ", err)
	} else {
		p.UseHttps = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField30(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int32][]int32, size)
	p.AppPermission = tMap
	for i := 0; i < size; i++ {
		var _key53 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key53 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make([]int32, 0, size)
		_val54 := tSet
		for i := 0; i < size; i++ {
			var _elem55 int32
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem55 = v
			}
			_val54 = append(_val54, _elem55)
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.AppPermission[_key53] = _val54
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TMCAppMedia) ReadField34(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 34: ", err)
	} else {
		p.IsInternalApp = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.MinInputQuality = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField36(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 36: ", err)
	} else {
		p.MinInputAudioQuality = &v
	}
	return nil
}

func (p *TMCAppMedia) ReadField37(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 37: ", err)
	} else {
		p.VideoPreset = &v
	}
	return nil
}

func (p *TMCAppMedia) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCAppMedia"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField25(oprot); err != nil {
			return err
		}
		if err := p.writeField26(oprot); err != nil {
			return err
		}
		if err := p.writeField27(oprot); err != nil {
			return err
		}
		if err := p.writeField28(oprot); err != nil {
			return err
		}
		if err := p.writeField29(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
		if err := p.writeField34(oprot); err != nil {
			return err
		}
		if err := p.writeField35(oprot); err != nil {
			return err
		}
		if err := p.writeField36(oprot); err != nil {
			return err
		}
		if err := p.writeField37(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCAppMedia) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appId", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appId: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.AppId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appId: ", p), err)
	}
	return err
}

func (p *TMCAppMedia) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appName: ", p), err)
	}
	return err
}

func (p *TMCAppMedia) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appKey", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appKey: ", p), err)
	}
	if err := oprot.WriteString(string(p.AppKey)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.appKey (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appKey: ", p), err)
	}
	return err
}

func (p *TMCAppMedia) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppType() {
		if err := oprot.WriteFieldBegin("appType", thrift.I32, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.AppType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.appType (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appType: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageId() {
		if err := oprot.WriteFieldBegin("storageId", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:storageId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StorageId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storageId (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:storageId: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin("domain", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:domain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:domain: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFarmProcessId() {
		if err := oprot.WriteFieldBegin("farmProcessId", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:farmProcessId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FarmProcessId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.farmProcessId (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:farmProcessId: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapFormatQualityStorage() {
		if err := oprot.WriteFieldBegin("mapFormatQualityStorage", thrift.MAP, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:mapFormatQualityStorage: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.MAP, len(p.MapFormatQualityStorage)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapFormatQualityStorage {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing map begin: ", err)
			}
			for k, v := range v {
				if err := oprot.WriteI32(int32(k)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return thrift.PrependError("error writing map end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:mapFormatQualityStorage: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetMapProfile() {
		if err := oprot.WriteFieldBegin("mapProfile", thrift.MAP, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:mapProfile: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.MapProfile)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.MapProfile {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:mapProfile: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetFarmProcessBySize() {
		if err := oprot.WriteFieldBegin("farmProcessBySize", thrift.LIST, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:farmProcessBySize: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FarmProcessBySize)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.FarmProcessBySize {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:farmProcessBySize: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecureLinkExpireBf() {
		if err := oprot.WriteFieldBegin("secureLinkExpireBf", thrift.I32, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:secureLinkExpireBf: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SecureLinkExpireBf)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secureLinkExpireBf (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:secureLinkExpireBf: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecureLinkExpireHls() {
		if err := oprot.WriteFieldBegin("secureLinkExpireHls", thrift.I32, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:secureLinkExpireHls: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.SecureLinkExpireHls)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.secureLinkExpireHls (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:secureLinkExpireHls: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageForMaxQuality() {
		if err := oprot.WriteFieldBegin("storageForMaxQuality", thrift.I32, 25); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:storageForMaxQuality: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StorageForMaxQuality)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storageForMaxQuality (25) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 25:storageForMaxQuality: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageForMinQuality() {
		if err := oprot.WriteFieldBegin("storageForMinQuality", thrift.I32, 26); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:storageForMinQuality: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StorageForMinQuality)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storageForMinQuality (26) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 26:storageForMinQuality: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoKeyframeInterval() {
		if err := oprot.WriteFieldBegin("videoKeyframeInterval", thrift.I32, 27); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:videoKeyframeInterval: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.VideoKeyframeInterval)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.videoKeyframeInterval (27) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 27:videoKeyframeInterval: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseOriginDomain() {
		if err := oprot.WriteFieldBegin("useOriginDomain", thrift.BOOL, 28); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:useOriginDomain: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UseOriginDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.useOriginDomain (28) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 28:useOriginDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetUseHttps() {
		if err := oprot.WriteFieldBegin("useHttps", thrift.BOOL, 29); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:useHttps: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.UseHttps)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.useHttps (29) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 29:useHttps: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppPermission() {
		if err := oprot.WriteFieldBegin("appPermission", thrift.MAP, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:appPermission: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I32, thrift.SET, len(p.AppPermission)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.AppPermission {
			if err := oprot.WriteI32(int32(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for i := 0; i < len(v); i++ {
				for j := i + 1; j < len(v); j++ {
					if reflect.DeepEqual(v[i], v[j]) {
						return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v[i]))
					}
				}
			}
			for _, v := range v {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:appPermission: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField34(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsInternalApp() {
		if err := oprot.WriteFieldBegin("isInternalApp", thrift.BOOL, 34); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:isInternalApp: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.IsInternalApp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.isInternalApp (34) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 34:isInternalApp: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinInputQuality() {
		if err := oprot.WriteFieldBegin("minInputQuality", thrift.I32, 35); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:minInputQuality: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MinInputQuality)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.minInputQuality (35) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 35:minInputQuality: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField36(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinInputAudioQuality() {
		if err := oprot.WriteFieldBegin("minInputAudioQuality", thrift.I32, 36); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:minInputAudioQuality: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.MinInputAudioQuality)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.minInputAudioQuality (36) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 36:minInputAudioQuality: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) writeField37(oprot thrift.TProtocol) (err error) {
	if p.IsSetVideoPreset() {
		if err := oprot.WriteFieldBegin("videoPreset", thrift.I32, 37); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:videoPreset: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.VideoPreset)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.videoPreset (37) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 37:videoPreset: ", p), err)
		}
	}
	return err
}

func (p *TMCAppMedia) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCAppMedia(%+v)", *p)
}

// Attributes:
//  - Address
//  - Port
type THostInfo struct {
	Address *string `thrift:"address,1" db:"address" json:"address,omitempty"`
	Port    *int32  `thrift:"port,2" db:"port" json:"port,omitempty"`
}

func NewTHostInfo() *THostInfo {
	return &THostInfo{}
}

var THostInfo_Address_DEFAULT string

func (p *THostInfo) GetAddress() string {
	if !p.IsSetAddress() {
		return THostInfo_Address_DEFAULT
	}
	return *p.Address
}

var THostInfo_Port_DEFAULT int32

func (p *THostInfo) GetPort() int32 {
	if !p.IsSetPort() {
		return THostInfo_Port_DEFAULT
	}
	return *p.Port
}
func (p *THostInfo) IsSetAddress() bool {
	return p.Address != nil
}

func (p *THostInfo) IsSetPort() bool {
	return p.Port != nil
}

func (p *THostInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *THostInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Address = &v
	}
	return nil
}

func (p *THostInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Port = &v
	}
	return nil
}

func (p *THostInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("THostInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *THostInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddress() {
		if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Address)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err)
		}
	}
	return err
}

func (p *THostInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPort() {
		if err := oprot.WriteFieldBegin("port", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:port: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Port)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.port (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:port: ", p), err)
		}
	}
	return err
}

func (p *THostInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("THostInfo(%+v)", *p)
}

// Attributes:
//  - ReadHosts
//  - ReadScaleMode
//  - ReadSource
//  - ReadAuth
//  - ReadTimeout
//  - WriteHosts
//  - WriteScaleMode
//  - WriteSource
//  - WriteAuth
//  - WriteTimeout
//  - CfgHost
type TServiceInfo struct {
	ReadHosts     []*THostInfo `thrift:"readHosts,1" db:"readHosts" json:"readHosts,omitempty"`
	ReadScaleMode *int32       `thrift:"readScaleMode,2" db:"readScaleMode" json:"readScaleMode,omitempty"`
	ReadSource    *string      `thrift:"readSource,3" db:"readSource" json:"readSource,omitempty"`
	ReadAuth      *string      `thrift:"readAuth,4" db:"readAuth" json:"readAuth,omitempty"`
	ReadTimeout   *int32       `thrift:"readTimeout,5" db:"readTimeout" json:"readTimeout,omitempty"`
	// unused fields # 6 to 19
	WriteHosts     []*THostInfo `thrift:"writeHosts,20" db:"writeHosts" json:"writeHosts,omitempty"`
	WriteScaleMode *int32       `thrift:"writeScaleMode,21" db:"writeScaleMode" json:"writeScaleMode,omitempty"`
	WriteSource    *string      `thrift:"writeSource,22" db:"writeSource" json:"writeSource,omitempty"`
	WriteAuth      *string      `thrift:"writeAuth,23" db:"writeAuth" json:"writeAuth,omitempty"`
	WriteTimeout   *int32       `thrift:"writeTimeout,24" db:"writeTimeout" json:"writeTimeout,omitempty"`
	// unused fields # 25 to 29
	CfgHost *THostInfo `thrift:"cfgHost,30" db:"cfgHost" json:"cfgHost,omitempty"`
}

func NewTServiceInfo() *TServiceInfo {
	return &TServiceInfo{}
}

var TServiceInfo_ReadHosts_DEFAULT []*THostInfo

func (p *TServiceInfo) GetReadHosts() []*THostInfo {
	return p.ReadHosts
}

var TServiceInfo_ReadScaleMode_DEFAULT int32

func (p *TServiceInfo) GetReadScaleMode() int32 {
	if !p.IsSetReadScaleMode() {
		return TServiceInfo_ReadScaleMode_DEFAULT
	}
	return *p.ReadScaleMode
}

var TServiceInfo_ReadSource_DEFAULT string

func (p *TServiceInfo) GetReadSource() string {
	if !p.IsSetReadSource() {
		return TServiceInfo_ReadSource_DEFAULT
	}
	return *p.ReadSource
}

var TServiceInfo_ReadAuth_DEFAULT string

func (p *TServiceInfo) GetReadAuth() string {
	if !p.IsSetReadAuth() {
		return TServiceInfo_ReadAuth_DEFAULT
	}
	return *p.ReadAuth
}

var TServiceInfo_ReadTimeout_DEFAULT int32

func (p *TServiceInfo) GetReadTimeout() int32 {
	if !p.IsSetReadTimeout() {
		return TServiceInfo_ReadTimeout_DEFAULT
	}
	return *p.ReadTimeout
}

var TServiceInfo_WriteHosts_DEFAULT []*THostInfo

func (p *TServiceInfo) GetWriteHosts() []*THostInfo {
	return p.WriteHosts
}

var TServiceInfo_WriteScaleMode_DEFAULT int32

func (p *TServiceInfo) GetWriteScaleMode() int32 {
	if !p.IsSetWriteScaleMode() {
		return TServiceInfo_WriteScaleMode_DEFAULT
	}
	return *p.WriteScaleMode
}

var TServiceInfo_WriteSource_DEFAULT string

func (p *TServiceInfo) GetWriteSource() string {
	if !p.IsSetWriteSource() {
		return TServiceInfo_WriteSource_DEFAULT
	}
	return *p.WriteSource
}

var TServiceInfo_WriteAuth_DEFAULT string

func (p *TServiceInfo) GetWriteAuth() string {
	if !p.IsSetWriteAuth() {
		return TServiceInfo_WriteAuth_DEFAULT
	}
	return *p.WriteAuth
}

var TServiceInfo_WriteTimeout_DEFAULT int32

func (p *TServiceInfo) GetWriteTimeout() int32 {
	if !p.IsSetWriteTimeout() {
		return TServiceInfo_WriteTimeout_DEFAULT
	}
	return *p.WriteTimeout
}

var TServiceInfo_CfgHost_DEFAULT *THostInfo

func (p *TServiceInfo) GetCfgHost() *THostInfo {
	if !p.IsSetCfgHost() {
		return TServiceInfo_CfgHost_DEFAULT
	}
	return p.CfgHost
}
func (p *TServiceInfo) IsSetReadHosts() bool {
	return p.ReadHosts != nil
}

func (p *TServiceInfo) IsSetReadScaleMode() bool {
	return p.ReadScaleMode != nil
}

func (p *TServiceInfo) IsSetReadSource() bool {
	return p.ReadSource != nil
}

func (p *TServiceInfo) IsSetReadAuth() bool {
	return p.ReadAuth != nil
}

func (p *TServiceInfo) IsSetReadTimeout() bool {
	return p.ReadTimeout != nil
}

func (p *TServiceInfo) IsSetWriteHosts() bool {
	return p.WriteHosts != nil
}

func (p *TServiceInfo) IsSetWriteScaleMode() bool {
	return p.WriteScaleMode != nil
}

func (p *TServiceInfo) IsSetWriteSource() bool {
	return p.WriteSource != nil
}

func (p *TServiceInfo) IsSetWriteAuth() bool {
	return p.WriteAuth != nil
}

func (p *TServiceInfo) IsSetWriteTimeout() bool {
	return p.WriteTimeout != nil
}

func (p *TServiceInfo) IsSetCfgHost() bool {
	return p.CfgHost != nil
}

func (p *TServiceInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField21(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 24:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField24(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField30(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TServiceInfo) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*THostInfo, 0, size)
	p.ReadHosts = tSlice
	for i := 0; i < size; i++ {
		_elem56 := &THostInfo{}
		if err := _elem56.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
		}
		p.ReadHosts = append(p.ReadHosts, _elem56)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TServiceInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ReadScaleMode = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ReadSource = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ReadAuth = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.ReadTimeout = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField20(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*THostInfo, 0, size)
	p.WriteHosts = tSlice
	for i := 0; i < size; i++ {
		_elem57 := &THostInfo{}
		if err := _elem57.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem57), err)
		}
		p.WriteHosts = append(p.WriteHosts, _elem57)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TServiceInfo) ReadField21(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 21: ", err)
	} else {
		p.WriteScaleMode = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.WriteSource = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.WriteAuth = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField24(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 24: ", err)
	} else {
		p.WriteTimeout = &v
	}
	return nil
}

func (p *TServiceInfo) ReadField30(iprot thrift.TProtocol) error {
	p.CfgHost = &THostInfo{}
	if err := p.CfgHost.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CfgHost), err)
	}
	return nil
}

func (p *TServiceInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TServiceInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
		if err := p.writeField21(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
		if err := p.writeField24(oprot); err != nil {
			return err
		}
		if err := p.writeField30(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TServiceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadHosts() {
		if err := oprot.WriteFieldBegin("readHosts", thrift.LIST, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:readHosts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ReadHosts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.ReadHosts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:readHosts: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadScaleMode() {
		if err := oprot.WriteFieldBegin("readScaleMode", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:readScaleMode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReadScaleMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readScaleMode (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:readScaleMode: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadSource() {
		if err := oprot.WriteFieldBegin("readSource", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:readSource: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReadSource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readSource (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:readSource: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadAuth() {
		if err := oprot.WriteFieldBegin("readAuth", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:readAuth: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ReadAuth)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readAuth (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:readAuth: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReadTimeout() {
		if err := oprot.WriteFieldBegin("readTimeout", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:readTimeout: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ReadTimeout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.readTimeout (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:readTimeout: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteHosts() {
		if err := oprot.WriteFieldBegin("writeHosts", thrift.LIST, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:writeHosts: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.WriteHosts)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.WriteHosts {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:writeHosts: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteScaleMode() {
		if err := oprot.WriteFieldBegin("writeScaleMode", thrift.I32, 21); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:writeScaleMode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.WriteScaleMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeScaleMode (21) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 21:writeScaleMode: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteSource() {
		if err := oprot.WriteFieldBegin("writeSource", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:writeSource: ", p), err)
		}
		if err := oprot.WriteString(string(*p.WriteSource)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeSource (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:writeSource: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteAuth() {
		if err := oprot.WriteFieldBegin("writeAuth", thrift.STRING, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:writeAuth: ", p), err)
		}
		if err := oprot.WriteString(string(*p.WriteAuth)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeAuth (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:writeAuth: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteTimeout() {
		if err := oprot.WriteFieldBegin("writeTimeout", thrift.I32, 24); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:writeTimeout: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.WriteTimeout)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeTimeout (24) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 24:writeTimeout: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetCfgHost() {
		if err := oprot.WriteFieldBegin("cfgHost", thrift.STRUCT, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:cfgHost: ", p), err)
		}
		if err := p.CfgHost.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CfgHost), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:cfgHost: ", p), err)
		}
	}
	return err
}

func (p *TServiceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TServiceInfo(%+v)", *p)
}

// Attributes:
//  - ChunkId
//  - ServiceInfo
//  - Name
type TChunkInfo struct {
	ChunkId     *int32        `thrift:"chunkId,1" db:"chunkId" json:"chunkId,omitempty"`
	ServiceInfo *TServiceInfo `thrift:"serviceInfo,2" db:"serviceInfo" json:"serviceInfo,omitempty"`
	// unused fields # 3 to 19
	Name *string `thrift:"name,20" db:"name" json:"name,omitempty"`
}

func NewTChunkInfo() *TChunkInfo {
	return &TChunkInfo{}
}

var TChunkInfo_ChunkId_DEFAULT int32

func (p *TChunkInfo) GetChunkId() int32 {
	if !p.IsSetChunkId() {
		return TChunkInfo_ChunkId_DEFAULT
	}
	return *p.ChunkId
}

var TChunkInfo_ServiceInfo_DEFAULT *TServiceInfo

func (p *TChunkInfo) GetServiceInfo() *TServiceInfo {
	if !p.IsSetServiceInfo() {
		return TChunkInfo_ServiceInfo_DEFAULT
	}
	return p.ServiceInfo
}

var TChunkInfo_Name_DEFAULT string

func (p *TChunkInfo) GetName() string {
	if !p.IsSetName() {
		return TChunkInfo_Name_DEFAULT
	}
	return *p.Name
}
func (p *TChunkInfo) IsSetChunkId() bool {
	return p.ChunkId != nil
}

func (p *TChunkInfo) IsSetServiceInfo() bool {
	return p.ServiceInfo != nil
}

func (p *TChunkInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *TChunkInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TChunkInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ChunkId = &v
	}
	return nil
}

func (p *TChunkInfo) ReadField2(iprot thrift.TProtocol) error {
	p.ServiceInfo = &TServiceInfo{}
	if err := p.ServiceInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServiceInfo), err)
	}
	return nil
}

func (p *TChunkInfo) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TChunkInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TChunkInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TChunkInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetChunkId() {
		if err := oprot.WriteFieldBegin("chunkId", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chunkId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ChunkId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.chunkId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chunkId: ", p), err)
		}
	}
	return err
}

func (p *TChunkInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetServiceInfo() {
		if err := oprot.WriteFieldBegin("serviceInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceInfo: ", p), err)
		}
		if err := p.ServiceInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServiceInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceInfo: ", p), err)
		}
	}
	return err
}

func (p *TChunkInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:name: ", p), err)
		}
	}
	return err
}

func (p *TChunkInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TChunkInfo(%+v)", *p)
}

// Attributes:
//  - AllChunks
//  - WriteChunks
//  - PlaylistKeyNoise
//  - ChunkKeyNoise
//  - WriteMode
//  - PlaylistV2Info
//  - MasterDomainV2
//  - LevelDomainV2
//  - ChunkDomainV2
//  - ChunkDomainWrapper
//  - MasterOrgDomain
//  - LevelOrgDomain
type TMCHLSInfo struct {
	// unused fields # 1 to 3
	AllChunks   []int32 `thrift:"allChunks,4" db:"allChunks" json:"allChunks,omitempty"`
	WriteChunks []int32 `thrift:"writeChunks,5" db:"writeChunks" json:"writeChunks,omitempty"`
	// unused fields # 6 to 8
	PlaylistKeyNoise *int64 `thrift:"playlistKeyNoise,9" db:"playlistKeyNoise" json:"playlistKeyNoise,omitempty"`
	ChunkKeyNoise    *int64 `thrift:"chunkKeyNoise,10" db:"chunkKeyNoise" json:"chunkKeyNoise,omitempty"`
	// unused fields # 11 to 12
	WriteMode          *int16        `thrift:"writeMode,13" db:"writeMode" json:"writeMode,omitempty"`
	PlaylistV2Info     *TServiceInfo `thrift:"playlistV2Info,14" db:"playlistV2Info" json:"playlistV2Info,omitempty"`
	MasterDomainV2     *string       `thrift:"masterDomainV2,15" db:"masterDomainV2" json:"masterDomainV2,omitempty"`
	LevelDomainV2      *string       `thrift:"levelDomainV2,16" db:"levelDomainV2" json:"levelDomainV2,omitempty"`
	ChunkDomainV2      *string       `thrift:"chunkDomainV2,17" db:"chunkDomainV2" json:"chunkDomainV2,omitempty"`
	ChunkDomainWrapper *string       `thrift:"chunkDomainWrapper,18" db:"chunkDomainWrapper" json:"chunkDomainWrapper,omitempty"`
	// unused fields # 19 to 21
	MasterOrgDomain *string `thrift:"masterOrgDomain,22" db:"masterOrgDomain" json:"masterOrgDomain,omitempty"`
	LevelOrgDomain  *string `thrift:"levelOrgDomain,23" db:"levelOrgDomain" json:"levelOrgDomain,omitempty"`
}

func NewTMCHLSInfo() *TMCHLSInfo {
	return &TMCHLSInfo{}
}

var TMCHLSInfo_AllChunks_DEFAULT []int32

func (p *TMCHLSInfo) GetAllChunks() []int32 {
	return p.AllChunks
}

var TMCHLSInfo_WriteChunks_DEFAULT []int32

func (p *TMCHLSInfo) GetWriteChunks() []int32 {
	return p.WriteChunks
}

var TMCHLSInfo_PlaylistKeyNoise_DEFAULT int64

func (p *TMCHLSInfo) GetPlaylistKeyNoise() int64 {
	if !p.IsSetPlaylistKeyNoise() {
		return TMCHLSInfo_PlaylistKeyNoise_DEFAULT
	}
	return *p.PlaylistKeyNoise
}

var TMCHLSInfo_ChunkKeyNoise_DEFAULT int64

func (p *TMCHLSInfo) GetChunkKeyNoise() int64 {
	if !p.IsSetChunkKeyNoise() {
		return TMCHLSInfo_ChunkKeyNoise_DEFAULT
	}
	return *p.ChunkKeyNoise
}

var TMCHLSInfo_WriteMode_DEFAULT int16

func (p *TMCHLSInfo) GetWriteMode() int16 {
	if !p.IsSetWriteMode() {
		return TMCHLSInfo_WriteMode_DEFAULT
	}
	return *p.WriteMode
}

var TMCHLSInfo_PlaylistV2Info_DEFAULT *TServiceInfo

func (p *TMCHLSInfo) GetPlaylistV2Info() *TServiceInfo {
	if !p.IsSetPlaylistV2Info() {
		return TMCHLSInfo_PlaylistV2Info_DEFAULT
	}
	return p.PlaylistV2Info
}

var TMCHLSInfo_MasterDomainV2_DEFAULT string

func (p *TMCHLSInfo) GetMasterDomainV2() string {
	if !p.IsSetMasterDomainV2() {
		return TMCHLSInfo_MasterDomainV2_DEFAULT
	}
	return *p.MasterDomainV2
}

var TMCHLSInfo_LevelDomainV2_DEFAULT string

func (p *TMCHLSInfo) GetLevelDomainV2() string {
	if !p.IsSetLevelDomainV2() {
		return TMCHLSInfo_LevelDomainV2_DEFAULT
	}
	return *p.LevelDomainV2
}

var TMCHLSInfo_ChunkDomainV2_DEFAULT string

func (p *TMCHLSInfo) GetChunkDomainV2() string {
	if !p.IsSetChunkDomainV2() {
		return TMCHLSInfo_ChunkDomainV2_DEFAULT
	}
	return *p.ChunkDomainV2
}

var TMCHLSInfo_ChunkDomainWrapper_DEFAULT string

func (p *TMCHLSInfo) GetChunkDomainWrapper() string {
	if !p.IsSetChunkDomainWrapper() {
		return TMCHLSInfo_ChunkDomainWrapper_DEFAULT
	}
	return *p.ChunkDomainWrapper
}

var TMCHLSInfo_MasterOrgDomain_DEFAULT string

func (p *TMCHLSInfo) GetMasterOrgDomain() string {
	if !p.IsSetMasterOrgDomain() {
		return TMCHLSInfo_MasterOrgDomain_DEFAULT
	}
	return *p.MasterOrgDomain
}

var TMCHLSInfo_LevelOrgDomain_DEFAULT string

func (p *TMCHLSInfo) GetLevelOrgDomain() string {
	if !p.IsSetLevelOrgDomain() {
		return TMCHLSInfo_LevelOrgDomain_DEFAULT
	}
	return *p.LevelOrgDomain
}
func (p *TMCHLSInfo) IsSetAllChunks() bool {
	return p.AllChunks != nil
}

func (p *TMCHLSInfo) IsSetWriteChunks() bool {
	return p.WriteChunks != nil
}

func (p *TMCHLSInfo) IsSetPlaylistKeyNoise() bool {
	return p.PlaylistKeyNoise != nil
}

func (p *TMCHLSInfo) IsSetChunkKeyNoise() bool {
	return p.ChunkKeyNoise != nil
}

func (p *TMCHLSInfo) IsSetWriteMode() bool {
	return p.WriteMode != nil
}

func (p *TMCHLSInfo) IsSetPlaylistV2Info() bool {
	return p.PlaylistV2Info != nil
}

func (p *TMCHLSInfo) IsSetMasterDomainV2() bool {
	return p.MasterDomainV2 != nil
}

func (p *TMCHLSInfo) IsSetLevelDomainV2() bool {
	return p.LevelDomainV2 != nil
}

func (p *TMCHLSInfo) IsSetChunkDomainV2() bool {
	return p.ChunkDomainV2 != nil
}

func (p *TMCHLSInfo) IsSetChunkDomainWrapper() bool {
	return p.ChunkDomainWrapper != nil
}

func (p *TMCHLSInfo) IsSetMasterOrgDomain() bool {
	return p.MasterOrgDomain != nil
}

func (p *TMCHLSInfo) IsSetLevelOrgDomain() bool {
	return p.LevelOrgDomain != nil
}

func (p *TMCHLSInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField16(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField17(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 18:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField18(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 22:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField22(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 23:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField23(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCHLSInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.AllChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem58 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem58 = v
		}
		p.AllChunks = append(p.AllChunks, _elem58)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCHLSInfo) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.WriteChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem59 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem59 = v
		}
		p.WriteChunks = append(p.WriteChunks, _elem59)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCHLSInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.PlaylistKeyNoise = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.ChunkKeyNoise = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.WriteMode = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField14(iprot thrift.TProtocol) error {
	p.PlaylistV2Info = &TServiceInfo{}
	if err := p.PlaylistV2Info.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PlaylistV2Info), err)
	}
	return nil
}

func (p *TMCHLSInfo) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.MasterDomainV2 = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 16: ", err)
	} else {
		p.LevelDomainV2 = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 17: ", err)
	} else {
		p.ChunkDomainV2 = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField18(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 18: ", err)
	} else {
		p.ChunkDomainWrapper = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 22: ", err)
	} else {
		p.MasterOrgDomain = &v
	}
	return nil
}

func (p *TMCHLSInfo) ReadField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 23: ", err)
	} else {
		p.LevelOrgDomain = &v
	}
	return nil
}

func (p *TMCHLSInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCHLSInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField16(oprot); err != nil {
			return err
		}
		if err := p.writeField17(oprot); err != nil {
			return err
		}
		if err := p.writeField18(oprot); err != nil {
			return err
		}
		if err := p.writeField22(oprot); err != nil {
			return err
		}
		if err := p.writeField23(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCHLSInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllChunks() {
		if err := oprot.WriteFieldBegin("allChunks", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:allChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.AllChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.AllChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:allChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteChunks() {
		if err := oprot.WriteFieldBegin("writeChunks", thrift.LIST, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:writeChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.WriteChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.WriteChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:writeChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaylistKeyNoise() {
		if err := oprot.WriteFieldBegin("playlistKeyNoise", thrift.I64, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:playlistKeyNoise: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PlaylistKeyNoise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.playlistKeyNoise (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:playlistKeyNoise: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetChunkKeyNoise() {
		if err := oprot.WriteFieldBegin("chunkKeyNoise", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:chunkKeyNoise: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ChunkKeyNoise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.chunkKeyNoise (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:chunkKeyNoise: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteMode() {
		if err := oprot.WriteFieldBegin("writeMode", thrift.I16, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:writeMode: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.WriteMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeMode (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:writeMode: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaylistV2Info() {
		if err := oprot.WriteFieldBegin("playlistV2Info", thrift.STRUCT, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:playlistV2Info: ", p), err)
		}
		if err := p.PlaylistV2Info.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PlaylistV2Info), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:playlistV2Info: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterDomainV2() {
		if err := oprot.WriteFieldBegin("masterDomainV2", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:masterDomainV2: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MasterDomainV2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.masterDomainV2 (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:masterDomainV2: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetLevelDomainV2() {
		if err := oprot.WriteFieldBegin("levelDomainV2", thrift.STRING, 16); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:levelDomainV2: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LevelDomainV2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.levelDomainV2 (16) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 16:levelDomainV2: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetChunkDomainV2() {
		if err := oprot.WriteFieldBegin("chunkDomainV2", thrift.STRING, 17); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:chunkDomainV2: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ChunkDomainV2)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.chunkDomainV2 (17) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 17:chunkDomainV2: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetChunkDomainWrapper() {
		if err := oprot.WriteFieldBegin("chunkDomainWrapper", thrift.STRING, 18); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:chunkDomainWrapper: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ChunkDomainWrapper)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.chunkDomainWrapper (18) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 18:chunkDomainWrapper: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetMasterOrgDomain() {
		if err := oprot.WriteFieldBegin("masterOrgDomain", thrift.STRING, 22); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:masterOrgDomain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.MasterOrgDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.masterOrgDomain (22) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 22:masterOrgDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetLevelOrgDomain() {
		if err := oprot.WriteFieldBegin("levelOrgDomain", thrift.STRING, 23); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:levelOrgDomain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.LevelOrgDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.levelOrgDomain (23) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 23:levelOrgDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCHLSInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCHLSInfo(%+v)", *p)
}

// Attributes:
//  - MetaInfo
//  - AllChunks
//  - WriteChunks
//  - Domain
//  - KeyNoise
//  - WriteMode
//  - OrgDomain
type TMCBFInfo struct {
	MetaInfo    *TServiceInfo `thrift:"metaInfo,1" db:"metaInfo" json:"metaInfo,omitempty"`
	AllChunks   []int32       `thrift:"allChunks,2" db:"allChunks" json:"allChunks,omitempty"`
	WriteChunks []int32       `thrift:"writeChunks,3" db:"writeChunks" json:"writeChunks,omitempty"`
	Domain      *string       `thrift:"domain,4" db:"domain" json:"domain,omitempty"`
	KeyNoise    *int64        `thrift:"keyNoise,5" db:"keyNoise" json:"keyNoise,omitempty"`
	WriteMode   *int16        `thrift:"writeMode,6" db:"writeMode" json:"writeMode,omitempty"`
	OrgDomain   *string       `thrift:"orgDomain,7" db:"orgDomain" json:"orgDomain,omitempty"`
}

func NewTMCBFInfo() *TMCBFInfo {
	return &TMCBFInfo{}
}

var TMCBFInfo_MetaInfo_DEFAULT *TServiceInfo

func (p *TMCBFInfo) GetMetaInfo() *TServiceInfo {
	if !p.IsSetMetaInfo() {
		return TMCBFInfo_MetaInfo_DEFAULT
	}
	return p.MetaInfo
}

var TMCBFInfo_AllChunks_DEFAULT []int32

func (p *TMCBFInfo) GetAllChunks() []int32 {
	return p.AllChunks
}

var TMCBFInfo_WriteChunks_DEFAULT []int32

func (p *TMCBFInfo) GetWriteChunks() []int32 {
	return p.WriteChunks
}

var TMCBFInfo_Domain_DEFAULT string

func (p *TMCBFInfo) GetDomain() string {
	if !p.IsSetDomain() {
		return TMCBFInfo_Domain_DEFAULT
	}
	return *p.Domain
}

var TMCBFInfo_KeyNoise_DEFAULT int64

func (p *TMCBFInfo) GetKeyNoise() int64 {
	if !p.IsSetKeyNoise() {
		return TMCBFInfo_KeyNoise_DEFAULT
	}
	return *p.KeyNoise
}

var TMCBFInfo_WriteMode_DEFAULT int16

func (p *TMCBFInfo) GetWriteMode() int16 {
	if !p.IsSetWriteMode() {
		return TMCBFInfo_WriteMode_DEFAULT
	}
	return *p.WriteMode
}

var TMCBFInfo_OrgDomain_DEFAULT string

func (p *TMCBFInfo) GetOrgDomain() string {
	if !p.IsSetOrgDomain() {
		return TMCBFInfo_OrgDomain_DEFAULT
	}
	return *p.OrgDomain
}
func (p *TMCBFInfo) IsSetMetaInfo() bool {
	return p.MetaInfo != nil
}

func (p *TMCBFInfo) IsSetAllChunks() bool {
	return p.AllChunks != nil
}

func (p *TMCBFInfo) IsSetWriteChunks() bool {
	return p.WriteChunks != nil
}

func (p *TMCBFInfo) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *TMCBFInfo) IsSetKeyNoise() bool {
	return p.KeyNoise != nil
}

func (p *TMCBFInfo) IsSetWriteMode() bool {
	return p.WriteMode != nil
}

func (p *TMCBFInfo) IsSetOrgDomain() bool {
	return p.OrgDomain != nil
}

func (p *TMCBFInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCBFInfo) ReadField1(iprot thrift.TProtocol) error {
	p.MetaInfo = &TServiceInfo{}
	if err := p.MetaInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MetaInfo), err)
	}
	return nil
}

func (p *TMCBFInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.AllChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem60 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem60 = v
		}
		p.AllChunks = append(p.AllChunks, _elem60)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCBFInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.WriteChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem61 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem61 = v
		}
		p.WriteChunks = append(p.WriteChunks, _elem61)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCBFInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *TMCBFInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.KeyNoise = &v
	}
	return nil
}

func (p *TMCBFInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WriteMode = &v
	}
	return nil
}

func (p *TMCBFInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.OrgDomain = &v
	}
	return nil
}

func (p *TMCBFInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCBFInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCBFInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaInfo() {
		if err := oprot.WriteFieldBegin("metaInfo", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaInfo: ", p), err)
		}
		if err := p.MetaInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MetaInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCBFInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllChunks() {
		if err := oprot.WriteFieldBegin("allChunks", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:allChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.AllChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.AllChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:allChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCBFInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteChunks() {
		if err := oprot.WriteFieldBegin("writeChunks", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:writeChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.WriteChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.WriteChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:writeChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCBFInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin("domain", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:domain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:domain: ", p), err)
		}
	}
	return err
}

func (p *TMCBFInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyNoise() {
		if err := oprot.WriteFieldBegin("keyNoise", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keyNoise: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.KeyNoise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.keyNoise (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keyNoise: ", p), err)
		}
	}
	return err
}

func (p *TMCBFInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteMode() {
		if err := oprot.WriteFieldBegin("writeMode", thrift.I16, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:writeMode: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.WriteMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeMode (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:writeMode: ", p), err)
		}
	}
	return err
}

func (p *TMCBFInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgDomain() {
		if err := oprot.WriteFieldBegin("orgDomain", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:orgDomain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgDomain (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:orgDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCBFInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCBFInfo(%+v)", *p)
}

// Attributes:
//  - MetaInfo
//  - AllChunks
//  - WriteChunks
//  - Domain
//  - KeyNoise
//  - WriteMode
//  - OrgDomain
type TMCImageInfo struct {
	MetaInfo    *TServiceInfo `thrift:"metaInfo,1" db:"metaInfo" json:"metaInfo,omitempty"`
	AllChunks   []int32       `thrift:"allChunks,2" db:"allChunks" json:"allChunks,omitempty"`
	WriteChunks []int32       `thrift:"writeChunks,3" db:"writeChunks" json:"writeChunks,omitempty"`
	Domain      *string       `thrift:"domain,4" db:"domain" json:"domain,omitempty"`
	KeyNoise    *int64        `thrift:"keyNoise,5" db:"keyNoise" json:"keyNoise,omitempty"`
	WriteMode   *int16        `thrift:"writeMode,6" db:"writeMode" json:"writeMode,omitempty"`
	OrgDomain   *string       `thrift:"orgDomain,7" db:"orgDomain" json:"orgDomain,omitempty"`
}

func NewTMCImageInfo() *TMCImageInfo {
	return &TMCImageInfo{}
}

var TMCImageInfo_MetaInfo_DEFAULT *TServiceInfo

func (p *TMCImageInfo) GetMetaInfo() *TServiceInfo {
	if !p.IsSetMetaInfo() {
		return TMCImageInfo_MetaInfo_DEFAULT
	}
	return p.MetaInfo
}

var TMCImageInfo_AllChunks_DEFAULT []int32

func (p *TMCImageInfo) GetAllChunks() []int32 {
	return p.AllChunks
}

var TMCImageInfo_WriteChunks_DEFAULT []int32

func (p *TMCImageInfo) GetWriteChunks() []int32 {
	return p.WriteChunks
}

var TMCImageInfo_Domain_DEFAULT string

func (p *TMCImageInfo) GetDomain() string {
	if !p.IsSetDomain() {
		return TMCImageInfo_Domain_DEFAULT
	}
	return *p.Domain
}

var TMCImageInfo_KeyNoise_DEFAULT int64

func (p *TMCImageInfo) GetKeyNoise() int64 {
	if !p.IsSetKeyNoise() {
		return TMCImageInfo_KeyNoise_DEFAULT
	}
	return *p.KeyNoise
}

var TMCImageInfo_WriteMode_DEFAULT int16

func (p *TMCImageInfo) GetWriteMode() int16 {
	if !p.IsSetWriteMode() {
		return TMCImageInfo_WriteMode_DEFAULT
	}
	return *p.WriteMode
}

var TMCImageInfo_OrgDomain_DEFAULT string

func (p *TMCImageInfo) GetOrgDomain() string {
	if !p.IsSetOrgDomain() {
		return TMCImageInfo_OrgDomain_DEFAULT
	}
	return *p.OrgDomain
}
func (p *TMCImageInfo) IsSetMetaInfo() bool {
	return p.MetaInfo != nil
}

func (p *TMCImageInfo) IsSetAllChunks() bool {
	return p.AllChunks != nil
}

func (p *TMCImageInfo) IsSetWriteChunks() bool {
	return p.WriteChunks != nil
}

func (p *TMCImageInfo) IsSetDomain() bool {
	return p.Domain != nil
}

func (p *TMCImageInfo) IsSetKeyNoise() bool {
	return p.KeyNoise != nil
}

func (p *TMCImageInfo) IsSetWriteMode() bool {
	return p.WriteMode != nil
}

func (p *TMCImageInfo) IsSetOrgDomain() bool {
	return p.OrgDomain != nil
}

func (p *TMCImageInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCImageInfo) ReadField1(iprot thrift.TProtocol) error {
	p.MetaInfo = &TServiceInfo{}
	if err := p.MetaInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MetaInfo), err)
	}
	return nil
}

func (p *TMCImageInfo) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.AllChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem62 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem62 = v
		}
		p.AllChunks = append(p.AllChunks, _elem62)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCImageInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.WriteChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem63 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem63 = v
		}
		p.WriteChunks = append(p.WriteChunks, _elem63)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCImageInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Domain = &v
	}
	return nil
}

func (p *TMCImageInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.KeyNoise = &v
	}
	return nil
}

func (p *TMCImageInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.WriteMode = &v
	}
	return nil
}

func (p *TMCImageInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.OrgDomain = &v
	}
	return nil
}

func (p *TMCImageInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCImageInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCImageInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetaInfo() {
		if err := oprot.WriteFieldBegin("metaInfo", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:metaInfo: ", p), err)
		}
		if err := p.MetaInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MetaInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:metaInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCImageInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllChunks() {
		if err := oprot.WriteFieldBegin("allChunks", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:allChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.AllChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.AllChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:allChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCImageInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteChunks() {
		if err := oprot.WriteFieldBegin("writeChunks", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:writeChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.WriteChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.WriteChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:writeChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCImageInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomain() {
		if err := oprot.WriteFieldBegin("domain", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:domain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Domain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.domain (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:domain: ", p), err)
		}
	}
	return err
}

func (p *TMCImageInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyNoise() {
		if err := oprot.WriteFieldBegin("keyNoise", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keyNoise: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.KeyNoise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.keyNoise (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keyNoise: ", p), err)
		}
	}
	return err
}

func (p *TMCImageInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteMode() {
		if err := oprot.WriteFieldBegin("writeMode", thrift.I16, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:writeMode: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.WriteMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeMode (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:writeMode: ", p), err)
		}
	}
	return err
}

func (p *TMCImageInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrgDomain() {
		if err := oprot.WriteFieldBegin("orgDomain", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:orgDomain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OrgDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.orgDomain (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:orgDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCImageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCImageInfo(%+v)", *p)
}

// Attributes:
//  - FileMetaInfo
//  - AllChunks
//  - WriteChunks
//  - PlaylistDomain
//  - FileDomain
//  - PlaylistKeyNoise
//  - FileKeyNoise
//  - WriteMode
//  - PlaylistOrgDomain
type TMCDASHInfo struct {
	// unused field # 1
	FileMetaInfo      *TServiceInfo `thrift:"fileMetaInfo,2" db:"fileMetaInfo" json:"fileMetaInfo,omitempty"`
	AllChunks         []int32       `thrift:"allChunks,3" db:"allChunks" json:"allChunks,omitempty"`
	WriteChunks       []int32       `thrift:"writeChunks,4" db:"writeChunks" json:"writeChunks,omitempty"`
	PlaylistDomain    *string       `thrift:"playlistDomain,5" db:"playlistDomain" json:"playlistDomain,omitempty"`
	FileDomain        *string       `thrift:"fileDomain,6" db:"fileDomain" json:"fileDomain,omitempty"`
	PlaylistKeyNoise  *int64        `thrift:"playlistKeyNoise,7" db:"playlistKeyNoise" json:"playlistKeyNoise,omitempty"`
	FileKeyNoise      *int64        `thrift:"fileKeyNoise,8" db:"fileKeyNoise" json:"fileKeyNoise,omitempty"`
	WriteMode         *int16        `thrift:"writeMode,9" db:"writeMode" json:"writeMode,omitempty"`
	PlaylistOrgDomain *string       `thrift:"playlistOrgDomain,10" db:"playlistOrgDomain" json:"playlistOrgDomain,omitempty"`
}

func NewTMCDASHInfo() *TMCDASHInfo {
	return &TMCDASHInfo{}
}

var TMCDASHInfo_FileMetaInfo_DEFAULT *TServiceInfo

func (p *TMCDASHInfo) GetFileMetaInfo() *TServiceInfo {
	if !p.IsSetFileMetaInfo() {
		return TMCDASHInfo_FileMetaInfo_DEFAULT
	}
	return p.FileMetaInfo
}

var TMCDASHInfo_AllChunks_DEFAULT []int32

func (p *TMCDASHInfo) GetAllChunks() []int32 {
	return p.AllChunks
}

var TMCDASHInfo_WriteChunks_DEFAULT []int32

func (p *TMCDASHInfo) GetWriteChunks() []int32 {
	return p.WriteChunks
}

var TMCDASHInfo_PlaylistDomain_DEFAULT string

func (p *TMCDASHInfo) GetPlaylistDomain() string {
	if !p.IsSetPlaylistDomain() {
		return TMCDASHInfo_PlaylistDomain_DEFAULT
	}
	return *p.PlaylistDomain
}

var TMCDASHInfo_FileDomain_DEFAULT string

func (p *TMCDASHInfo) GetFileDomain() string {
	if !p.IsSetFileDomain() {
		return TMCDASHInfo_FileDomain_DEFAULT
	}
	return *p.FileDomain
}

var TMCDASHInfo_PlaylistKeyNoise_DEFAULT int64

func (p *TMCDASHInfo) GetPlaylistKeyNoise() int64 {
	if !p.IsSetPlaylistKeyNoise() {
		return TMCDASHInfo_PlaylistKeyNoise_DEFAULT
	}
	return *p.PlaylistKeyNoise
}

var TMCDASHInfo_FileKeyNoise_DEFAULT int64

func (p *TMCDASHInfo) GetFileKeyNoise() int64 {
	if !p.IsSetFileKeyNoise() {
		return TMCDASHInfo_FileKeyNoise_DEFAULT
	}
	return *p.FileKeyNoise
}

var TMCDASHInfo_WriteMode_DEFAULT int16

func (p *TMCDASHInfo) GetWriteMode() int16 {
	if !p.IsSetWriteMode() {
		return TMCDASHInfo_WriteMode_DEFAULT
	}
	return *p.WriteMode
}

var TMCDASHInfo_PlaylistOrgDomain_DEFAULT string

func (p *TMCDASHInfo) GetPlaylistOrgDomain() string {
	if !p.IsSetPlaylistOrgDomain() {
		return TMCDASHInfo_PlaylistOrgDomain_DEFAULT
	}
	return *p.PlaylistOrgDomain
}
func (p *TMCDASHInfo) IsSetFileMetaInfo() bool {
	return p.FileMetaInfo != nil
}

func (p *TMCDASHInfo) IsSetAllChunks() bool {
	return p.AllChunks != nil
}

func (p *TMCDASHInfo) IsSetWriteChunks() bool {
	return p.WriteChunks != nil
}

func (p *TMCDASHInfo) IsSetPlaylistDomain() bool {
	return p.PlaylistDomain != nil
}

func (p *TMCDASHInfo) IsSetFileDomain() bool {
	return p.FileDomain != nil
}

func (p *TMCDASHInfo) IsSetPlaylistKeyNoise() bool {
	return p.PlaylistKeyNoise != nil
}

func (p *TMCDASHInfo) IsSetFileKeyNoise() bool {
	return p.FileKeyNoise != nil
}

func (p *TMCDASHInfo) IsSetWriteMode() bool {
	return p.WriteMode != nil
}

func (p *TMCDASHInfo) IsSetPlaylistOrgDomain() bool {
	return p.PlaylistOrgDomain != nil
}

func (p *TMCDASHInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 9:
			if fieldTypeId == thrift.I16 {
				if err := p.ReadField9(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCDASHInfo) ReadField2(iprot thrift.TProtocol) error {
	p.FileMetaInfo = &TServiceInfo{}
	if err := p.FileMetaInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FileMetaInfo), err)
	}
	return nil
}

func (p *TMCDASHInfo) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.AllChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem64 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem64 = v
		}
		p.AllChunks = append(p.AllChunks, _elem64)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCDASHInfo) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.WriteChunks = tSlice
	for i := 0; i < size; i++ {
		var _elem65 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem65 = v
		}
		p.WriteChunks = append(p.WriteChunks, _elem65)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TMCDASHInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.PlaylistDomain = &v
	}
	return nil
}

func (p *TMCDASHInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.FileDomain = &v
	}
	return nil
}

func (p *TMCDASHInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.PlaylistKeyNoise = &v
	}
	return nil
}

func (p *TMCDASHInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.FileKeyNoise = &v
	}
	return nil
}

func (p *TMCDASHInfo) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.WriteMode = &v
	}
	return nil
}

func (p *TMCDASHInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.PlaylistOrgDomain = &v
	}
	return nil
}

func (p *TMCDASHInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCDASHInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
		if err := p.writeField9(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCDASHInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileMetaInfo() {
		if err := oprot.WriteFieldBegin("fileMetaInfo", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fileMetaInfo: ", p), err)
		}
		if err := p.FileMetaInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FileMetaInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fileMetaInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllChunks() {
		if err := oprot.WriteFieldBegin("allChunks", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:allChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.AllChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.AllChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:allChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteChunks() {
		if err := oprot.WriteFieldBegin("writeChunks", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:writeChunks: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.WriteChunks)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.WriteChunks {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:writeChunks: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaylistDomain() {
		if err := oprot.WriteFieldBegin("playlistDomain", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:playlistDomain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PlaylistDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.playlistDomain (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:playlistDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileDomain() {
		if err := oprot.WriteFieldBegin("fileDomain", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:fileDomain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.FileDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileDomain (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:fileDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaylistKeyNoise() {
		if err := oprot.WriteFieldBegin("playlistKeyNoise", thrift.I64, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:playlistKeyNoise: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PlaylistKeyNoise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.playlistKeyNoise (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:playlistKeyNoise: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetFileKeyNoise() {
		if err := oprot.WriteFieldBegin("fileKeyNoise", thrift.I64, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:fileKeyNoise: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.FileKeyNoise)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.fileKeyNoise (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:fileKeyNoise: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetWriteMode() {
		if err := oprot.WriteFieldBegin("writeMode", thrift.I16, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:writeMode: ", p), err)
		}
		if err := oprot.WriteI16(int16(*p.WriteMode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.writeMode (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:writeMode: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaylistOrgDomain() {
		if err := oprot.WriteFieldBegin("playlistOrgDomain", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:playlistOrgDomain: ", p), err)
		}
		if err := oprot.WriteString(string(*p.PlaylistOrgDomain)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.playlistOrgDomain (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:playlistOrgDomain: ", p), err)
		}
	}
	return err
}

func (p *TMCDASHInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCDASHInfo(%+v)", *p)
}

// Attributes:
//  - StorageId
//  - Name
//  - HlsInfo
//  - BigFileInfo
//  - ImageInfo
//  - DashInfo
//  - LowBoundExpireTime
//  - HighBoundExpireTime
type TMCStorageInfo struct {
	StorageId           *int32        `thrift:"storageId,1" db:"storageId" json:"storageId,omitempty"`
	Name                *string       `thrift:"name,2" db:"name" json:"name,omitempty"`
	HlsInfo             *TMCHLSInfo   `thrift:"hlsInfo,3" db:"hlsInfo" json:"hlsInfo,omitempty"`
	BigFileInfo         *TMCBFInfo    `thrift:"bigFileInfo,4" db:"bigFileInfo" json:"bigFileInfo,omitempty"`
	ImageInfo           *TMCImageInfo `thrift:"imageInfo,5" db:"imageInfo" json:"imageInfo,omitempty"`
	DashInfo            *TMCDASHInfo  `thrift:"dashInfo,6" db:"dashInfo" json:"dashInfo,omitempty"`
	LowBoundExpireTime  *int32        `thrift:"lowBoundExpireTime,7" db:"lowBoundExpireTime" json:"lowBoundExpireTime,omitempty"`
	HighBoundExpireTime *int32        `thrift:"highBoundExpireTime,8" db:"highBoundExpireTime" json:"highBoundExpireTime,omitempty"`
}

func NewTMCStorageInfo() *TMCStorageInfo {
	return &TMCStorageInfo{}
}

var TMCStorageInfo_StorageId_DEFAULT int32

func (p *TMCStorageInfo) GetStorageId() int32 {
	if !p.IsSetStorageId() {
		return TMCStorageInfo_StorageId_DEFAULT
	}
	return *p.StorageId
}

var TMCStorageInfo_Name_DEFAULT string

func (p *TMCStorageInfo) GetName() string {
	if !p.IsSetName() {
		return TMCStorageInfo_Name_DEFAULT
	}
	return *p.Name
}

var TMCStorageInfo_HlsInfo_DEFAULT *TMCHLSInfo

func (p *TMCStorageInfo) GetHlsInfo() *TMCHLSInfo {
	if !p.IsSetHlsInfo() {
		return TMCStorageInfo_HlsInfo_DEFAULT
	}
	return p.HlsInfo
}

var TMCStorageInfo_BigFileInfo_DEFAULT *TMCBFInfo

func (p *TMCStorageInfo) GetBigFileInfo() *TMCBFInfo {
	if !p.IsSetBigFileInfo() {
		return TMCStorageInfo_BigFileInfo_DEFAULT
	}
	return p.BigFileInfo
}

var TMCStorageInfo_ImageInfo_DEFAULT *TMCImageInfo

func (p *TMCStorageInfo) GetImageInfo() *TMCImageInfo {
	if !p.IsSetImageInfo() {
		return TMCStorageInfo_ImageInfo_DEFAULT
	}
	return p.ImageInfo
}

var TMCStorageInfo_DashInfo_DEFAULT *TMCDASHInfo

func (p *TMCStorageInfo) GetDashInfo() *TMCDASHInfo {
	if !p.IsSetDashInfo() {
		return TMCStorageInfo_DashInfo_DEFAULT
	}
	return p.DashInfo
}

var TMCStorageInfo_LowBoundExpireTime_DEFAULT int32

func (p *TMCStorageInfo) GetLowBoundExpireTime() int32 {
	if !p.IsSetLowBoundExpireTime() {
		return TMCStorageInfo_LowBoundExpireTime_DEFAULT
	}
	return *p.LowBoundExpireTime
}

var TMCStorageInfo_HighBoundExpireTime_DEFAULT int32

func (p *TMCStorageInfo) GetHighBoundExpireTime() int32 {
	if !p.IsSetHighBoundExpireTime() {
		return TMCStorageInfo_HighBoundExpireTime_DEFAULT
	}
	return *p.HighBoundExpireTime
}
func (p *TMCStorageInfo) IsSetStorageId() bool {
	return p.StorageId != nil
}

func (p *TMCStorageInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *TMCStorageInfo) IsSetHlsInfo() bool {
	return p.HlsInfo != nil
}

func (p *TMCStorageInfo) IsSetBigFileInfo() bool {
	return p.BigFileInfo != nil
}

func (p *TMCStorageInfo) IsSetImageInfo() bool {
	return p.ImageInfo != nil
}

func (p *TMCStorageInfo) IsSetDashInfo() bool {
	return p.DashInfo != nil
}

func (p *TMCStorageInfo) IsSetLowBoundExpireTime() bool {
	return p.LowBoundExpireTime != nil
}

func (p *TMCStorageInfo) IsSetHighBoundExpireTime() bool {
	return p.HighBoundExpireTime != nil
}

func (p *TMCStorageInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField4(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField5(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField6(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField7(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField8(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TMCStorageInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.StorageId = &v
	}
	return nil
}

func (p *TMCStorageInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *TMCStorageInfo) ReadField3(iprot thrift.TProtocol) error {
	p.HlsInfo = &TMCHLSInfo{}
	if err := p.HlsInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HlsInfo), err)
	}
	return nil
}

func (p *TMCStorageInfo) ReadField4(iprot thrift.TProtocol) error {
	p.BigFileInfo = &TMCBFInfo{}
	if err := p.BigFileInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BigFileInfo), err)
	}
	return nil
}

func (p *TMCStorageInfo) ReadField5(iprot thrift.TProtocol) error {
	p.ImageInfo = &TMCImageInfo{}
	if err := p.ImageInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ImageInfo), err)
	}
	return nil
}

func (p *TMCStorageInfo) ReadField6(iprot thrift.TProtocol) error {
	p.DashInfo = &TMCDASHInfo{}
	if err := p.DashInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DashInfo), err)
	}
	return nil
}

func (p *TMCStorageInfo) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LowBoundExpireTime = &v
	}
	return nil
}

func (p *TMCStorageInfo) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.HighBoundExpireTime = &v
	}
	return nil
}

func (p *TMCStorageInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMCStorageInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField4(oprot); err != nil {
			return err
		}
		if err := p.writeField5(oprot); err != nil {
			return err
		}
		if err := p.writeField6(oprot); err != nil {
			return err
		}
		if err := p.writeField7(oprot); err != nil {
			return err
		}
		if err := p.writeField8(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TMCStorageInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStorageId() {
		if err := oprot.WriteFieldBegin("storageId", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storageId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.StorageId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.storageId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storageId: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetHlsInfo() {
		if err := oprot.WriteFieldBegin("hlsInfo", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hlsInfo: ", p), err)
		}
		if err := p.HlsInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HlsInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hlsInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBigFileInfo() {
		if err := oprot.WriteFieldBegin("bigFileInfo", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:bigFileInfo: ", p), err)
		}
		if err := p.BigFileInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BigFileInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:bigFileInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageInfo() {
		if err := oprot.WriteFieldBegin("imageInfo", thrift.STRUCT, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:imageInfo: ", p), err)
		}
		if err := p.ImageInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ImageInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:imageInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDashInfo() {
		if err := oprot.WriteFieldBegin("dashInfo", thrift.STRUCT, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dashInfo: ", p), err)
		}
		if err := p.DashInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DashInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dashInfo: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLowBoundExpireTime() {
		if err := oprot.WriteFieldBegin("lowBoundExpireTime", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lowBoundExpireTime: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.LowBoundExpireTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.lowBoundExpireTime (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lowBoundExpireTime: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHighBoundExpireTime() {
		if err := oprot.WriteFieldBegin("highBoundExpireTime", thrift.I32, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:highBoundExpireTime: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.HighBoundExpireTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.highBoundExpireTime (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:highBoundExpireTime: ", p), err)
		}
	}
	return err
}

func (p *TMCStorageInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMCStorageInfo(%+v)", *p)
}

// Attributes:
//  - FarmId
//  - Name
//  - EventBusInfo
//  - H264Event
//  - H265Event
//  - Vp8Event
//  - Vp9Event
//  - HlsEvent
//  - DashEvent
//  - AudioEvent
type ZMCFarmProcessInfo struct {
	FarmId       *int32        `thrift:"farmId,1" db:"farmId" json:"farmId,omitempty"`
	Name         *string       `thrift:"name,2" db:"name" json:"name,omitempty"`
	EventBusInfo *TServiceInfo `thrift:"eventBusInfo,3" db:"eventBusInfo" json:"eventBusInfo,omitempty"`
	// unused fields # 4 to 9
	H264Event *string `thrift:"h264Event,10" db:"h264Event" json:"h264Event,omitempty"`
	H265Event *string `thrift:"h265Event,11" db:"h265Event" json:"h265Event,omitempty"`
	Vp8Event  *string `thrift:"vp8Event,12" db:"vp8Event" json:"vp8Event,omitempty"`
	Vp9Event  *string `thrift:"vp9Event,13" db:"vp9Event" json:"vp9Event,omitempty"`
	HlsEvent  *string `thrift:"hlsEvent,14" db:"hlsEvent" json:"hlsEvent,omitempty"`
	DashEvent *string `thrift:"dashEvent,15" db:"dashEvent" json:"dashEvent,omitempty"`
	// unused fields # 16 to 19
	AudioEvent *string `thrift:"audioEvent,20" db:"audioEvent" json:"audioEvent,omitempty"`
}

func NewZMCFarmProcessInfo() *ZMCFarmProcessInfo {
	return &ZMCFarmProcessInfo{}
}

var ZMCFarmProcessInfo_FarmId_DEFAULT int32

func (p *ZMCFarmProcessInfo) GetFarmId() int32 {
	if !p.IsSetFarmId() {
		return ZMCFarmProcessInfo_FarmId_DEFAULT
	}
	return *p.FarmId
}

var ZMCFarmProcessInfo_Name_DEFAULT string

func (p *ZMCFarmProcessInfo) GetName() string {
	if !p.IsSetName() {
		return ZMCFarmProcessInfo_Name_DEFAULT
	}
	return *p.Name
}

var ZMCFarmProcessInfo_EventBusInfo_DEFAULT *TServiceInfo

func (p *ZMCFarmProcessInfo) GetEventBusInfo() *TServiceInfo {
	if !p.IsSetEventBusInfo() {
		return ZMCFarmProcessInfo_EventBusInfo_DEFAULT
	}
	return p.EventBusInfo
}

var ZMCFarmProcessInfo_H264Event_DEFAULT string

func (p *ZMCFarmProcessInfo) GetH264Event() string {
	if !p.IsSetH264Event() {
		return ZMCFarmProcessInfo_H264Event_DEFAULT
	}
	return *p.H264Event
}

var ZMCFarmProcessInfo_H265Event_DEFAULT string

func (p *ZMCFarmProcessInfo) GetH265Event() string {
	if !p.IsSetH265Event() {
		return ZMCFarmProcessInfo_H265Event_DEFAULT
	}
	return *p.H265Event
}

var ZMCFarmProcessInfo_Vp8Event_DEFAULT string

func (p *ZMCFarmProcessInfo) GetVp8Event() string {
	if !p.IsSetVp8Event() {
		return ZMCFarmProcessInfo_Vp8Event_DEFAULT
	}
	return *p.Vp8Event
}

var ZMCFarmProcessInfo_Vp9Event_DEFAULT string

func (p *ZMCFarmProcessInfo) GetVp9Event() string {
	if !p.IsSetVp9Event() {
		return ZMCFarmProcessInfo_Vp9Event_DEFAULT
	}
	return *p.Vp9Event
}

var ZMCFarmProcessInfo_HlsEvent_DEFAULT string

func (p *ZMCFarmProcessInfo) GetHlsEvent() string {
	if !p.IsSetHlsEvent() {
		return ZMCFarmProcessInfo_HlsEvent_DEFAULT
	}
	return *p.HlsEvent
}

var ZMCFarmProcessInfo_DashEvent_DEFAULT string

func (p *ZMCFarmProcessInfo) GetDashEvent() string {
	if !p.IsSetDashEvent() {
		return ZMCFarmProcessInfo_DashEvent_DEFAULT
	}
	return *p.DashEvent
}

var ZMCFarmProcessInfo_AudioEvent_DEFAULT string

func (p *ZMCFarmProcessInfo) GetAudioEvent() string {
	if !p.IsSetAudioEvent() {
		return ZMCFarmProcessInfo_AudioEvent_DEFAULT
	}
	return *p.AudioEvent
}
func (p *ZMCFarmProcessInfo) IsSetFarmId() bool {
	return p.FarmId != nil
}

func (p *ZMCFarmProcessInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *ZMCFarmProcessInfo) IsSetEventBusInfo() bool {
	return p.EventBusInfo != nil
}

func (p *ZMCFarmProcessInfo) IsSetH264Event() bool {
	return p.H264Event != nil
}

func (p *ZMCFarmProcessInfo) IsSetH265Event() bool {
	return p.H265Event != nil
}

func (p *ZMCFarmProcessInfo) IsSetVp8Event() bool {
	return p.Vp8Event != nil
}

func (p *ZMCFarmProcessInfo) IsSetVp9Event() bool {
	return p.Vp9Event != nil
}

func (p *ZMCFarmProcessInfo) IsSetHlsEvent() bool {
	return p.HlsEvent != nil
}

func (p *ZMCFarmProcessInfo) IsSetDashEvent() bool {
	return p.DashEvent != nil
}

func (p *ZMCFarmProcessInfo) IsSetAudioEvent() bool {
	return p.AudioEvent != nil
}

func (p *ZMCFarmProcessInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField3(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField10(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField11(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField12(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField13(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField14(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField15(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField20(iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.FarmId = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField3(iprot thrift.TProtocol) error {
	p.EventBusInfo = &TServiceInfo{}
	if err := p.EventBusInfo.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EventBusInfo), err)
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.H264Event = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.H265Event = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Vp8Event = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.Vp9Event = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.HlsEvent = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		p.DashEvent = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.AudioEvent = &v
	}
	return nil
}

func (p *ZMCFarmProcessInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ZMCFarmProcessInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(oprot); err != nil {
			return err
		}
		if err := p.writeField2(oprot); err != nil {
			return err
		}
		if err := p.writeField3(oprot); err != nil {
			return err
		}
		if err := p.writeField10(oprot); err != nil {
			return err
		}
		if err := p.writeField11(oprot); err != nil {
			return err
		}
		if err := p.writeField12(oprot); err != nil {
			return err
		}
		if err := p.writeField13(oprot); err != nil {
			return err
		}
		if err := p.writeField14(oprot); err != nil {
			return err
		}
		if err := p.writeField15(oprot); err != nil {
			return err
		}
		if err := p.writeField20(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ZMCFarmProcessInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFarmId() {
		if err := oprot.WriteFieldBegin("farmId", thrift.I32, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:farmId: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.FarmId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.farmId (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:farmId: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventBusInfo() {
		if err := oprot.WriteFieldBegin("eventBusInfo", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventBusInfo: ", p), err)
		}
		if err := p.EventBusInfo.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EventBusInfo), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventBusInfo: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetH264Event() {
		if err := oprot.WriteFieldBegin("h264Event", thrift.STRING, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:h264Event: ", p), err)
		}
		if err := oprot.WriteString(string(*p.H264Event)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.h264Event (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:h264Event: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetH265Event() {
		if err := oprot.WriteFieldBegin("h265Event", thrift.STRING, 11); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:h265Event: ", p), err)
		}
		if err := oprot.WriteString(string(*p.H265Event)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.h265Event (11) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 11:h265Event: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetVp8Event() {
		if err := oprot.WriteFieldBegin("vp8Event", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:vp8Event: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Vp8Event)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vp8Event (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:vp8Event: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetVp9Event() {
		if err := oprot.WriteFieldBegin("vp9Event", thrift.STRING, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:vp9Event: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Vp9Event)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.vp9Event (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:vp9Event: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetHlsEvent() {
		if err := oprot.WriteFieldBegin("hlsEvent", thrift.STRING, 14); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hlsEvent: ", p), err)
		}
		if err := oprot.WriteString(string(*p.HlsEvent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.hlsEvent (14) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hlsEvent: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetDashEvent() {
		if err := oprot.WriteFieldBegin("dashEvent", thrift.STRING, 15); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:dashEvent: ", p), err)
		}
		if err := oprot.WriteString(string(*p.DashEvent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.dashEvent (15) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 15:dashEvent: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudioEvent() {
		if err := oprot.WriteFieldBegin("audioEvent", thrift.STRING, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:audioEvent: ", p), err)
		}
		if err := oprot.WriteString(string(*p.AudioEvent)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.audioEvent (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:audioEvent: ", p), err)
		}
	}
	return err
}

func (p *ZMCFarmProcessInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ZMCFarmProcessInfo(%+v)", *p)
}
