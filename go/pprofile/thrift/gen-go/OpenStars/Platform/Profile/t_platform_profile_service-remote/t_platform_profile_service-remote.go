// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "OpenStars/Platform/Profile"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  string setExtData(TKey uid, string extKey, string extValue)")
  fmt.Fprintln(os.Stderr, "  string getExtData(TKey uid, string extKey)")
  fmt.Fprintln(os.Stderr, "  bool setTrustedEmail(TKey uid, string email, bool isTrusted)")
  fmt.Fprintln(os.Stderr, "  bool setSocialInfo(TKey uid, string socialType, TSocialProfile socialProfile)")
  fmt.Fprintln(os.Stderr, "  TErrorCode putData(TKey key, TPlatformProfile data)")
  fmt.Fprintln(os.Stderr, "  TDataResult getData(TKey key)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := Profile.NewTPlatformProfileServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setExtData":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetExtData requires 3 args")
      flag.Usage()
    }
    argvalue0, err34 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err34 != nil {
      Usage()
      return
    }
    value0 := Profile.TKey(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SetExtData(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getExtData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetExtData requires 2 args")
      flag.Usage()
    }
    argvalue0, err37 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err37 != nil {
      Usage()
      return
    }
    value0 := Profile.TKey(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetExtData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setTrustedEmail":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetTrustedEmail requires 3 args")
      flag.Usage()
    }
    argvalue0, err39 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err39 != nil {
      Usage()
      return
    }
    value0 := Profile.TKey(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.SetTrustedEmail(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setSocialInfo":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetSocialInfo requires 3 args")
      flag.Usage()
    }
    argvalue0, err42 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err42 != nil {
      Usage()
      return
    }
    value0 := Profile.TKey(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg44 := flag.Arg(3)
    mbTrans45 := thrift.NewTMemoryBufferLen(len(arg44))
    defer mbTrans45.Close()
    _, err46 := mbTrans45.WriteString(arg44)
    if err46 != nil {
      Usage()
      return
    }
    factory47 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt48 := factory47.GetProtocol(mbTrans45)
    argvalue2 := Profile.NewTSocialProfile()
    err49 := argvalue2.Read(jsProt48)
    if err49 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetSocialInfo(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "putData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutData requires 2 args")
      flag.Usage()
    }
    argvalue0, err50 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err50 != nil {
      Usage()
      return
    }
    value0 := Profile.TKey(argvalue0)
    arg51 := flag.Arg(2)
    mbTrans52 := thrift.NewTMemoryBufferLen(len(arg51))
    defer mbTrans52.Close()
    _, err53 := mbTrans52.WriteString(arg51)
    if err53 != nil {
      Usage()
      return
    }
    factory54 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt55 := factory54.GetProtocol(mbTrans52)
    argvalue1 := Profile.NewTPlatformProfile()
    err56 := argvalue1.Read(jsProt55)
    if err56 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.PutData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetData requires 1 args")
      flag.Usage()
    }
    argvalue0, err57 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err57 != nil {
      Usage()
      return
    }
    value0 := Profile.TKey(argvalue0)
    fmt.Print(client.GetData(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
