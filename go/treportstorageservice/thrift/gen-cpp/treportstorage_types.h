/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef treportstorage_TYPES_H
#define treportstorage_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace OpenStars { namespace Common { namespace TReportStorageService {

struct TErrorCode {
  enum type {
    EGood = 0,
    ENotFound = -1,
    EUnknown = -2,
    EDataExisted = -3
  };
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val);

std::string to_string(const TErrorCode::type& val);

typedef int64_t TKey;

typedef class TReportItem TData;

class MediaItem;

class TReportItem;

class TDataResult;

class TListDataResult;

typedef struct _MediaItem__isset {
  _MediaItem__isset() : name(false), mediaType(false), url(false) {}
  bool name :1;
  bool mediaType :1;
  bool url :1;
} _MediaItem__isset;

class MediaItem : public virtual ::apache::thrift::TBase {
 public:

  MediaItem(const MediaItem&);
  MediaItem& operator=(const MediaItem&);
  MediaItem() : name(), mediaType(0), url() {
  }

  virtual ~MediaItem() noexcept;
  std::string name;
  int64_t mediaType;
  std::string url;

  _MediaItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_mediaType(const int64_t val);

  void __set_url(const std::string& val);

  bool operator == (const MediaItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(mediaType == rhs.mediaType))
      return false;
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const MediaItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MediaItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MediaItem &a, MediaItem &b);

std::ostream& operator<<(std::ostream& out, const MediaItem& obj);

typedef struct _TReportItem__isset {
  _TReportItem__isset() : reportId(false), uId(false), targetId(false), postId(false), commentId(false), contentObj(false), listMediaObj(false), actionLink(false), contentReport(false), timestamp(false), timestampObj(false), locationId(false), locationName(false), action(false) {}
  bool reportId :1;
  bool uId :1;
  bool targetId :1;
  bool postId :1;
  bool commentId :1;
  bool contentObj :1;
  bool listMediaObj :1;
  bool actionLink :1;
  bool contentReport :1;
  bool timestamp :1;
  bool timestampObj :1;
  bool locationId :1;
  bool locationName :1;
  bool action :1;
} _TReportItem__isset;

class TReportItem : public virtual ::apache::thrift::TBase {
 public:

  TReportItem(const TReportItem&);
  TReportItem& operator=(const TReportItem&);
  TReportItem() : reportId(0), uId(0), targetId(0), postId(0), commentId(0), contentObj(), contentReport(), timestamp(0), timestampObj(0), locationId(), locationName(), action(0) {
  }

  virtual ~TReportItem() noexcept;
  int64_t reportId;
  int64_t uId;
  int64_t targetId;
  int64_t postId;
  int64_t commentId;
  std::string contentObj;
  std::vector<MediaItem>  listMediaObj;
  std::vector<std::string>  actionLink;
  std::string contentReport;
  int64_t timestamp;
  int64_t timestampObj;
  std::string locationId;
  std::string locationName;
  int8_t action;

  _TReportItem__isset __isset;

  void __set_reportId(const int64_t val);

  void __set_uId(const int64_t val);

  void __set_targetId(const int64_t val);

  void __set_postId(const int64_t val);

  void __set_commentId(const int64_t val);

  void __set_contentObj(const std::string& val);

  void __set_listMediaObj(const std::vector<MediaItem> & val);

  void __set_actionLink(const std::vector<std::string> & val);

  void __set_contentReport(const std::string& val);

  void __set_timestamp(const int64_t val);

  void __set_timestampObj(const int64_t val);

  void __set_locationId(const std::string& val);

  void __set_locationName(const std::string& val);

  void __set_action(const int8_t val);

  bool operator == (const TReportItem & rhs) const
  {
    if (!(reportId == rhs.reportId))
      return false;
    if (!(uId == rhs.uId))
      return false;
    if (!(targetId == rhs.targetId))
      return false;
    if (__isset.postId != rhs.__isset.postId)
      return false;
    else if (__isset.postId && !(postId == rhs.postId))
      return false;
    if (__isset.commentId != rhs.__isset.commentId)
      return false;
    else if (__isset.commentId && !(commentId == rhs.commentId))
      return false;
    if (__isset.contentObj != rhs.__isset.contentObj)
      return false;
    else if (__isset.contentObj && !(contentObj == rhs.contentObj))
      return false;
    if (__isset.listMediaObj != rhs.__isset.listMediaObj)
      return false;
    else if (__isset.listMediaObj && !(listMediaObj == rhs.listMediaObj))
      return false;
    if (__isset.actionLink != rhs.__isset.actionLink)
      return false;
    else if (__isset.actionLink && !(actionLink == rhs.actionLink))
      return false;
    if (__isset.contentReport != rhs.__isset.contentReport)
      return false;
    else if (__isset.contentReport && !(contentReport == rhs.contentReport))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (__isset.timestampObj != rhs.__isset.timestampObj)
      return false;
    else if (__isset.timestampObj && !(timestampObj == rhs.timestampObj))
      return false;
    if (__isset.locationId != rhs.__isset.locationId)
      return false;
    else if (__isset.locationId && !(locationId == rhs.locationId))
      return false;
    if (__isset.locationName != rhs.__isset.locationName)
      return false;
    else if (__isset.locationName && !(locationName == rhs.locationName))
      return false;
    if (!(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const TReportItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TReportItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TReportItem &a, TReportItem &b);

std::ostream& operator<<(std::ostream& out, const TReportItem& obj);

typedef struct _TDataResult__isset {
  _TDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TDataResult__isset;

class TDataResult : public virtual ::apache::thrift::TBase {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TDataResult() noexcept;
  TErrorCode::type errorCode;
  TReportItem data;

  _TDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const TReportItem& val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

std::ostream& operator<<(std::ostream& out, const TDataResult& obj);

typedef struct _TListDataResult__isset {
  _TListDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TListDataResult__isset;

class TListDataResult : public virtual ::apache::thrift::TBase {
 public:

  TListDataResult(const TListDataResult&);
  TListDataResult& operator=(const TListDataResult&);
  TListDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TListDataResult() noexcept;
  TErrorCode::type errorCode;
  std::vector<TReportItem>  data;

  _TListDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const std::vector<TReportItem> & val);

  bool operator == (const TListDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TListDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TListDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TListDataResult &a, TListDataResult &b);

std::ostream& operator<<(std::ostream& out, const TListDataResult& obj);

}}} // namespace

#endif
