/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "treportstorage_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace OpenStars { namespace Common { namespace TReportStorageService {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENotFound,
  TErrorCode::EUnknown,
  TErrorCode::EDataExisted
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENotFound",
  "EUnknown",
  "EDataExisted"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


MediaItem::~MediaItem() noexcept {
}


void MediaItem::__set_name(const std::string& val) {
  this->name = val;
}

void MediaItem::__set_mediaType(const int64_t val) {
  this->mediaType = val;
}

void MediaItem::__set_url(const std::string& val) {
  this->url = val;
}
std::ostream& operator<<(std::ostream& out, const MediaItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t MediaItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mediaType);
          this->__isset.mediaType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MediaItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MediaItem");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mediaType", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->mediaType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MediaItem &a, MediaItem &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.mediaType, b.mediaType);
  swap(a.url, b.url);
  swap(a.__isset, b.__isset);
}

MediaItem::MediaItem(const MediaItem& other0) {
  name = other0.name;
  mediaType = other0.mediaType;
  url = other0.url;
  __isset = other0.__isset;
}
MediaItem& MediaItem::operator=(const MediaItem& other1) {
  name = other1.name;
  mediaType = other1.mediaType;
  url = other1.url;
  __isset = other1.__isset;
  return *this;
}
void MediaItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MediaItem(";
  out << "name=" << to_string(name);
  out << ", " << "mediaType=" << to_string(mediaType);
  out << ", " << "url=" << to_string(url);
  out << ")";
}


TReportItem::~TReportItem() noexcept {
}


void TReportItem::__set_reportId(const int64_t val) {
  this->reportId = val;
}

void TReportItem::__set_uId(const int64_t val) {
  this->uId = val;
}

void TReportItem::__set_targetId(const int64_t val) {
  this->targetId = val;
}

void TReportItem::__set_postId(const int64_t val) {
  this->postId = val;
__isset.postId = true;
}

void TReportItem::__set_commentId(const int64_t val) {
  this->commentId = val;
__isset.commentId = true;
}

void TReportItem::__set_contentObj(const std::string& val) {
  this->contentObj = val;
__isset.contentObj = true;
}

void TReportItem::__set_listMediaObj(const std::vector<MediaItem> & val) {
  this->listMediaObj = val;
__isset.listMediaObj = true;
}

void TReportItem::__set_actionLink(const std::vector<std::string> & val) {
  this->actionLink = val;
__isset.actionLink = true;
}

void TReportItem::__set_contentReport(const std::string& val) {
  this->contentReport = val;
__isset.contentReport = true;
}

void TReportItem::__set_timestamp(const int64_t val) {
  this->timestamp = val;
}

void TReportItem::__set_timestampObj(const int64_t val) {
  this->timestampObj = val;
__isset.timestampObj = true;
}

void TReportItem::__set_locationId(const std::string& val) {
  this->locationId = val;
__isset.locationId = true;
}

void TReportItem::__set_locationName(const std::string& val) {
  this->locationName = val;
__isset.locationName = true;
}

void TReportItem::__set_action(const int8_t val) {
  this->action = val;
}
std::ostream& operator<<(std::ostream& out, const TReportItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TReportItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->reportId);
          this->__isset.reportId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uId);
          this->__isset.uId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->targetId);
          this->__isset.targetId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->postId);
          this->__isset.postId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->commentId);
          this->__isset.commentId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentObj);
          this->__isset.contentObj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->listMediaObj.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->listMediaObj.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->listMediaObj[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.listMediaObj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->actionLink.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->actionLink.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readString(this->actionLink[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.actionLink = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentReport);
          this->__isset.contentReport = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestampObj);
          this->__isset.timestampObj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationId);
          this->__isset.locationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->locationName);
          this->__isset.locationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->action);
          this->__isset.action = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TReportItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TReportItem");

  xfer += oprot->writeFieldBegin("reportId", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->reportId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("uId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->uId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("targetId", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->targetId);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.postId) {
    xfer += oprot->writeFieldBegin("postId", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->postId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commentId) {
    xfer += oprot->writeFieldBegin("commentId", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->commentId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentObj) {
    xfer += oprot->writeFieldBegin("contentObj", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->contentObj);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.listMediaObj) {
    xfer += oprot->writeFieldBegin("listMediaObj", ::apache::thrift::protocol::T_LIST, 7);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->listMediaObj.size()));
      std::vector<MediaItem> ::const_iterator _iter12;
      for (_iter12 = this->listMediaObj.begin(); _iter12 != this->listMediaObj.end(); ++_iter12)
      {
        xfer += (*_iter12).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.actionLink) {
    xfer += oprot->writeFieldBegin("actionLink", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->actionLink.size()));
      std::vector<std::string> ::const_iterator _iter13;
      for (_iter13 = this->actionLink.begin(); _iter13 != this->actionLink.end(); ++_iter13)
      {
        xfer += oprot->writeString((*_iter13));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contentReport) {
    xfer += oprot->writeFieldBegin("contentReport", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->contentReport);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.timestampObj) {
    xfer += oprot->writeFieldBegin("timestampObj", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->timestampObj);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.locationId) {
    xfer += oprot->writeFieldBegin("locationId", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->locationId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.locationName) {
    xfer += oprot->writeFieldBegin("locationName", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->locationName);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("action", ::apache::thrift::protocol::T_BYTE, 14);
  xfer += oprot->writeByte(this->action);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TReportItem &a, TReportItem &b) {
  using ::std::swap;
  swap(a.reportId, b.reportId);
  swap(a.uId, b.uId);
  swap(a.targetId, b.targetId);
  swap(a.postId, b.postId);
  swap(a.commentId, b.commentId);
  swap(a.contentObj, b.contentObj);
  swap(a.listMediaObj, b.listMediaObj);
  swap(a.actionLink, b.actionLink);
  swap(a.contentReport, b.contentReport);
  swap(a.timestamp, b.timestamp);
  swap(a.timestampObj, b.timestampObj);
  swap(a.locationId, b.locationId);
  swap(a.locationName, b.locationName);
  swap(a.action, b.action);
  swap(a.__isset, b.__isset);
}

TReportItem::TReportItem(const TReportItem& other14) {
  reportId = other14.reportId;
  uId = other14.uId;
  targetId = other14.targetId;
  postId = other14.postId;
  commentId = other14.commentId;
  contentObj = other14.contentObj;
  listMediaObj = other14.listMediaObj;
  actionLink = other14.actionLink;
  contentReport = other14.contentReport;
  timestamp = other14.timestamp;
  timestampObj = other14.timestampObj;
  locationId = other14.locationId;
  locationName = other14.locationName;
  action = other14.action;
  __isset = other14.__isset;
}
TReportItem& TReportItem::operator=(const TReportItem& other15) {
  reportId = other15.reportId;
  uId = other15.uId;
  targetId = other15.targetId;
  postId = other15.postId;
  commentId = other15.commentId;
  contentObj = other15.contentObj;
  listMediaObj = other15.listMediaObj;
  actionLink = other15.actionLink;
  contentReport = other15.contentReport;
  timestamp = other15.timestamp;
  timestampObj = other15.timestampObj;
  locationId = other15.locationId;
  locationName = other15.locationName;
  action = other15.action;
  __isset = other15.__isset;
  return *this;
}
void TReportItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TReportItem(";
  out << "reportId=" << to_string(reportId);
  out << ", " << "uId=" << to_string(uId);
  out << ", " << "targetId=" << to_string(targetId);
  out << ", " << "postId="; (__isset.postId ? (out << to_string(postId)) : (out << "<null>"));
  out << ", " << "commentId="; (__isset.commentId ? (out << to_string(commentId)) : (out << "<null>"));
  out << ", " << "contentObj="; (__isset.contentObj ? (out << to_string(contentObj)) : (out << "<null>"));
  out << ", " << "listMediaObj="; (__isset.listMediaObj ? (out << to_string(listMediaObj)) : (out << "<null>"));
  out << ", " << "actionLink="; (__isset.actionLink ? (out << to_string(actionLink)) : (out << "<null>"));
  out << ", " << "contentReport="; (__isset.contentReport ? (out << to_string(contentReport)) : (out << "<null>"));
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "timestampObj="; (__isset.timestampObj ? (out << to_string(timestampObj)) : (out << "<null>"));
  out << ", " << "locationId="; (__isset.locationId ? (out << to_string(locationId)) : (out << "<null>"));
  out << ", " << "locationName="; (__isset.locationName ? (out << to_string(locationName)) : (out << "<null>"));
  out << ", " << "action=" << to_string(action);
  out << ")";
}


TDataResult::~TDataResult() noexcept {
}


void TDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TDataResult::__set_data(const TReportItem& val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->errorCode = (TErrorCode::type)ecast16;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->data.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDataResult &a, TDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TDataResult::TDataResult(const TDataResult& other17) {
  errorCode = other17.errorCode;
  data = other17.data;
  __isset = other17.__isset;
}
TDataResult& TDataResult::operator=(const TDataResult& other18) {
  errorCode = other18.errorCode;
  data = other18.data;
  __isset = other18.__isset;
  return *this;
}
void TDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}


TListDataResult::~TListDataResult() noexcept {
}


void TListDataResult::__set_errorCode(const TErrorCode::type val) {
  this->errorCode = val;
}

void TListDataResult::__set_data(const std::vector<TReportItem> & val) {
  this->data = val;
__isset.data = true;
}
std::ostream& operator<<(std::ostream& out, const TListDataResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TListDataResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->errorCode = (TErrorCode::type)ecast19;
          this->__isset.errorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size20;
            ::apache::thrift::protocol::TType _etype23;
            xfer += iprot->readListBegin(_etype23, _size20);
            this->data.resize(_size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              xfer += this->data[_i24].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TListDataResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TListDataResult");

  xfer += oprot->writeFieldBegin("errorCode", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->errorCode);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.data) {
    xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->data.size()));
      std::vector<TReportItem> ::const_iterator _iter25;
      for (_iter25 = this->data.begin(); _iter25 != this->data.end(); ++_iter25)
      {
        xfer += (*_iter25).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TListDataResult &a, TListDataResult &b) {
  using ::std::swap;
  swap(a.errorCode, b.errorCode);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

TListDataResult::TListDataResult(const TListDataResult& other26) {
  errorCode = other26.errorCode;
  data = other26.data;
  __isset = other26.__isset;
}
TListDataResult& TListDataResult::operator=(const TListDataResult& other27) {
  errorCode = other27.errorCode;
  data = other27.data;
  __isset = other27.__isset;
  return *this;
}
void TListDataResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TListDataResult(";
  out << "errorCode=" << to_string(errorCode);
  out << ", " << "data="; (__isset.data ? (out << to_string(data)) : (out << "<null>"));
  out << ")";
}

}}} // namespace
