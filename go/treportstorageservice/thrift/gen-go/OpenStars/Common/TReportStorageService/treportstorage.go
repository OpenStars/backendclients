// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package TReportStorageService

import(
	"bytes"
	"context"
  "encoding/json"
  "reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type TErrorCode int64
const (
  TErrorCode_EGood TErrorCode = 0
  TErrorCode_ENotFound TErrorCode = -1
  TErrorCode_EUnknown TErrorCode = -2
  TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
  switch p {
  case TErrorCode_EGood: return "EGood"
  case TErrorCode_ENotFound: return "ENotFound"
  case TErrorCode_EUnknown: return "EUnknown"
  case TErrorCode_EDataExisted: return "EDataExisted"
  }
  return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
  switch s {
  case "EGood": return TErrorCode_EGood, nil 
  case "ENotFound": return TErrorCode_ENotFound, nil 
  case "EUnknown": return TErrorCode_EUnknown, nil 
  case "EDataExisted": return TErrorCode_EDataExisted, nil 
  }
  return TErrorCode(0), fmt.Errorf("not a valid TErrorCode string")
}


func TErrorCodePtr(v TErrorCode) *TErrorCode { return &v }

func (p TErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TErrorCode) UnmarshalText(text []byte) error {
q, err := TErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TErrorCode(v)
return nil
}

func (p * TErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TKey int64

func TKeyPtr(v TKey) *TKey { return &v }

type TData *TReportItem

func TDataPtr(v TData) *TData { return &v }

// Attributes:
//  - Name
//  - MediaType
//  - URL
type MediaItem struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  MediaType int64 `thrift:"mediaType,2" db:"mediaType" json:"mediaType"`
  URL string `thrift:"url,3" db:"url" json:"url"`
}

func NewMediaItem() *MediaItem {
  return &MediaItem{}
}


func (p *MediaItem) GetName() string {
  return p.Name
}

func (p *MediaItem) GetMediaType() int64 {
  return p.MediaType
}

func (p *MediaItem) GetURL() string {
  return p.URL
}
func (p *MediaItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MediaItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *MediaItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MediaType = v
}
  return nil
}

func (p *MediaItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *MediaItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MediaItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MediaItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *MediaItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaType", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mediaType: ", p), err) }
  if err := oprot.WriteI64(int64(p.MediaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mediaType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mediaType: ", p), err) }
  return err
}

func (p *MediaItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:url: ", p), err) }
  return err
}

func (p *MediaItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MediaItem(%+v)", *p)
}

// Attributes:
//  - ReportId
//  - UID
//  - TargetId
//  - PostId
//  - CommentId
//  - ContentObj
//  - ListMediaObj
//  - ActionLink
//  - ContentReport
//  - Timestamp
//  - TimestampObj
//  - LocationId
//  - LocationName
//  - Action
type TReportItem struct {
  ReportId int64 `thrift:"reportId,1" db:"reportId" json:"reportId"`
  UID int64 `thrift:"uId,2" db:"uId" json:"uId"`
  TargetId int64 `thrift:"targetId,3" db:"targetId" json:"targetId"`
  PostId *int64 `thrift:"postId,4" db:"postId" json:"postId,omitempty"`
  CommentId *int64 `thrift:"commentId,5" db:"commentId" json:"commentId,omitempty"`
  ContentObj *string `thrift:"contentObj,6" db:"contentObj" json:"contentObj,omitempty"`
  ListMediaObj []*MediaItem `thrift:"listMediaObj,7" db:"listMediaObj" json:"listMediaObj,omitempty"`
  ActionLink []string `thrift:"actionLink,8" db:"actionLink" json:"actionLink,omitempty"`
  ContentReport *string `thrift:"contentReport,9" db:"contentReport" json:"contentReport,omitempty"`
  Timestamp int64 `thrift:"timestamp,10" db:"timestamp" json:"timestamp"`
  TimestampObj *int64 `thrift:"timestampObj,11" db:"timestampObj" json:"timestampObj,omitempty"`
  LocationId *string `thrift:"locationId,12" db:"locationId" json:"locationId,omitempty"`
  LocationName *string `thrift:"locationName,13" db:"locationName" json:"locationName,omitempty"`
  Action int8 `thrift:"action,14" db:"action" json:"action"`
}

func NewTReportItem() *TReportItem {
  return &TReportItem{}
}

func (o *TReportItem) ToBytes() []byte {
  jsonByte, _ := json.Marshal(o)
  return jsonByte
}

func (o *TReportItem) FromBytes(aBin []byte) bool {
  if json.Unmarshal(aBin, o) == nil {
    return true
  }
  return false
}

func (p *TReportItem) GetReportId() int64 {
  return p.ReportId
}

func (p *TReportItem) GetUID() int64 {
  return p.UID
}

func (p *TReportItem) GetTargetId() int64 {
  return p.TargetId
}
var TReportItem_PostId_DEFAULT int64
func (p *TReportItem) GetPostId() int64 {
  if !p.IsSetPostId() {
    return TReportItem_PostId_DEFAULT
  }
return *p.PostId
}
var TReportItem_CommentId_DEFAULT int64
func (p *TReportItem) GetCommentId() int64 {
  if !p.IsSetCommentId() {
    return TReportItem_CommentId_DEFAULT
  }
return *p.CommentId
}
var TReportItem_ContentObj_DEFAULT string
func (p *TReportItem) GetContentObj() string {
  if !p.IsSetContentObj() {
    return TReportItem_ContentObj_DEFAULT
  }
return *p.ContentObj
}
var TReportItem_ListMediaObj_DEFAULT []*MediaItem

func (p *TReportItem) GetListMediaObj() []*MediaItem {
  return p.ListMediaObj
}
var TReportItem_ActionLink_DEFAULT []string

func (p *TReportItem) GetActionLink() []string {
  return p.ActionLink
}
var TReportItem_ContentReport_DEFAULT string
func (p *TReportItem) GetContentReport() string {
  if !p.IsSetContentReport() {
    return TReportItem_ContentReport_DEFAULT
  }
return *p.ContentReport
}

func (p *TReportItem) GetTimestamp() int64 {
  return p.Timestamp
}
var TReportItem_TimestampObj_DEFAULT int64
func (p *TReportItem) GetTimestampObj() int64 {
  if !p.IsSetTimestampObj() {
    return TReportItem_TimestampObj_DEFAULT
  }
return *p.TimestampObj
}
var TReportItem_LocationId_DEFAULT string
func (p *TReportItem) GetLocationId() string {
  if !p.IsSetLocationId() {
    return TReportItem_LocationId_DEFAULT
  }
return *p.LocationId
}
var TReportItem_LocationName_DEFAULT string
func (p *TReportItem) GetLocationName() string {
  if !p.IsSetLocationName() {
    return TReportItem_LocationName_DEFAULT
  }
return *p.LocationName
}

func (p *TReportItem) GetAction() int8 {
  return p.Action
}
func (p *TReportItem) IsSetPostId() bool {
  return p.PostId != nil
}

func (p *TReportItem) IsSetCommentId() bool {
  return p.CommentId != nil
}

func (p *TReportItem) IsSetContentObj() bool {
  return p.ContentObj != nil
}

func (p *TReportItem) IsSetListMediaObj() bool {
  return p.ListMediaObj != nil
}

func (p *TReportItem) IsSetActionLink() bool {
  return p.ActionLink != nil
}

func (p *TReportItem) IsSetContentReport() bool {
  return p.ContentReport != nil
}

func (p *TReportItem) IsSetTimestampObj() bool {
  return p.TimestampObj != nil
}

func (p *TReportItem) IsSetLocationId() bool {
  return p.LocationId != nil
}

func (p *TReportItem) IsSetLocationName() bool {
  return p.LocationName != nil
}

func (p *TReportItem) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TReportItem)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReportId = v
}
  return nil
}

func (p *TReportItem)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UID = v
}
  return nil
}

func (p *TReportItem)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TargetId = v
}
  return nil
}

func (p *TReportItem)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PostId = &v
}
  return nil
}

func (p *TReportItem)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CommentId = &v
}
  return nil
}

func (p *TReportItem)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ContentObj = &v
}
  return nil
}

func (p *TReportItem)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*MediaItem, 0, size)
  p.ListMediaObj =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &MediaItem{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.ListMediaObj = append(p.ListMediaObj, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReportItem)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ActionLink =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.ActionLink = append(p.ActionLink, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TReportItem)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.ContentReport = &v
}
  return nil
}

func (p *TReportItem)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *TReportItem)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.TimestampObj = &v
}
  return nil
}

func (p *TReportItem)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.LocationId = &v
}
  return nil
}

func (p *TReportItem)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.LocationName = &v
}
  return nil
}

func (p *TReportItem)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := int8(v)
  p.Action = temp
}
  return nil
}

func (p *TReportItem) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TReportItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TReportItem) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reportId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportId: ", p), err) }
  return err
}

func (p *TReportItem) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uId: ", p), err) }
  if err := oprot.WriteI64(int64(p.UID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uId: ", p), err) }
  return err
}

func (p *TReportItem) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("targetId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetId: ", p), err) }
  if err := oprot.WriteI64(int64(p.TargetId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.targetId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetId: ", p), err) }
  return err
}

func (p *TReportItem) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetPostId() {
    if err := oprot.WriteFieldBegin("postId", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:postId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.PostId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.postId (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:postId: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetCommentId() {
    if err := oprot.WriteFieldBegin("commentId", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:commentId: ", p), err) }
    if err := oprot.WriteI64(int64(*p.CommentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.commentId (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:commentId: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentObj() {
    if err := oprot.WriteFieldBegin("contentObj", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:contentObj: ", p), err) }
    if err := oprot.WriteString(string(*p.ContentObj)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentObj (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:contentObj: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetListMediaObj() {
    if err := oprot.WriteFieldBegin("listMediaObj", thrift.LIST, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:listMediaObj: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListMediaObj)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ListMediaObj {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:listMediaObj: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetActionLink() {
    if err := oprot.WriteFieldBegin("actionLink", thrift.LIST, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:actionLink: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ActionLink)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ActionLink {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:actionLink: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField9(oprot thrift.TProtocol) (err error) {
  if p.IsSetContentReport() {
    if err := oprot.WriteFieldBegin("contentReport", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:contentReport: ", p), err) }
    if err := oprot.WriteString(string(*p.ContentReport)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.contentReport (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:contentReport: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:timestamp: ", p), err) }
  return err
}

func (p *TReportItem) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestampObj() {
    if err := oprot.WriteFieldBegin("timestampObj", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:timestampObj: ", p), err) }
    if err := oprot.WriteI64(int64(*p.TimestampObj)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestampObj (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:timestampObj: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocationId() {
    if err := oprot.WriteFieldBegin("locationId", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:locationId: ", p), err) }
    if err := oprot.WriteString(string(*p.LocationId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.locationId (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:locationId: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocationName() {
    if err := oprot.WriteFieldBegin("locationName", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:locationName: ", p), err) }
    if err := oprot.WriteString(string(*p.LocationName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.locationName (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:locationName: ", p), err) }
  }
  return err
}

func (p *TReportItem) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("action", thrift.BYTE, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:action: ", p), err) }
  if err := oprot.WriteByte(int8(p.Action)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.action (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:action: ", p), err) }
  return err
}

func (p *TReportItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TReportItem(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Data
type TDataResult_ struct {
  ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Data *TReportItem `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTDataResult_() *TDataResult_ {
  return &TDataResult_{}
}


func (p *TDataResult_) GetErrorCode() TErrorCode {
  return p.ErrorCode
}
var TDataResult__Data_DEFAULT *TReportItem
func (p *TDataResult_) GetData() *TReportItem {
  if !p.IsSetData() {
    return TDataResult__Data_DEFAULT
  }
return p.Data
}
func (p *TDataResult_) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TReportItem{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *TDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := p.Data.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *TDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataResult_(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Data
type TListDataResult_ struct {
  ErrorCode TErrorCode `thrift:"errorCode,1" db:"errorCode" json:"errorCode"`
  Data []*TReportItem `thrift:"data,2" db:"data" json:"data,omitempty"`
}

func NewTListDataResult_() *TListDataResult_ {
  return &TListDataResult_{}
}


func (p *TListDataResult_) GetErrorCode() TErrorCode {
  return p.ErrorCode
}
var TListDataResult__Data_DEFAULT []*TReportItem

func (p *TListDataResult_) GetData() []*TReportItem {
  return p.Data
}
func (p *TListDataResult_) IsSetData() bool {
  return p.Data != nil
}

func (p *TListDataResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TListDataResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TListDataResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TReportItem, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TReportItem{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.Data = append(p.Data, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TListDataResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TListDataResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TListDataResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *TListDataResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Data {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  }
  return err
}

func (p *TListDataResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TListDataResult_(%+v)", *p)
}

type TDataServiceR interface {
  // Parameters:
  //  - Key
  GetData(ctx context.Context, key TKey) (r *TDataResult_, err error)
}

type TDataServiceRClient struct {
  c thrift.TClient
}

func NewTDataServiceRClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceRClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceRClient(c thrift.TClient) *TDataServiceRClient {
  return &TDataServiceRClient{
    c: c,
  }
}

func (p *TDataServiceRClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Key
func (p *TDataServiceRClient) GetData(ctx context.Context, key TKey) (r *TDataResult_, err error) {
  var _args3 TDataServiceRGetDataArgs
  _args3.Key = key
  var _result4 TDataServiceRGetDataResult
  if err = p.Client_().Call(ctx, "getData", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

type TDataServiceRProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataServiceR
}

func (p *TDataServiceRProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceRProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceRProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceRProcessor(handler TDataServiceR) *TDataServiceRProcessor {

  self5 := &TDataServiceRProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self5.processorMap["getData"] = &tDataServiceRProcessorGetData{handler:handler}
return self5
}

func (p *TDataServiceRProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x6.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x6

}

type tDataServiceRProcessorGetData struct {
  handler TDataServiceR
}

func (p *tDataServiceRProcessorGetData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceRGetDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceRGetDataResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetData(ctx, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getData: " + err2.Error())
    oprot.WriteMessageBegin("getData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Key
type TDataServiceRGetDataArgs struct {
  Key TKey `thrift:"key,1" db:"key" json:"key"`
}

func NewTDataServiceRGetDataArgs() *TDataServiceRGetDataArgs {
  return &TDataServiceRGetDataArgs{}
}


func (p *TDataServiceRGetDataArgs) GetKey() TKey {
  return p.Key
}
func (p *TDataServiceRGetDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TKey(v)
  p.Key = temp
}
  return nil
}

func (p *TDataServiceRGetDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI64(int64(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TDataServiceRGetDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceRGetDataResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceRGetDataResult() *TDataServiceRGetDataResult {
  return &TDataServiceRGetDataResult{}
}

var TDataServiceRGetDataResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceRGetDataResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceRGetDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceRGetDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceRGetDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceRGetDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRGetDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceRGetDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRGetDataResult(%+v)", *p)
}


type TDataService interface {
  // Parameters:
  //  - ReportId
  GetReport(ctx context.Context, reportId int64) (r *TDataResult_, err error)
  // Parameters:
  //  - ReportId
  //  - Data
  PutReport(ctx context.Context, reportId int64, data *TReportItem) (r TErrorCode, err error)
  // Parameters:
  //  - ReportId
  RemoveReport(ctx context.Context, reportId int64) (r bool, err error)
  // Parameters:
  //  - LsReportIds
  GetListReports(ctx context.Context, lsReportIds []int64) (r *TListDataResult_, err error)
}

type TDataServiceClient struct {
  c thrift.TClient
}

func NewTDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TDataServiceClient {
  return &TDataServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTDataServiceClient(c thrift.TClient) *TDataServiceClient {
  return &TDataServiceClient{
    c: c,
  }
}

func (p *TDataServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReportId
func (p *TDataServiceClient) GetReport(ctx context.Context, reportId int64) (r *TDataResult_, err error) {
  var _args8 TDataServiceGetReportArgs
  _args8.ReportId = reportId
  var _result9 TDataServiceGetReportResult
  if err = p.Client_().Call(ctx, "getReport", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - ReportId
//  - Data
func (p *TDataServiceClient) PutReport(ctx context.Context, reportId int64, data *TReportItem) (r TErrorCode, err error) {
  var _args10 TDataServicePutReportArgs
  _args10.ReportId = reportId
  _args10.Data = data
  var _result11 TDataServicePutReportResult
  if err = p.Client_().Call(ctx, "putReport", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - ReportId
func (p *TDataServiceClient) RemoveReport(ctx context.Context, reportId int64) (r bool, err error) {
  var _args12 TDataServiceRemoveReportArgs
  _args12.ReportId = reportId
  var _result13 TDataServiceRemoveReportResult
  if err = p.Client_().Call(ctx, "RemoveReport", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - LsReportIds
func (p *TDataServiceClient) GetListReports(ctx context.Context, lsReportIds []int64) (r *TListDataResult_, err error) {
  var _args14 TDataServiceGetListReportsArgs
  _args14.LsReportIds = lsReportIds
  var _result15 TDataServiceGetListReportsResult
  if err = p.Client_().Call(ctx, "getListReports", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

type TDataServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TDataService
}

func (p *TDataServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TDataServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TDataServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTDataServiceProcessor(handler TDataService) *TDataServiceProcessor {

  self16 := &TDataServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["getReport"] = &tDataServiceProcessorGetReport{handler:handler}
  self16.processorMap["putReport"] = &tDataServiceProcessorPutReport{handler:handler}
  self16.processorMap["RemoveReport"] = &tDataServiceProcessorRemoveReport{handler:handler}
  self16.processorMap["getListReports"] = &tDataServiceProcessorGetListReports{handler:handler}
return self16
}

func (p *TDataServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x17.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x17

}

type tDataServiceProcessorGetReport struct {
  handler TDataService
}

func (p *tDataServiceProcessorGetReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceGetReportArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceGetReportResult{}
var retval *TDataResult_
  var err2 error
  if retval, err2 = p.handler.GetReport(ctx, args.ReportId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getReport: " + err2.Error())
    oprot.WriteMessageBegin("getReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getReport", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorPutReport struct {
  handler TDataService
}

func (p *tDataServiceProcessorPutReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServicePutReportArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("putReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServicePutReportResult{}
var retval TErrorCode
  var err2 error
  if retval, err2 = p.handler.PutReport(ctx, args.ReportId, args.Data); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing putReport: " + err2.Error())
    oprot.WriteMessageBegin("putReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("putReport", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorRemoveReport struct {
  handler TDataService
}

func (p *tDataServiceProcessorRemoveReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceRemoveReportArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("RemoveReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceRemoveReportResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RemoveReport(ctx, args.ReportId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RemoveReport: " + err2.Error())
    oprot.WriteMessageBegin("RemoveReport", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("RemoveReport", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tDataServiceProcessorGetListReports struct {
  handler TDataService
}

func (p *tDataServiceProcessorGetListReports) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TDataServiceGetListReportsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListReports", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TDataServiceGetListReportsResult{}
var retval *TListDataResult_
  var err2 error
  if retval, err2 = p.handler.GetListReports(ctx, args.LsReportIds); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListReports: " + err2.Error())
    oprot.WriteMessageBegin("getListReports", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getListReports", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReportId
type TDataServiceGetReportArgs struct {
  ReportId int64 `thrift:"reportId,1" db:"reportId" json:"reportId"`
}

func NewTDataServiceGetReportArgs() *TDataServiceGetReportArgs {
  return &TDataServiceGetReportArgs{}
}


func (p *TDataServiceGetReportArgs) GetReportId() int64 {
  return p.ReportId
}
func (p *TDataServiceGetReportArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetReportArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReportId = v
}
  return nil
}

func (p *TDataServiceGetReportArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getReport_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reportId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportId: ", p), err) }
  return err
}

func (p *TDataServiceGetReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetReportArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetReportResult struct {
  Success *TDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetReportResult() *TDataServiceGetReportResult {
  return &TDataServiceGetReportResult{}
}

var TDataServiceGetReportResult_Success_DEFAULT *TDataResult_
func (p *TDataServiceGetReportResult) GetSuccess() *TDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceGetReportResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceGetReportResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceGetReportResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetReportResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceGetReportResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getReport_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetReportResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceGetReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetReportResult(%+v)", *p)
}

// Attributes:
//  - ReportId
//  - Data
type TDataServicePutReportArgs struct {
  ReportId int64 `thrift:"reportId,1" db:"reportId" json:"reportId"`
  Data *TReportItem `thrift:"data,2" db:"data" json:"data"`
}

func NewTDataServicePutReportArgs() *TDataServicePutReportArgs {
  return &TDataServicePutReportArgs{}
}


func (p *TDataServicePutReportArgs) GetReportId() int64 {
  return p.ReportId
}
var TDataServicePutReportArgs_Data_DEFAULT *TReportItem
func (p *TDataServicePutReportArgs) GetData() *TReportItem {
  if !p.IsSetData() {
    return TDataServicePutReportArgs_Data_DEFAULT
  }
return p.Data
}
func (p *TDataServicePutReportArgs) IsSetData() bool {
  return p.Data != nil
}

func (p *TDataServicePutReportArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutReportArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReportId = v
}
  return nil
}

func (p *TDataServicePutReportArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Data = &TReportItem{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *TDataServicePutReportArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putReport_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reportId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportId: ", p), err) }
  return err
}

func (p *TDataServicePutReportArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data: ", p), err) }
  return err
}

func (p *TDataServicePutReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutReportArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServicePutReportResult struct {
  Success *TErrorCode `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServicePutReportResult() *TDataServicePutReportResult {
  return &TDataServicePutReportResult{}
}

var TDataServicePutReportResult_Success_DEFAULT TErrorCode
func (p *TDataServicePutReportResult) GetSuccess() TErrorCode {
  if !p.IsSetSuccess() {
    return TDataServicePutReportResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDataServicePutReportResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServicePutReportResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServicePutReportResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := TErrorCode(v)
  p.Success = &temp
}
  return nil
}

func (p *TDataServicePutReportResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("putReport_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServicePutReportResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServicePutReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServicePutReportResult(%+v)", *p)
}

// Attributes:
//  - ReportId
type TDataServiceRemoveReportArgs struct {
  ReportId int64 `thrift:"reportId,1" db:"reportId" json:"reportId"`
}

func NewTDataServiceRemoveReportArgs() *TDataServiceRemoveReportArgs {
  return &TDataServiceRemoveReportArgs{}
}


func (p *TDataServiceRemoveReportArgs) GetReportId() int64 {
  return p.ReportId
}
func (p *TDataServiceRemoveReportArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRemoveReportArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReportId = v
}
  return nil
}

func (p *TDataServiceRemoveReportArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RemoveReport_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRemoveReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reportId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reportId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReportId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reportId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reportId: ", p), err) }
  return err
}

func (p *TDataServiceRemoveReportArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRemoveReportArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceRemoveReportResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceRemoveReportResult() *TDataServiceRemoveReportResult {
  return &TDataServiceRemoveReportResult{}
}

var TDataServiceRemoveReportResult_Success_DEFAULT bool
func (p *TDataServiceRemoveReportResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TDataServiceRemoveReportResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TDataServiceRemoveReportResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceRemoveReportResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceRemoveReportResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TDataServiceRemoveReportResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RemoveReport_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceRemoveReportResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceRemoveReportResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceRemoveReportResult(%+v)", *p)
}

// Attributes:
//  - LsReportIds
type TDataServiceGetListReportsArgs struct {
  LsReportIds []int64 `thrift:"lsReportIds,1" db:"lsReportIds" json:"lsReportIds"`
}

func NewTDataServiceGetListReportsArgs() *TDataServiceGetListReportsArgs {
  return &TDataServiceGetListReportsArgs{}
}


func (p *TDataServiceGetListReportsArgs) GetLsReportIds() []int64 {
  return p.LsReportIds
}
func (p *TDataServiceGetListReportsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetListReportsArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.LsReportIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem18 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem18 = v
}
    p.LsReportIds = append(p.LsReportIds, _elem18)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TDataServiceGetListReportsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListReports_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetListReportsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lsReportIds", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:lsReportIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.LsReportIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LsReportIds {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:lsReportIds: ", p), err) }
  return err
}

func (p *TDataServiceGetListReportsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetListReportsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TDataServiceGetListReportsResult struct {
  Success *TListDataResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTDataServiceGetListReportsResult() *TDataServiceGetListReportsResult {
  return &TDataServiceGetListReportsResult{}
}

var TDataServiceGetListReportsResult_Success_DEFAULT *TListDataResult_
func (p *TDataServiceGetListReportsResult) GetSuccess() *TListDataResult_ {
  if !p.IsSetSuccess() {
    return TDataServiceGetListReportsResult_Success_DEFAULT
  }
return p.Success
}
func (p *TDataServiceGetListReportsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TDataServiceGetListReportsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDataServiceGetListReportsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TListDataResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TDataServiceGetListReportsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListReports_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDataServiceGetListReportsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TDataServiceGetListReportsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDataServiceGetListReportsResult(%+v)", *p)
}


type TReportStorageService interface {
TDataService
}

type TReportStorageServiceClient struct {
  *TDataServiceClient
}

func NewTReportStorageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TReportStorageServiceClient {
  return &TReportStorageServiceClient{TDataServiceClient: NewTDataServiceClientFactory(t, f)}}

func NewTReportStorageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TReportStorageServiceClient {
  return &TReportStorageServiceClient{TDataServiceClient: NewTDataServiceClientProtocol(t, iprot, oprot)}
}

func NewTReportStorageServiceClient(c thrift.TClient) *TReportStorageServiceClient {
  return &TReportStorageServiceClient{
    TDataServiceClient: NewTDataServiceClient(c),
  }
}

type TReportStorageServiceProcessor struct {
  *TDataServiceProcessor
}

func NewTReportStorageServiceProcessor(handler TReportStorageService) *TReportStorageServiceProcessor {
  self34 := &TReportStorageServiceProcessor{NewTDataServiceProcessor(handler)}
  return self34
}


// HELPER FUNCTIONS AND STRUCTURES


