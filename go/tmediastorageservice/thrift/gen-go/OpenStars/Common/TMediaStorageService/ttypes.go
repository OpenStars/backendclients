// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package TMediaStorageService

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type TErrorCode int64

const (
	TErrorCode_EGood        TErrorCode = 0
	TErrorCode_ENotFound    TErrorCode = -1
	TErrorCode_EUnknown     TErrorCode = -2
	TErrorCode_EDataExisted TErrorCode = -3
)

func (p TErrorCode) String() string {
	switch p {
	case TErrorCode_EGood:
		return "TErrorCode_EGood"
	case TErrorCode_ENotFound:
		return "TErrorCode_ENotFound"
	case TErrorCode_EUnknown:
		return "TErrorCode_EUnknown"
	case TErrorCode_EDataExisted:
		return "TErrorCode_EDataExisted"
	}
	return "<UNSET>"
}

func TErrorCodeFromString(s string) (TErrorCode, error) {
	switch s {
	case "TErrorCode_EGood":
		return TErrorCode_EGood, nil
	case "TErrorCode_ENotFound":
		return TErrorCode_ENotFound, nil
	case "TErrorCode_EUnknown":
		return TErrorCode_EUnknown, nil
	case "TErrorCode_EDataExisted":
		return TErrorCode_EDataExisted, nil
	}
	return TErrorCode(math.MinInt32 - 1), fmt.Errorf("not a valid TErrorCode string")
}

type TKey int64

type TData *TMediaItem

type TMediaItem struct {
	Name       string            `thrift:"name,1"`
	MediaType  int64             `thrift:"mediaType,2"`
	Url        string            `thrift:"url,3"`
	Idmedia    int64             `thrift:"idmedia,4"`
	Idpost     int64             `thrift:"idpost,5"`
	Timestamps int64             `thrift:"timestamps,6"`
	Extend     string            `thrift:"extend,7"`
	MapExtend  map[string]string `thrift:"mapExtend,8"`
}

func NewTMediaItem() *TMediaItem {
	return &TMediaItem{}
}

func (p *TMediaItem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TMediaItem) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *TMediaItem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MediaType = v
	}
	return nil
}

func (p *TMediaItem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Url = v
	}
	return nil
}

func (p *TMediaItem) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Idmedia = v
	}
	return nil
}

func (p *TMediaItem) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Idpost = v
	}
	return nil
}

func (p *TMediaItem) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Timestamps = v
	}
	return nil
}

func (p *TMediaItem) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Extend = v
	}
	return nil
}

func (p *TMediaItem) readField8(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.MapExtend = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val1 = v
		}
		p.MapExtend[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *TMediaItem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TMediaItem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TMediaItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *TMediaItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mediaType", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:mediaType: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.MediaType)); err != nil {
		return fmt.Errorf("%T.mediaType (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:mediaType: %s", p, err)
	}
	return err
}

func (p *TMediaItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("url", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:url: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Url)); err != nil {
		return fmt.Errorf("%T.url (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:url: %s", p, err)
	}
	return err
}

func (p *TMediaItem) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idmedia", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:idmedia: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Idmedia)); err != nil {
		return fmt.Errorf("%T.idmedia (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:idmedia: %s", p, err)
	}
	return err
}

func (p *TMediaItem) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idpost", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:idpost: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Idpost)); err != nil {
		return fmt.Errorf("%T.idpost (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:idpost: %s", p, err)
	}
	return err
}

func (p *TMediaItem) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamps", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:timestamps: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamps)); err != nil {
		return fmt.Errorf("%T.timestamps (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:timestamps: %s", p, err)
	}
	return err
}

func (p *TMediaItem) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extend", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:extend: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Extend)); err != nil {
		return fmt.Errorf("%T.extend (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:extend: %s", p, err)
	}
	return err
}

func (p *TMediaItem) writeField8(oprot thrift.TProtocol) (err error) {
	if p.MapExtend != nil {
		if err := oprot.WriteFieldBegin("mapExtend", thrift.MAP, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:mapExtend: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MapExtend)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.MapExtend {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:mapExtend: %s", p, err)
		}
	}
	return err
}

func (p *TMediaItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TMediaItem(%+v)", *p)
}

type TDataResult struct {
	ErrorCode TErrorCode  `thrift:"errorCode,1"`
	Data      *TMediaItem `thrift:"data,2"`
}

func NewTDataResult() *TDataResult {
	return &TDataResult{
		ErrorCode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *TDataResult) IsSetErrorCode() bool {
	return int64(p.ErrorCode) != math.MinInt32-1
}

func (p *TDataResult) IsSetData() bool {
	return p.Data != nil
}

func (p *TDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TDataResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = TErrorCode(v)
	}
	return nil
}

func (p *TDataResult) readField2(iprot thrift.TProtocol) error {
	p.Data = NewTMediaItem()
	if err := p.Data.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Data)
	}
	return nil
}

func (p *TDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TDataResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.errorCode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
		}
	}
	return err
}

func (p *TDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if p.IsSetData() {
			if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:data: %s", p, err)
			}
			if err := p.Data.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Data)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:data: %s", p, err)
			}
		}
	}
	return err
}

func (p *TDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TDataResult(%+v)", *p)
}

type TListDataResult struct {
	ErrorCode TErrorCode    `thrift:"errorCode,1"`
	ListDatas []*TMediaItem `thrift:"listDatas,2"`
}

func NewTListDataResult() *TListDataResult {
	return &TListDataResult{
		ErrorCode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *TListDataResult) IsSetErrorCode() bool {
	return int64(p.ErrorCode) != math.MinInt32-1
}

func (p *TListDataResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TListDataResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = TErrorCode(v)
	}
	return nil
}

func (p *TListDataResult) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ListDatas = make([]*TMediaItem, 0, size)
	for i := 0; i < size; i++ {
		_elem2 := NewTMediaItem()
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2)
		}
		p.ListDatas = append(p.ListDatas, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TListDataResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TListDataResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TListDataResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.errorCode (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
		}
	}
	return err
}

func (p *TListDataResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.ListDatas != nil {
		if err := oprot.WriteFieldBegin("listDatas", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:listDatas: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ListDatas)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.ListDatas {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:listDatas: %s", p, err)
		}
	}
	return err
}

func (p *TListDataResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TListDataResult(%+v)", *p)
}
