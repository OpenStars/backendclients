/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef tmediastorage_TYPES_H
#define tmediastorage_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace OpenStars { namespace Common { namespace TMediaStorageService {

struct TErrorCode {
  enum type {
    EGood = 0,
    ENotFound = -1,
    EUnknown = -2,
    EDataExisted = -3
  };
};

extern const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val);

typedef int64_t TKey;

typedef class TMediaItem TData;

class TMediaItem;

class TDataResult;

class TListDataResult;

typedef struct _TMediaItem__isset {
  _TMediaItem__isset() : name(false), mediaType(false), url(false), idmedia(false), idpost(false), timestamps(false), extend(false), mapExtend(false) {}
  bool name :1;
  bool mediaType :1;
  bool url :1;
  bool idmedia :1;
  bool idpost :1;
  bool timestamps :1;
  bool extend :1;
  bool mapExtend :1;
} _TMediaItem__isset;

class TMediaItem : public virtual ::apache::thrift::TBase {
 public:

  TMediaItem(const TMediaItem&);
  TMediaItem& operator=(const TMediaItem&);
  TMediaItem() : name(), mediaType(0), url(), idmedia(0), idpost(0), timestamps(0), extend() {
  }

  virtual ~TMediaItem() throw();
  std::string name;
  int64_t mediaType;
  std::string url;
  int64_t idmedia;
  int64_t idpost;
  int64_t timestamps;
  std::string extend;
  std::map<std::string, std::string>  mapExtend;

  _TMediaItem__isset __isset;

  void __set_name(const std::string& val);

  void __set_mediaType(const int64_t val);

  void __set_url(const std::string& val);

  void __set_idmedia(const int64_t val);

  void __set_idpost(const int64_t val);

  void __set_timestamps(const int64_t val);

  void __set_extend(const std::string& val);

  void __set_mapExtend(const std::map<std::string, std::string> & val);

  bool operator == (const TMediaItem & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(mediaType == rhs.mediaType))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(idmedia == rhs.idmedia))
      return false;
    if (!(idpost == rhs.idpost))
      return false;
    if (!(timestamps == rhs.timestamps))
      return false;
    if (!(extend == rhs.extend))
      return false;
    if (!(mapExtend == rhs.mapExtend))
      return false;
    return true;
  }
  bool operator != (const TMediaItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TMediaItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TMediaItem &a, TMediaItem &b);

std::ostream& operator<<(std::ostream& out, const TMediaItem& obj);

typedef struct _TDataResult__isset {
  _TDataResult__isset() : errorCode(false), data(false) {}
  bool errorCode :1;
  bool data :1;
} _TDataResult__isset;

class TDataResult : public virtual ::apache::thrift::TBase {
 public:

  TDataResult(const TDataResult&);
  TDataResult& operator=(const TDataResult&);
  TDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TDataResult() throw();
  TErrorCode::type errorCode;
  TMediaItem data;

  _TDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_data(const TMediaItem& val);

  bool operator == (const TDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (__isset.data != rhs.__isset.data)
      return false;
    else if (__isset.data && !(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const TDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TDataResult &a, TDataResult &b);

std::ostream& operator<<(std::ostream& out, const TDataResult& obj);

typedef struct _TListDataResult__isset {
  _TListDataResult__isset() : errorCode(false), listDatas(false) {}
  bool errorCode :1;
  bool listDatas :1;
} _TListDataResult__isset;

class TListDataResult : public virtual ::apache::thrift::TBase {
 public:

  TListDataResult(const TListDataResult&);
  TListDataResult& operator=(const TListDataResult&);
  TListDataResult() : errorCode((TErrorCode::type)0) {
  }

  virtual ~TListDataResult() throw();
  TErrorCode::type errorCode;
  std::vector<TMediaItem>  listDatas;

  _TListDataResult__isset __isset;

  void __set_errorCode(const TErrorCode::type val);

  void __set_listDatas(const std::vector<TMediaItem> & val);

  bool operator == (const TListDataResult & rhs) const
  {
    if (!(errorCode == rhs.errorCode))
      return false;
    if (!(listDatas == rhs.listDatas))
      return false;
    return true;
  }
  bool operator != (const TListDataResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TListDataResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TListDataResult &a, TListDataResult &b);

std::ostream& operator<<(std::ostream& out, const TListDataResult& obj);

}}} // namespace

#endif
